float last_freq;
float last_vel;
int   notes_pressed=0;
int   currentNote=69;
int   currentVelocity=0;

void note_on(MidiMsg * msg) {    
    float freq = midi_to_freq(msg->data1);
    float velocity = msg->data2/127.0f;
    currentNote = msg->data1;
    currentVelocity = msg->data2;
    Freq = freq2cv(freq);
    Vel  = velocity;    
    adsr.noteOn();    
    adsr2.noteOn();    
    last_freq = Freq;
    last_vel  = velocity;
    notes_pressed++;
    
}
void note_off(MidiMsg * msg) {
    float freq = midi_to_freq(msg->data1);
    float velocity = msg->data2/127.0f;
    notes_pressed--;
    if(notes_pressed <= 0)
    {
        notes_pressed = 0;
        adsr.noteOff();
        adsr2.noteOff();
    }
}


void midi_msg_print(MidiMsg * msg) {
    printf("%d %d %d\n",msg->msg,msg->data1,msg->data2);
}

void control_change(MidiMsg * msg) {
    midi_msg_print(msg);
    if(msg->data1 == 102)
    {
        double fc = std::log(1 + (double)msg->data2/127.0f)/std::log(2);                        
        Fcutoff = freq2cv(fc*1000*(std::log(1+sampleRate/2)/std::log(2)));
    }
    if(msg->data1 == 103)
    {
        double q = std::log(1 + (double)msg->data2/127.0f)/std::log(2);        
        double lg1000 = (log(1000)/log(2));                    
        Q = q*lg1000;        
        if(Q < 0.01) Q = 0.01;
        Qn = q;
    }
}
