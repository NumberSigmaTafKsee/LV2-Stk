//
//  Shifter.h
//  PhaseShifter Header
//
//
//

#ifndef __fooHarmonizer__Shifter__
#define __fooHarmonizer__Shifter__

// #include <stdio.h>
#include "../JuceLibraryCode/JuceHeader.h"
#include "fft.h"

#define INIT_SAMPLE_RATE        44100
#define WINDOW_SIZE             1024 //Was 4096
#define HOP_SIZE                (WINDOW_SIZE/2) //Was 1/4Window Size

class Shifter
{
public:
    // Constructor
    Shifter();
    // Deconstructor
    ~Shifter();

    // Data structure for our channel data analysis
    typedef struct
    {
        // Windows for our data
        float win[WINDOW_SIZE];                 // Window containing windowing type
        float cur_win[WINDOW_SIZE];             // Window containing our current data samples
        float pre_win[WINDOW_SIZE];             // Window containing previous frame's data
        // Previous Phase data
        float prev_phs[WINDOW_SIZE/2];               // Previous phase array
        // FFT Data (Phase and Mag data we obtain)
        float cur_phs[WINDOW_SIZE/2];           // Current phase array
        float cur_mag[WINDOW_SIZE/2];           // Current magnitude array
        // Cumulative Phase data
        float sumPhase[WINDOW_SIZE/2];          // Cumulative phase array
        // Temporary array to write our pitch shifted data to
        float outData[WINDOW_SIZE*2];           // Output Data array
        // Analysis Stage
        float anaFreq[WINDOW_SIZE];             // Analysis frequency
        float anaMagn[WINDOW_SIZE];             // Analysis magnitude
        // Synthesis Stage
        float synFreq[WINDOW_SIZE];             // Synthesis frequency
        float synMagn[WINDOW_SIZE];             // Synthesis magnitude
        // Status flag to check whether or not we have init the data
        bool status;                            // set to false
    } data;
    
    // Data structure holds pitch shifter's parameters
    struct Parameters
    {
		Parameters() noexcept
			: pitch(1.0f),
			lpf(20000.0f),
			hpf(0.0f),
			mix(0.50f),
			order(0),
			filter(1)
			{}

		float pitch;
        float lpf;
        float hpf;
        float mix;
        int order;
        int filter;
    };
    
    // Get parameters
    const Parameters& getParameters() const noexcept
    {
        return parameters;
    };
    
    // Set parameters
    void setParameters(const Parameters& newParams);
    
    // Set sample rate
    void setSampleRate(const double sampleRate);
    
    // Clear buffers
    void prepareToPlay();
    
    // Init arrays
    void initArrays(data *dat);
    // Reset buffers every time we change
    void setBuffers(data *dat);
    
    // Process Mono Channel
    void processMono(float* const samples, const int numSamples);
    
    // Process Stereo Channel
    void processStereo(float* const left, float* const right, const int numSamples);
    
    // Process Channel of Data
    void processChannel(float* const samples, const int numSamples, data *myData) noexcept;
    
    // Update Lowpass Filter's Parameters
    void updateLPFilter(void);
    
    // Updates Highpass Filter's Parameters
    void updateHPFilter(void);
    
    // Process Filters
    void processFilters(float* const samples, const int numSamples);
    
    // Variables for processing FFT windows
    float magn, freqPerBin, expct, overlap, overlap_samples, omega;
    
    // Oversampling factor
    long osamp;
    
    // Our separate data channels
    data monoData, leftData, rightData;
    
protected:
    
private:
    // Pitch shifter's parameters
    Parameters parameters;
    // Pitch shifter's sample rate
    double currentSampleRate;
    // Filters
    IIRFilter lpassFilter, hpassFilter;
};


#endif /* defined(__fooHarmonizer__Shifter__) */

// Phase Vocoding implementation via filter-bank approach
// Information obtained from DAFX book ch. 7
// Pitch Shifting Process:
//      1. Input Signal (Time Domain)
//      2. Window Data
//      3. STFT Signal (to FFT data)
//      4. Convert to Magnitude and Phase form
//      5. Multiply phases/frequencies with pitch parameter
//      6. Convert from Magnitude and Phase form
//      7. IFFT Signal (to Time Domain)
//      8. Overlap Add Signals
//
// Using the fft.c/h written by:
//          Ge Wang (gewang@cs.princeton.edu)
//          Perry R. Cook (prc@cs.princeton.edu)
// 
// fft.c/h makes a window for the input signal and converts signals to and from FFT with rfft function
//
#define _USE_MATH_DEFINES
#include <cmath>
#include "Shifter.h"

# pragma mark - Initialization and Constructors -

// Constructor
// Set Initial Parameters and sample rate (44100)
Shifter::Shifter() : currentSampleRate(INIT_SAMPLE_RATE)
{
    setParameters(Parameters());
    setSampleRate(INIT_SAMPLE_RATE);
}

// Deconstructor
Shifter::~Shifter()
{
}

// Set our new parameter settings
void Shifter::setParameters(const Parameters& newParams)
{
    parameters = newParams;
}

// Set new sample rate
void Shifter::setSampleRate(const double sampleRate)
{
    jassert(sampleRate > 0);
    currentSampleRate = sampleRate;
}

// Clear/initialize our buffers
void Shifter::prepareToPlay()
{
    
}

// Initialize our Arrays upon startup
void Shifter::initArrays(data *dat)
{
    // Set FFT Oversampling Factor - determines the overlap between adjacent STFT frames
    osamp = WINDOW_SIZE/HOP_SIZE;
    // Set Overlap Percentage - # of samples that will overlap
    overlap = (WINDOW_SIZE - HOP_SIZE) / (float)WINDOW_SIZE;
    // Set Overlap Samples - how much overlap there will be between frames
    overlap_samples = overlap * WINDOW_SIZE;
    
    // Apply hanning window to our main window (less overlap)
    hanning(dat->win, WINDOW_SIZE);
    // Zero out previous window
    memset(dat->pre_win, 0, WINDOW_SIZE*sizeof(float));
    
    // Set expected omega frequency value
    omega = 2. * M_PI * osamp * (float)HOP_SIZE / (float)WINDOW_SIZE;

    // Scale window for overlap add
    for (int i = 0; i < WINDOW_SIZE; i++) dat->win[i] *= 2. / osamp;
    
    // Reset phase buffers
    setBuffers(dat);
    dat->status = false;
}

// Reset phase buffers
void Shifter::setBuffers(data *dat)
{
    // Zero out buffers
    memset(dat->prev_phs, 0, WINDOW_SIZE/2*sizeof(float));
    memset(dat->sumPhase, 0, WINDOW_SIZE/2*sizeof(float));
}

# pragma mark - Pitch Shifting Algorithm -

# pragma mark - Mono Channel Processing
void Shifter::processMono(float* const samples, const int numSamples)
{
    processChannel(samples, numSamples, &monoData);
}

# pragma mark - Stereo Channel Processing

void Shifter::processStereo(float* const left, float* const right, const int numSamples)
{
    processChannel(left, numSamples, &leftData);
    processChannel(right, numSamples, &rightData);
}

// Process Channel Data
inline void Shifter::processChannel(float* const samples, const int numSamples, data *myData) noexcept
{
    // Assert that the samples are not null
    jassert (samples != nullptr);
    
    // Init vars
    long i, j, index;
    float tmp;
    
    // Set Frequencies Per Bin - frequency width per bin = SR/WINDOW_SIZE (bandwidth per bin for each window size)
    freqPerBin  = currentSampleRate/(float)WINDOW_SIZE;
    
    // Init our arrays upon start-up
    if (myData->status == false)
    {
        setBuffers(myData);
        myData->status = true;
    }
    
    // Return filtered data if parameters.pitch is just 1.0
    if (parameters.pitch == 1.0f)
    {
        if (parameters.filter) processFilters(samples, numSamples);
        return;
    }
    
    // Process our samples; Increment frames by "hop size", or frame widths.
    // This is our overlap add implementation where we take our data frame by frame
    // and then add it back together in the end.
    for (i = 0; i < numSamples; i += HOP_SIZE)
    {
# pragma mark - Analysis
        // Set our incoming samples to the current stft window
        for (j = 0; j < WINDOW_SIZE; j++) myData->cur_win[j] = samples[i+j];
        // Applies windowing to data
        apply_window(myData->cur_win, myData->win, WINDOW_SIZE);
        
        // Obtain minimum phase by shifting time domain data before taking FFT
        fftshift(myData->cur_win, WINDOW_SIZE);
        
# pragma mark - FFT/Convert to Magnitudes + Phases
        // FFT real values (Convert to frequency domain)
        rfft(myData->cur_win, WINDOW_SIZE/2, FFT_FORWARD);
        // Get real and imaginary #s of the FFT'd window
        complex *cbuf = (complex *)myData->cur_win;
        
        // Get Magnitude and Phase (polar coordinates)
        for (j = 0; j < WINDOW_SIZE/2; j++)
        {
            myData->cur_mag[j] = cmp_abs(cbuf[j]);
            myData->cur_phs[j] = atan2f(cbuf[j].im, cbuf[j].re);
        }

# pragma mark - Time-Frequency Processing
        // Get frequencies of FFT'd signal (analysis stage)
        for (j = 0; j < WINDOW_SIZE/2; j++)
        {
            // Get phase shift (true frequency w/ unwrapped phase shift)
            tmp = myData->cur_phs[j] - myData->prev_phs[j];
            // Set prev_phase to cur_phase
            myData->prev_phs[j] = myData->cur_phs[j];
            
            // Get Frequency Deviation (convert to radians)
            tmp -= j*omega;
            
            // Wrap Frequency Deviation to +/- Pi interval
            tmp = fmod(tmp + M_PI, -2 * M_PI) + M_PI;
            
            // Get deviation from bin freq from the +/- pi interval (convert from radians)
            tmp = osamp * tmp / (2. * M_PI);
            
            // Compute true frequency (new phase of freq bin j) by adding phase shift
            tmp = (long)j * freqPerBin + tmp * freqPerBin;
            
            // Store true frequency
            myData->anaFreq[j] = tmp;
        }
        
        // Zero our processing buffers
        memset(myData->synMagn, 0, WINDOW_SIZE*sizeof(float));
        memset(myData->synFreq, 0, WINDOW_SIZE*sizeof(float));
        // Set new frequencies according to our pitch value
        // Filter-bank implementation
        // - Represents Frequencies as a sum on sinusoids
        // - Sinuosoids are modulated in amplitude/frequency
        for (j = 0; j < WINDOW_SIZE/2; j++)
        {
            // Get phase index to pitch shift our FFT data
            index = j * parameters.pitch;
            
            // if the phase index is within our FFT data range, we
            // overlap our current magnitude and set our analysis
            // frequency
            if (index < WINDOW_SIZE/2)
            {
                myData->synMagn[index] += myData->cur_mag[j];
                myData->synFreq[index] = myData->anaFreq[j];
            }
        }
        
# pragma mark - Synthesis
        // Write our new magnitudes and phases
        for (j = 0; j < WINDOW_SIZE/2; j++) {
            // get magnitude and true frequency from synthesis arrays
            myData->cur_mag[j] = myData->synMagn[j];
            
            // Subtract mid frequency bin (get actual pitch-shifted frequency from position j bin)
            tmp = myData->synFreq[j] - (float)j * freqPerBin;
            
            // Get bin deviation from frequency deviation (get actual pitch shifted frequency from frequency bandwidth)
            tmp /= freqPerBin;
            
            // Factor in overlap factor
            tmp = 2. * M_PI * tmp / (float)osamp;
            
            // Add the overlap phase back in (convert to radians)
            tmp += j*omega;
            
            // Accumulate delta phase to get bin phase
            myData->sumPhase[j] += tmp;
            myData->cur_phs[j] = myData->sumPhase[j];
        }
        
        // Back to Cartesian coordinates
        for (j = 0; j < WINDOW_SIZE/2; j++) {
            cbuf[j].re = myData->cur_mag[j] * cosf(myData->cur_phs[j]);
            cbuf[j].im = myData->cur_mag[j] * sinf(myData->cur_phs[j]);
        }
        
        // IFFT back to time domain signal
        rfft((float*)cbuf, WINDOW_SIZE/2, FFT_INVERSE);
 
# pragma mark - Output
        // Write to output (of hop size frame)
        for (j = 0; j < HOP_SIZE; j++) myData->outData[i+j] = myData->pre_win[j + HOP_SIZE] + myData->cur_win[j];
    
        // Move previous window (move previous hop-size frame to previous 256 frames)
        for (j = 0; j < WINDOW_SIZE; j++) myData->pre_win[j] = (j < overlap_samples) ? myData->pre_win[j + HOP_SIZE] : 0;
        
        // Update previous window (add current window to current previous win)
        for (j = 0; j < WINDOW_SIZE; j++) myData->pre_win[j] += myData->cur_win[j];
    }
    
    // Filter data if filter button is on
    if (parameters.filter) processFilters(myData->outData, numSamples);
        
    // Combine input data with output data
    for (i = 0; i < numSamples; i++) samples[i] = samples[i] * (1.0 - parameters.mix) + myData->outData[i] * parameters.mix;
}

# pragma mark - Filter Processing

// Updates Lowpass Filter's Parameters
void Shifter::updateLPFilter(void)
{
    IIRCoefficients low_coef = IIRCoefficients::makeLowPass(currentSampleRate, parameters.lpf);
    lpassFilter.setCoefficients(low_coef);
}

// Updates Highpass Filter's Parameters
void Shifter::updateHPFilter(void)
{
    IIRCoefficients high_coef = IIRCoefficients::makeLowPass(currentSampleRate, parameters.hpf);
    hpassFilter.setCoefficients(high_coef);
}

// Apply filtering to our input data
void Shifter::processFilters(float* const samples, const int numSamples)
{
    // If LPF->HPF order selected
    if (!parameters.order)
    {
        lpassFilter.processSamples(samples, numSamples);
        hpassFilter.processSamples(samples, numSamples);
    }
    else
    {
        hpassFilter.processSamples(samples, numSamples);
        lpassFilter.processSamples(samples, numSamples);
    }
}



 //-----------------------------------------------------------------------------
// name: fft.h
// desc: fft impl - based on CARL distribution
//
// authors: code from San Diego CARL package
//          Ge Wang (gewang@cs.princeton.edu)
//          Perry R. Cook (prc@cs.princeton.edu) 
// date: 11.27.2003
//-----------------------------------------------------------------------------
#ifndef __FFT_H__
#define __FFT_H__


// complex type
typedef struct { float re ; float im ; } complex;

// complex absolute value
#define cmp_abs(x) ( sqrt( (x).re * (x).re + (x).im * (x).im ) )

#define FFT_FORWARD 1
#define FFT_INVERSE 0

// c linkage
#if ( defined( __cplusplus ) || defined( _cplusplus ) )
  extern "C" {
#endif

// make the window
void hanning( float * window, unsigned long length );
void hamming( float * window, unsigned long length );
void blackman( float * window, unsigned long length );

// apply the window
void apply_window( float * data, float * window, unsigned long length );

// real fft, N must be power of 2
void rfft( float * x, long N, unsigned int forward );

// complex fft, NC must be power of 2
void cfft( float * x, long NC, unsigned int forward );

// FFT Shift: Shifts the first position into the middle
void fftshift( float * x, long N );

// Puts an arbitrary phase value into (-pi,pi] [rad]
float princarg( float x );

// c linkage
#if ( defined( __cplusplus ) || defined( _cplusplus ) )
  }
#endif

#endif


//-----------------------------------------------------------------------------
// name: fft.c
// desc: FFT impl - based on CARL distribution
//
// authors: code from San Diego CARL package
//          Ge Wang (gewang@cs.princeton.edu)
//          Perry R. Cook (prc@cs.princeton.edu)
// date: 11.27.2003
//-----------------------------------------------------------------------------
#define _USE_MATH_DEFINES
#include "fft.h"
#include <stdlib.h>
#include <cmath>





//-----------------------------------------------------------------------------
// name: hanning()
// desc: make window
//-----------------------------------------------------------------------------
void hanning( float * window, unsigned long length )
{
   unsigned long i;
   double pi, phase = 0, delta;

   pi = 4.*atan(1.0);
   delta = 2 * M_PI / (double) length;

   for( i = 0; i < length; i++ )
   {
       window[i] = (float)(0.5 * (1.0 - cos(phase)));
       phase += delta;
   }
}




//-----------------------------------------------------------------------------
// name: hamming()
// desc: make window
//-----------------------------------------------------------------------------
void hamming( float * window, unsigned long length )
{
    unsigned long i;
    double pi, phase = 0, delta;

    pi = 4.*atan(1.0);
    delta = 2 * M_PI / (double) length;

    for( i = 0; i < length; i++ )
    {
        window[i] = (float)(0.54 - .46*cos(phase));
        phase += delta;
    }
}



//-----------------------------------------------------------------------------
// name: blackman()
// desc: make window
//-----------------------------------------------------------------------------
void blackman( float * window, unsigned long length )
{
    unsigned long i;
    double pi, phase = 0, delta;

    pi = 4.*atan(1.0);
    delta = 2 * M_PI / (double) length;

    for( i = 0; i < length; i++ )
    {
        window[i] = (float)(0.42 - .5*cos(phase) + .08*cos(2*phase));
        phase += delta;
    }
}




//-----------------------------------------------------------------------------
// name: apply_window()
// desc: apply a window to data
//-----------------------------------------------------------------------------
void apply_window( float * data, float * window, unsigned long length )
{
   unsigned long i;

   for( i = 0; i < length; i++ )
       data[i] *= window[i];
}

void bit_reverse( float * x, long N );


//-----------------------------------------------------------------------------
// name: rfft()
// desc: real value fft
//
//   these routines from the CARL software, spect.c
//   check out the CARL CMusic distribution for more source code
//
//   if forward is true, rfft replaces 2*N real data points in x with N complex 
//   values representing the positive frequency half of their Fourier spectrum,
//   with x[1] replaced with the real part of the Nyquist frequency value.
//
//   if forward is false, rfft expects x to contain a positive frequency 
//   spectrum arranged as before, and replaces it with 2*N real values.
//
//   N MUST be a power of 2.
//
//-----------------------------------------------------------------------------
void rfft( float * x, long N, unsigned int forward )
{
    float c1, c2, h1r, h1i, h2r, h2i, wr, wi, wpr, wpi, temp, theta ;
    float xr, xi ;
    long i, i1, i2, i3, i4, N2p1 ;

    theta = M_PI/N ;
    wr = 1. ;
    wi = 0. ;
    c1 = 0.5 ;

    if( forward )
    {
        c2 = -0.5 ;
        cfft( x, N, forward ) ;
        xr = x[0] ;
        xi = x[1] ;
    }
    else
    {
        c2 = 0.5 ;
        theta = -theta ;
        xr = x[1] ;
        xi = 0. ;
        x[1] = 0. ;
    }
    
    wpr = (float) (-2.*pow( sin( 0.5*theta ), 2. )) ;
    wpi = (float) sin( theta ) ;
    N2p1 = (N<<1) + 1 ;
    
    for( i = 0 ; i <= N>>1 ; i++ )
    {
        i1 = i<<1 ;
        i2 = i1 + 1 ;
        i3 = N2p1 - i2 ;
        i4 = i3 + 1 ;
        if( i == 0 )
        {
            h1r =  c1*(x[i1] + xr ) ;
            h1i =  c1*(x[i2] - xi ) ;
            h2r = -c2*(x[i2] + xi ) ;
            h2i =  c2*(x[i1] - xr ) ;
            x[i1] =  h1r + wr*h2r - wi*h2i ;
            x[i2] =  h1i + wr*h2i + wi*h2r ;
            xr =  h1r - wr*h2r + wi*h2i ;
            xi = -h1i + wr*h2i + wi*h2r ;
        }
        else
        {
            h1r =  c1*(x[i1] + x[i3] ) ;
            h1i =  c1*(x[i2] - x[i4] ) ;
            h2r = -c2*(x[i2] + x[i4] ) ;
            h2i =  c2*(x[i1] - x[i3] ) ;
            x[i1] =  h1r + wr*h2r - wi*h2i ;
            x[i2] =  h1i + wr*h2i + wi*h2r ;
            x[i3] =  h1r - wr*h2r + wi*h2i ;
            x[i4] = -h1i + wr*h2i + wi*h2r ;
        }

        wr = (temp = wr)*wpr - wi*wpi + wr ;
        wi = wi*wpr + temp*wpi + wi ;
    }

    if( forward )
        x[1] = xr ;
    else
        cfft( x, N, forward ) ;
}




//-----------------------------------------------------------------------------
// name: cfft()
// desc: complex value fft
//
//   these routines from CARL software, spect.c
//   check out the CARL CMusic distribution for more software
//
//   cfft replaces float array x containing NC complex values (2*NC float 
//   values alternating real, imagininary, etc.) by its Fourier transform 
//   if forward is true, or by its inverse Fourier transform ifforward is 
//   false, using a recursive Fast Fourier transform method due to 
//   Danielson and Lanczos.
//
//   NC MUST be a power of 2.
//
//-----------------------------------------------------------------------------
void cfft( float * x, long NC, unsigned int forward )
{
    float wr, wi, wpr, wpi, theta, scale ;
    long mmax, ND, m, i, j, delta ;
    ND = NC<<1 ;
    bit_reverse( x, ND ) ;
    
    for( mmax = 2 ; mmax < ND ; mmax = delta )
    {
        delta = mmax<<1 ;
        theta = 2*M_PI/( forward? mmax : -mmax ) ;
        wpr = (float) (-2.*pow( sin( 0.5*theta ), 2. )) ;
        wpi = (float) sin( theta ) ;
        wr = 1. ;
        wi = 0. ;

        for( m = 0 ; m < mmax ; m += 2 )
        {
            register float rtemp, itemp ;
            for( i = m ; i < ND ; i += delta )
            {
                j = i + mmax ;
                rtemp = wr*x[j] - wi*x[j+1] ;
                itemp = wr*x[j+1] + wi*x[j] ;
                x[j] = x[i] - rtemp ;
                x[j+1] = x[i+1] - itemp ;
                x[i] += rtemp ;
                x[i+1] += itemp ;
            }

            wr = (rtemp = wr)*wpr - wi*wpi + wr ;
            wi = wi*wpr + rtemp*wpi + wi ;
        }
    }

    // scale output
    scale = (float)(forward ? 1./ND : 2.) ;
    {
        register float *xi=x, *xe=x+ND ;
        while( xi < xe )
            *xi++ *= scale ;
    }
}




//-----------------------------------------------------------------------------
// name: bit_reverse()
// desc: bitreverse places float array x containing N/2 complex values
//       into bit-reversed order
//-----------------------------------------------------------------------------
void bit_reverse( float * x, long N )
{
    float rtemp, itemp ;
    long i, j, m ;
    for( i = j = 0 ; i < N ; i += 2, j += m )
    {
        if( j > i )
        {
            rtemp = x[j] ; itemp = x[j+1] ; /* complex exchange */
            x[j] = x[i] ; x[j+1] = x[i+1] ;
            x[i] = rtemp ; x[i+1] = itemp ;
        }

        for( m = N>>1 ; m >= 2 && j >= m ; m >>= 1 )
            j -= m ;
    }
}

//-----------------------------------------------------------------------------
// name: fftshift()
// desc: Moves half of the array to the other half, such that the first position 
//      becomes the one in the middle.
//-----------------------------------------------------------------------------
void fftshift( float * x, long N ) {
    float tmp;
    long i, j;
    for ( i = 0; i < N; i++ ) {
        j = (i + N/2) % N;
        tmp = x[i];
        x[i] = x[j];
        x[j] = tmp;
    }
}

//-----------------------------------------------------------------------------
// name: princarg()
// desc: Puts arbitrary phase value into (-pi, pi] (rad)
//-----------------------------------------------------------------------------
float princarg( float x ) {
    return fmod( x + M_PI, -2 * M_PI ) + M_PI;
}
