/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Biquad swig_types[0]
#define SWIGTYPE_p_BiquadModified swig_types[1]
#define SWIGTYPE_p_BrownNoise swig_types[2]
#define SWIGTYPE_p_BrowningFilter swig_types[3]
#define SWIGTYPE_p_FO_APF swig_types[4]
#define SWIGTYPE_p_FO_HPF swig_types[5]
#define SWIGTYPE_p_FO_LPF swig_types[6]
#define SWIGTYPE_p_FO_SHELVING_HIGH swig_types[7]
#define SWIGTYPE_p_FO_SHELVING_LOW swig_types[8]
#define SWIGTYPE_p_LadderFilterBase swig_types[9]
#define SWIGTYPE_p_NoiseGenerator swig_types[10]
#define SWIGTYPE_p_PinkNoise swig_types[11]
#define SWIGTYPE_p_PinkingFilter swig_types[12]
#define SWIGTYPE_p_PolyBLEP swig_types[13]
#define SWIGTYPE_p_RBJFilter swig_types[14]
#define SWIGTYPE_p_RingBuffer swig_types[15]
#define SWIGTYPE_p_SO_APF swig_types[16]
#define SWIGTYPE_p_SO_BPF swig_types[17]
#define SWIGTYPE_p_SO_BSF swig_types[18]
#define SWIGTYPE_p_SO_BUTTERWORTH_BPF swig_types[19]
#define SWIGTYPE_p_SO_BUTTERWORTH_HPF swig_types[20]
#define SWIGTYPE_p_SO_BUTTERWORTH_LPF swig_types[21]
#define SWIGTYPE_p_SO_HPF swig_types[22]
#define SWIGTYPE_p_SO_LINKWITZ_RILEY_HPF swig_types[23]
#define SWIGTYPE_p_SO_LINKWITZ_RILEY_LPF swig_types[24]
#define SWIGTYPE_p_SO_LPF swig_types[25]
#define SWIGTYPE_p_SO_PARAMETRIC_CQ_BOOST swig_types[26]
#define SWIGTYPE_p_SO_PARAMETRIC_CQ_CUT swig_types[27]
#define SWIGTYPE_p_SO_PARAMETRIC_NCQ swig_types[28]
#define SWIGTYPE_p_Sample swig_types[29]
#define SWIGTYPE_p_SndFileReaderDouble swig_types[30]
#define SWIGTYPE_p_SndFileReaderFloat swig_types[31]
#define SWIGTYPE_p_SndFileReaderInt swig_types[32]
#define SWIGTYPE_p_SndFileReaderShort swig_types[33]
#define SWIGTYPE_p_SndFileWriterDouble swig_types[34]
#define SWIGTYPE_p_SndFileWriterFloat swig_types[35]
#define SWIGTYPE_p_SndFileWriterInt swig_types[36]
#define SWIGTYPE_p_SndFileWriterShort swig_types[37]
#define SWIGTYPE_p_SoundWave__ADSR swig_types[38]
#define SWIGTYPE_p_SoundWave__BandlimitedOscillator swig_types[39]
#define SWIGTYPE_p_SoundWave__BrownNoiseGenerator swig_types[40]
#define SWIGTYPE_p_SoundWave__CRingBuffer swig_types[41]
#define SWIGTYPE_p_SoundWave__Filter swig_types[42]
#define SWIGTYPE_p_SoundWave__GammaEnv swig_types[43]
#define SWIGTYPE_p_SoundWave__GaussianWhiteNoise swig_types[44]
#define SWIGTYPE_p_SoundWave__ModifiedVelvetNoise swig_types[45]
#define SWIGTYPE_p_SoundWave__MoogLadderFilter swig_types[46]
#define SWIGTYPE_p_SoundWave__NoiseFilter swig_types[47]
#define SWIGTYPE_p_SoundWave__NoiseSamples swig_types[48]
#define SWIGTYPE_p_SoundWave__ParametricEnvelope swig_types[49]
#define SWIGTYPE_p_SoundWave__PinkNoiseGenerator swig_types[50]
#define SWIGTYPE_p_SoundWave__RBJAllPassFilter swig_types[51]
#define SWIGTYPE_p_SoundWave__RBJBandPassFilter swig_types[52]
#define SWIGTYPE_p_SoundWave__RBJHighPassFilter swig_types[53]
#define SWIGTYPE_p_SoundWave__RBJHighShelfFilter swig_types[54]
#define SWIGTYPE_p_SoundWave__RBJLowPassFilter swig_types[55]
#define SWIGTYPE_p_SoundWave__RBJLowShelfFilter swig_types[56]
#define SWIGTYPE_p_SoundWave__RBJNotchFilter swig_types[57]
#define SWIGTYPE_p_SoundWave__RBJPeakFilter swig_types[58]
#define SWIGTYPE_p_SoundWave__WaveTableOsc swig_types[59]
#define SWIGTYPE_p_SoundWave__parameter_struct swig_types[60]
#define SWIGTYPE_p_SoundWave__waveTable swig_types[61]
#define SWIGTYPE_p_Std__StdVectorT_float_t swig_types[62]
#define SWIGTYPE_p_WhiteNoise swig_types[63]
#define SWIGTYPE_p_WhiteNoiseSource swig_types[64]
#define SWIGTYPE_p_audiofft__AudioFFT swig_types[65]
#define SWIGTYPE_p_double swig_types[66]
#define SWIGTYPE_p_fenv_t swig_types[67]
#define SWIGTYPE_p_fexcept_t swig_types[68]
#define SWIGTYPE_p_fftconvolver__FFTConvolver swig_types[69]
#define SWIGTYPE_p_float swig_types[70]
#define SWIGTYPE_p_int swig_types[71]
#define SWIGTYPE_p_long swig_types[72]
#define SWIGTYPE_p_long_long swig_types[73]
#define SWIGTYPE_p_short swig_types[74]
#define SWIGTYPE_p_signed_char swig_types[75]
#define SWIGTYPE_p_std__complexT_double_t swig_types[76]
#define SWIGTYPE_p_std__complexT_float_t swig_types[77]
#define SWIGTYPE_p_std__mt19937 swig_types[78]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[79]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[80]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[81]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[82]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[83]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[84]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[85]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[86]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[87]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[88]
#define SWIGTYPE_p_std__string swig_types[89]
#define SWIGTYPE_p_std__uniform_real_distributionT_float_t swig_types[90]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[91]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[93]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[94]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[95]
#define SWIGTYPE_p_tp_coeffs swig_types[96]
#define SWIGTYPE_p_unsigned_char swig_types[97]
#define SWIGTYPE_p_unsigned_int swig_types[98]
#define SWIGTYPE_p_unsigned_long swig_types[99]
#define SWIGTYPE_p_unsigned_long_long swig_types[100]
#define SWIGTYPE_p_unsigned_short swig_types[101]
static swig_type_info *swig_types[103];
static swig_module_info swig_module = {swig_types, 102, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "soundwave"
#define SWIG_init      luaopen_soundwave
#define SWIG_init_user luaopen_soundwave_user

#define SWIG_LUACODE   luaopen_soundwave_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <vector>
#include "kissfft.h"
//#include "FaustFilters.h"
//#include "StateVariableFilter.hpp"
#include "HybridCurtisVCF.h"
#include "Moog.h"
#include "Envelope.h"
#include "SndFile.hpp"
#include "Resampler.h"
#include "NoiseGenerator.h"
#include "Noise.h"
#include "BandLimitedOscillator.h"
#include "WaveTable.h"
#include "AudioFFT.h"
#include "FFTConvolver.h"
#include "TwoStageFFTConvolver.h"
#include "fo_apf.h"
#include "fo_lpf.h"
#include "fo_hpf.h"
#include "fo_shelving_high.h"
#include "fo_shelving_low.h"
#include "so_apf.h"
#include "so_bpf.h"
#include "so_bsf.h"
#include "so_lpf.h"
#include "so_hpf.h"
#include "so_butterworth_bpf.h"
#include "so_butterworth_bsf.h"
#include "so_butterworth_hpf.h"
#include "so_butterworth_lpf.h"
#include "so_linkwitz_riley_hpf.h"
#include "so_linkwitz_riley_lpf.h"
#include "so_parametric_cq_boost.h"
#include "so_parametric_cq_cut.h"
#include "so_parametric_ncq.h"

using namespace SoundWave;
using namespace audiofft;
using namespace fftconvolver;
using namespace FFT;


#include <stdint.h>		// Use the C99 official header


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <string>
#include <algorithm>
#include <iostream>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN char std_string___getitem____SWIG(std::string *self,size_t i){ return (*self)[i]; }
SWIGINTERN void std_string___setitem____SWIG(std::string *self,size_t i,char c){ (*self)[i] = c; }
SWIGINTERN char const *std_string___str____SWIG(std::string *self){ return self->c_str(); }
SWIGINTERN int32_t std_string_to_int32__SWIG_0(std::string *self,int base=10){ return std::stoi(self->c_str(),nullptr,base); }
SWIGINTERN int64_t std_string_to_int64__SWIG_0(std::string *self,int base=10){ return std::stoll(self->c_str(),nullptr,base); }
SWIGINTERN float std_string_to_float__SWIG(std::string *self){ return std::stof(*self); }
SWIGINTERN double std_string_to_double__SWIG(std::string *self){ return std::stod(*self); }
SWIGINTERN void std_string_reverse__SWIG(std::string *self){ std::reverse(self->begin(),self->end()); }
SWIGINTERN void std_string_sort__SWIG(std::string *self){ std::sort(self->begin(),self->end()); }
SWIGINTERN void std_string_shuffle__SWIG(std::string *self){ std::random_shuffle(self->begin(),self->end()); }
SWIGINTERN void std_string_getline__SWIG(std::string *self){
                std::getline(std::cin, *self);
            }
SWIGINTERN void std_string_fill__SWIG(std::string *self,size_t i,char c){
                self->resize(i);
                for(size_t n = 0; n < i; n++) (*self)[i] = c;
            }

#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }

#include <limits>



    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
    
    
    
    
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    


#include <string.h>

SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__ibegin__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__iend__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string::string",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::string *)new std::string((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n"
    "    std::string::string(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("std::string::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__getitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___getitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)std_string___getitem____SWIG(arg1,arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__setitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__setitem__",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::__setitem__",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___setitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___tostring(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__str__",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___tostring",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)std_string___str____SWIG(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int32_t)std_string_to_int32__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  result = (int32_t)std_string_to_int32__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int32(int)\n"
    "    std::string::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int64_t)std_string_to_int64__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  result = (int64_t)std_string_to_int64__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int64(int)\n"
    "    std::string::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_float(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  float result;
  
  SWIG_check_num_args("std::string::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_float",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_float",1,SWIGTYPE_p_std__string);
  }
  
  result = (float)std_string_to_float__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_double(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  double result;
  
  SWIG_check_num_args("std::string::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_double",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_double",1,SWIGTYPE_p_std__string);
  }
  
  result = (double)std_string_to_double__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_reverse(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::reverse",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_reverse",1,SWIGTYPE_p_std__string);
  }
  
  std_string_reverse__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_sort(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::sort",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_sort",1,SWIGTYPE_p_std__string);
  }
  
  std_string_sort__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::shuffle",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_shuffle",1,SWIGTYPE_p_std__string);
  }
  
  std_string_shuffle__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_getline(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::getline",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_getline",1,SWIGTYPE_p_std__string);
  }
  
  std_string_getline__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_fill(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::fill",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_fill",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string_fill__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = ((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::clear",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_clear",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::string::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::erase(size_t,size_t)\n"
    "    std::string::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_string_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::push_back",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_push_back",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::pop_back",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_pop_back",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_replace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  std::string result;
  
  SWIG_check_num_args("std::string::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::replace",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::replace",3,"size_t");
  if(!lua_isstring(L,4)) SWIG_fail_arg("std::string::replace",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_replace",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::resize",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_resize",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_substr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("std::string::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::substr",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_substr",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::find(std::string const &,size_t)\n"
    "    std::string::find(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->rfind((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::rfind(std::string const &,size_t)\n"
    "    std::string::rfind(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_compare(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("std::string::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::compare",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::compare",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_compare",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->compare((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    { "to_int32", _wrap_string_to_int32},
    { "to_int64", _wrap_string_to_int64},
    { "to_float", _wrap_string_to_float},
    { "to_double", _wrap_string_to_double},
    { "reverse", _wrap_string_reverse},
    { "sort", _wrap_string_sort},
    { "shuffle", _wrap_string_shuffle},
    { "getline", _wrap_string_getline},
    { "fill", _wrap_string_fill},
    { "data", _wrap_string_data},
    { "size", _wrap_string_size},
    { "empty", _wrap_string_empty},
    { "clear", _wrap_string_clear},
    { "erase", _wrap_string_erase},
    { "push_back", _wrap_string_push_back},
    { "pop_back", _wrap_string_pop_back},
    { "replace", _wrap_string_replace},
    { "resize", _wrap_string_resize},
    { "substr", _wrap_string_substr},
    { "find", _wrap_string_find},
    { "rfind", _wrap_string_rfind},
    { "compare", _wrap_string_compare},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioFFT(lua_State* L) {
  int SWIG_arg = 0;
  audiofft::AudioFFT *result = 0 ;
  
  SWIG_check_num_args("audiofft::AudioFFT::AudioFFT",0,0)
  result = (audiofft::AudioFFT *)new audiofft::AudioFFT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_audiofft__AudioFFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFFT_init(lua_State* L) {
  int SWIG_arg = 0;
  audiofft::AudioFFT *arg1 = (audiofft::AudioFFT *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("audiofft::AudioFFT::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("audiofft::AudioFFT::init",1,"audiofft::AudioFFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("audiofft::AudioFFT::init",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_audiofft__AudioFFT,0))){
    SWIG_fail_ptr("AudioFFT_init",1,SWIGTYPE_p_audiofft__AudioFFT);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFFT_fft(lua_State* L) {
  int SWIG_arg = 0;
  audiofft::AudioFFT *arg1 = (audiofft::AudioFFT *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("audiofft::AudioFFT::fft",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("audiofft::AudioFFT::fft",1,"audiofft::AudioFFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("audiofft::AudioFFT::fft",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("audiofft::AudioFFT::fft",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("audiofft::AudioFFT::fft",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_audiofft__AudioFFT,0))){
    SWIG_fail_ptr("AudioFFT_fft",1,SWIGTYPE_p_audiofft__AudioFFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AudioFFT_fft",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AudioFFT_fft",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AudioFFT_fft",4,SWIGTYPE_p_float);
  }
  
  (arg1)->fft((float const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFFT_ifft(lua_State* L) {
  int SWIG_arg = 0;
  audiofft::AudioFFT *arg1 = (audiofft::AudioFFT *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("audiofft::AudioFFT::ifft",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("audiofft::AudioFFT::ifft",1,"audiofft::AudioFFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("audiofft::AudioFFT::ifft",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("audiofft::AudioFFT::ifft",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("audiofft::AudioFFT::ifft",4,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_audiofft__AudioFFT,0))){
    SWIG_fail_ptr("AudioFFT_ifft",1,SWIGTYPE_p_audiofft__AudioFFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AudioFFT_ifft",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AudioFFT_ifft",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AudioFFT_ifft",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ifft(arg2,(float const *)arg3,(float const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFFT_ComplexSize(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t result;
  
  SWIG_check_num_args("audiofft::AudioFFT::ComplexSize",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("audiofft::AudioFFT::ComplexSize",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = audiofft::AudioFFT::ComplexSize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioFFT(void *obj) {
audiofft::AudioFFT *arg1 = (audiofft::AudioFFT *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioFFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioFFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioFFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioFFT_methods[]= {
    { "init", _wrap_AudioFFT_init},
    { "fft", _wrap_AudioFFT_fft},
    { "ifft", _wrap_AudioFFT_ifft},
    {0,0}
};
static swig_lua_method swig_AudioFFT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioFFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioFFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioFFT_Sf_SwigStatic_methods[]= {
    { "ComplexSize", _wrap_AudioFFT_ComplexSize},
    {0,0}
};
static swig_lua_class* swig_AudioFFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioFFT_Sf_SwigStatic = {
    "AudioFFT",
    swig_AudioFFT_Sf_SwigStatic_methods,
    swig_AudioFFT_Sf_SwigStatic_attributes,
    swig_AudioFFT_Sf_SwigStatic_constants,
    swig_AudioFFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioFFT_bases[] = {0};
static const char *swig_AudioFFT_base_names[] = {0};
static swig_lua_class _wrap_class_AudioFFT = { "AudioFFT", "AudioFFT", &SWIGTYPE_p_audiofft__AudioFFT,_proxy__wrap_new_AudioFFT, swig_delete_AudioFFT, swig_AudioFFT_methods, swig_AudioFFT_attributes, &swig_AudioFFT_Sf_SwigStatic, swig_AudioFFT_meta, swig_AudioFFT_bases, swig_AudioFFT_base_names };

static int _wrap_new_FFTConvolver(lua_State* L) {
  int SWIG_arg = 0;
  fftconvolver::FFTConvolver *result = 0 ;
  
  SWIG_check_num_args("fftconvolver::FFTConvolver::FFTConvolver",0,0)
  result = (fftconvolver::FFTConvolver *)new fftconvolver::FFTConvolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftconvolver__FFTConvolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolver_init(lua_State* L) {
  int SWIG_arg = 0;
  fftconvolver::FFTConvolver *arg1 = (fftconvolver::FFTConvolver *) 0 ;
  size_t arg2 ;
  Sample *arg3 = (Sample *) 0 ;
  size_t arg4 ;
  bool result;
  
  SWIG_check_num_args("fftconvolver::FFTConvolver::init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fftconvolver::FFTConvolver::init",1,"fftconvolver::FFTConvolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fftconvolver::FFTConvolver::init",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("fftconvolver::FFTConvolver::init",3,"Sample const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fftconvolver::FFTConvolver::init",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fftconvolver__FFTConvolver,0))){
    SWIG_fail_ptr("FFTConvolver_init",1,SWIGTYPE_p_fftconvolver__FFTConvolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Sample,0))){
    SWIG_fail_ptr("FFTConvolver_init",3,SWIGTYPE_p_Sample);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (bool)(arg1)->init(arg2,(Sample const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolver_process(lua_State* L) {
  int SWIG_arg = 0;
  fftconvolver::FFTConvolver *arg1 = (fftconvolver::FFTConvolver *) 0 ;
  Sample *arg2 = (Sample *) 0 ;
  Sample *arg3 = (Sample *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("fftconvolver::FFTConvolver::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fftconvolver::FFTConvolver::process",1,"fftconvolver::FFTConvolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("fftconvolver::FFTConvolver::process",2,"Sample const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("fftconvolver::FFTConvolver::process",3,"Sample *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fftconvolver::FFTConvolver::process",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fftconvolver__FFTConvolver,0))){
    SWIG_fail_ptr("FFTConvolver_process",1,SWIGTYPE_p_fftconvolver__FFTConvolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Sample,0))){
    SWIG_fail_ptr("FFTConvolver_process",2,SWIGTYPE_p_Sample);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Sample,0))){
    SWIG_fail_ptr("FFTConvolver_process",3,SWIGTYPE_p_Sample);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->process((Sample const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolver_reset(lua_State* L) {
  int SWIG_arg = 0;
  fftconvolver::FFTConvolver *arg1 = (fftconvolver::FFTConvolver *) 0 ;
  
  SWIG_check_num_args("fftconvolver::FFTConvolver::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fftconvolver::FFTConvolver::reset",1,"fftconvolver::FFTConvolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fftconvolver__FFTConvolver,0))){
    SWIG_fail_ptr("FFTConvolver_reset",1,SWIGTYPE_p_fftconvolver__FFTConvolver);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTConvolver(void *obj) {
fftconvolver::FFTConvolver *arg1 = (fftconvolver::FFTConvolver *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTConvolver(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTConvolver);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTConvolver_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FFTConvolver_methods[]= {
    { "init", _wrap_FFTConvolver_init},
    { "process", _wrap_FFTConvolver_process},
    { "reset", _wrap_FFTConvolver_reset},
    {0,0}
};
static swig_lua_method swig_FFTConvolver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTConvolver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTConvolver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTConvolver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTConvolver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTConvolver_Sf_SwigStatic = {
    "FFTConvolver",
    swig_FFTConvolver_Sf_SwigStatic_methods,
    swig_FFTConvolver_Sf_SwigStatic_attributes,
    swig_FFTConvolver_Sf_SwigStatic_constants,
    swig_FFTConvolver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTConvolver_bases[] = {0};
static const char *swig_FFTConvolver_base_names[] = {0};
static swig_lua_class _wrap_class_FFTConvolver = { "FFTConvolver", "FFTConvolver", &SWIGTYPE_p_fftconvolver__FFTConvolver,_proxy__wrap_new_FFTConvolver, swig_delete_FFTConvolver, swig_FFTConvolver_methods, swig_FFTConvolver_attributes, &swig_FFTConvolver_Sf_SwigStatic, swig_FFTConvolver_meta, swig_FFTConvolver_bases, swig_FFTConvolver_base_names };

static int _wrap_new_ADSR__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::ADSR *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::ADSR",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ADSR::ADSR",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::ADSR",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::ADSR *)new SoundWave::ADSR(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ADSR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADSR__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::ADSR *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::ADSR",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ADSR::ADSR",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::ADSR *)new SoundWave::ADSR(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ADSR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADSR__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::ADSR",0,0)
  result = (SoundWave::ADSR *)new SoundWave::ADSR();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ADSR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADSR__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  SoundWave::ADSR *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::ADSR",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ADSR::ADSR",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::ADSR",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::ADSR::ADSR",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::ADSR::ADSR",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::ADSR::ADSR",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SoundWave::ADSR::ADSR",6,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (SoundWave::ADSR *)new SoundWave::ADSR(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ADSR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADSR__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  SoundWave::ADSR *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::ADSR",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ADSR::ADSR",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::ADSR",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::ADSR::ADSR",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::ADSR::ADSR",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::ADSR::ADSR",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (SoundWave::ADSR *)new SoundWave::ADSR(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ADSR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADSR__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SoundWave::ADSR *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::ADSR",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ADSR::ADSR",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::ADSR",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::ADSR::ADSR",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::ADSR::ADSR",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (SoundWave::ADSR *)new SoundWave::ADSR(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ADSR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADSR(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ADSR__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ADSR__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ADSR__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ADSR__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ADSR__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ADSR__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ADSR'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ADSR::ADSR(float,float)\n"
    "    SoundWave::ADSR::ADSR(float)\n"
    "    SoundWave::ADSR::ADSR()\n"
    "    SoundWave::ADSR::ADSR(float,float,float,float,float,float)\n"
    "    SoundWave::ADSR::ADSR(float,float,float,float,float)\n"
    "    SoundWave::ADSR::ADSR(float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ADSR_process(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::ADSR::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::process",1,"SoundWave::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_process",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  result = (float)(arg1)->process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_getOutput(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::ADSR::getOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::getOutput",1,"SoundWave::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_getOutput",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  result = (float)(arg1)->getOutput();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_getState(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::ADSR::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::getState",1,"SoundWave::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_getState",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  result = (int)(arg1)->getState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_gate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::gate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::gate",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::gate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_gate",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->gate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setAllTimes(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setAllTimes",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setAllTimes",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setAllTimes",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::ADSR::setAllTimes",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::ADSR::setAllTimes",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::ADSR::setAllTimes",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setAllTimes",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setAllTimes(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setAttackTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setAttackTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setAttackTime",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setAttackTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setAttackTime",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAttackTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setDecayTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setDecayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setDecayTime",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setDecayTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setDecayTime",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDecayTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setReleaseTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setReleaseTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setReleaseTime",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setReleaseTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setReleaseTime",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setReleaseTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setAttackRate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setAttackRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setAttackRate",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setAttackRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setAttackRate",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAttackRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setDecayRate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setDecayRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setDecayRate",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setDecayRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setDecayRate",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDecayRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setReleaseRate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setReleaseRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setReleaseRate",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setReleaseRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setReleaseRate",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setReleaseRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setSustainLevel(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setSustainLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setSustainLevel",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setSustainLevel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setSustainLevel",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSustainLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setTargetRatioA(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setTargetRatioA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setTargetRatioA",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setTargetRatioA",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setTargetRatioA",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setTargetRatioA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setTargetRatioDR(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::ADSR::setTargetRatioDR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::setTargetRatioDR",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::setTargetRatioDR",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_setTargetRatioDR",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setTargetRatioDR(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_reset(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::reset",1,"SoundWave::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_reset",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::ADSR::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::Tick",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_Tick",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::ADSR::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::Tick",1,"SoundWave::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_Tick",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  result = (float)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ADSR, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ADSR_Tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ADSR, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ADSR_Tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ADSR_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ADSR::Tick(float)\n"
    "    SoundWave::ADSR::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_ADSR_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::ADSR::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::Process",1,"SoundWave::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ADSR::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::ADSR::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::ADSR::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_Process",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ADSR_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ADSR_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ADSR *arg1 = (SoundWave::ADSR *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::ADSR::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ADSR::Process",1,"SoundWave::ADSR *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::ADSR::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::ADSR::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ADSR,0))){
    SWIG_fail_ptr("ADSR_Process",1,SWIGTYPE_p_SoundWave__ADSR);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ADSR_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ADSR, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ADSR_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ADSR, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ADSR_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ADSR_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ADSR::Process(size_t,float *,float *)\n"
    "    SoundWave::ADSR::Process(float *,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_ADSR(void *obj) {
SoundWave::ADSR *arg1 = (SoundWave::ADSR *) obj;
delete arg1;
}
static int _proxy__wrap_new_ADSR(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ADSR);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ADSR_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ADSR_methods[]= {
    { "process", _wrap_ADSR_process},
    { "getOutput", _wrap_ADSR_getOutput},
    { "getState", _wrap_ADSR_getState},
    { "gate", _wrap_ADSR_gate},
    { "setAllTimes", _wrap_ADSR_setAllTimes},
    { "setAttackTime", _wrap_ADSR_setAttackTime},
    { "setDecayTime", _wrap_ADSR_setDecayTime},
    { "setReleaseTime", _wrap_ADSR_setReleaseTime},
    { "setAttackRate", _wrap_ADSR_setAttackRate},
    { "setDecayRate", _wrap_ADSR_setDecayRate},
    { "setReleaseRate", _wrap_ADSR_setReleaseRate},
    { "setSustainLevel", _wrap_ADSR_setSustainLevel},
    { "setTargetRatioA", _wrap_ADSR_setTargetRatioA},
    { "setTargetRatioDR", _wrap_ADSR_setTargetRatioDR},
    { "reset", _wrap_ADSR_reset},
    { "Tick", _wrap_ADSR_Tick},
    { "Process", _wrap_ADSR_Process},
    {0,0}
};
static swig_lua_method swig_ADSR_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ADSR_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ADSR_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("env_idle", SoundWave::ADSR::env_idle)},
    {SWIG_LUA_CONSTTAB_INT("env_attack", SoundWave::ADSR::env_attack)},
    {SWIG_LUA_CONSTTAB_INT("env_decay", SoundWave::ADSR::env_decay)},
    {SWIG_LUA_CONSTTAB_INT("env_sustain", SoundWave::ADSR::env_sustain)},
    {SWIG_LUA_CONSTTAB_INT("env_release", SoundWave::ADSR::env_release)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ADSR_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ADSR_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ADSR_Sf_SwigStatic = {
    "ADSR",
    swig_ADSR_Sf_SwigStatic_methods,
    swig_ADSR_Sf_SwigStatic_attributes,
    swig_ADSR_Sf_SwigStatic_constants,
    swig_ADSR_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ADSR_bases[] = {0};
static const char *swig_ADSR_base_names[] = {0};
static swig_lua_class _wrap_class_ADSR = { "ADSR", "ADSR", &SWIGTYPE_p_SoundWave__ADSR,_proxy__wrap_new_ADSR, swig_delete_ADSR, swig_ADSR_methods, swig_ADSR_attributes, &swig_ADSR_Sf_SwigStatic, swig_ADSR_meta, swig_ADSR_bases, swig_ADSR_base_names };

static int _wrap_parameter_struct_attackTime_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::attackTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::attackTime",1,"SoundWave::parameter_struct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::parameter_struct::attackTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_attackTime_set",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->attackTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_attackTime_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::parameter_struct::attackTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::attackTime",1,"SoundWave::parameter_struct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_attackTime_get",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  result = (double) ((arg1)->attackTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_attackSlope_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::attackSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::attackSlope",1,"SoundWave::parameter_struct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::parameter_struct::attackSlope",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_attackSlope_set",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->attackSlope = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_attackSlope_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::parameter_struct::attackSlope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::attackSlope",1,"SoundWave::parameter_struct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_attackSlope_get",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  result = (double) ((arg1)->attackSlope);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_decayTime_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::decayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::decayTime",1,"SoundWave::parameter_struct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::parameter_struct::decayTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_decayTime_set",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decayTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_decayTime_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::parameter_struct::decayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::decayTime",1,"SoundWave::parameter_struct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_decayTime_get",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  result = (double) ((arg1)->decayTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_decaySlope_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::decaySlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::decaySlope",1,"SoundWave::parameter_struct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::parameter_struct::decaySlope",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_decaySlope_set",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decaySlope = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_decaySlope_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::parameter_struct::decaySlope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::decaySlope",1,"SoundWave::parameter_struct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_decaySlope_get",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  result = (double) ((arg1)->decaySlope);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_sustainLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::sustainLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::sustainLevel",1,"SoundWave::parameter_struct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::parameter_struct::sustainLevel",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_sustainLevel_set",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->sustainLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_sustainLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::parameter_struct::sustainLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::sustainLevel",1,"SoundWave::parameter_struct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_sustainLevel_get",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  result = (double) ((arg1)->sustainLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_releaseTime_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::releaseTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::releaseTime",1,"SoundWave::parameter_struct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::parameter_struct::releaseTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_releaseTime_set",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->releaseTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_releaseTime_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::parameter_struct::releaseTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::releaseTime",1,"SoundWave::parameter_struct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_releaseTime_get",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  result = (double) ((arg1)->releaseTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_releaseSlope_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::releaseSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::releaseSlope",1,"SoundWave::parameter_struct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::parameter_struct::releaseSlope",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_releaseSlope_set",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->releaseSlope = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parameter_struct_releaseSlope_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::parameter_struct::releaseSlope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::parameter_struct::releaseSlope",1,"SoundWave::parameter_struct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__parameter_struct,0))){
    SWIG_fail_ptr("parameter_struct_releaseSlope_get",1,SWIGTYPE_p_SoundWave__parameter_struct);
  }
  
  result = (double) ((arg1)->releaseSlope);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_parameter_struct(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::parameter_struct *result = 0 ;
  
  SWIG_check_num_args("SoundWave::parameter_struct::parameter_struct",0,0)
  result = (SoundWave::parameter_struct *)new SoundWave::parameter_struct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__parameter_struct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_parameter_struct(void *obj) {
SoundWave::parameter_struct *arg1 = (SoundWave::parameter_struct *) obj;
delete arg1;
}
static int _proxy__wrap_new_parameter_struct(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_parameter_struct);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_parameter_struct_attributes[] = {
    { "attackTime", _wrap_parameter_struct_attackTime_get, _wrap_parameter_struct_attackTime_set },
    { "attackSlope", _wrap_parameter_struct_attackSlope_get, _wrap_parameter_struct_attackSlope_set },
    { "decayTime", _wrap_parameter_struct_decayTime_get, _wrap_parameter_struct_decayTime_set },
    { "decaySlope", _wrap_parameter_struct_decaySlope_get, _wrap_parameter_struct_decaySlope_set },
    { "sustainLevel", _wrap_parameter_struct_sustainLevel_get, _wrap_parameter_struct_sustainLevel_set },
    { "releaseTime", _wrap_parameter_struct_releaseTime_get, _wrap_parameter_struct_releaseTime_set },
    { "releaseSlope", _wrap_parameter_struct_releaseSlope_get, _wrap_parameter_struct_releaseSlope_set },
    {0,0,0}
};
static swig_lua_method swig_parameter_struct_methods[]= {
    {0,0}
};
static swig_lua_method swig_parameter_struct_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_parameter_struct_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_parameter_struct_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_parameter_struct_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_parameter_struct_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_parameter_struct_Sf_SwigStatic = {
    "parameter_struct",
    swig_parameter_struct_Sf_SwigStatic_methods,
    swig_parameter_struct_Sf_SwigStatic_attributes,
    swig_parameter_struct_Sf_SwigStatic_constants,
    swig_parameter_struct_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_parameter_struct_bases[] = {0};
static const char *swig_parameter_struct_base_names[] = {0};
static swig_lua_class _wrap_class_parameter_struct = { "parameter_struct", "parameter_struct", &SWIGTYPE_p_SoundWave__parameter_struct,_proxy__wrap_new_parameter_struct, swig_delete_parameter_struct, swig_parameter_struct_methods, swig_parameter_struct_attributes, &swig_parameter_struct_Sf_SwigStatic, swig_parameter_struct_meta, swig_parameter_struct_bases, swig_parameter_struct_base_names };

static int _wrap_new_ParametricEnvelope__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  unsigned int arg2 ;
  SoundWave::ParametricEnvelope *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::ParametricEnvelope",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::ParametricEnvelope",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::ParametricEnvelope",2,"unsigned int");
  arg1 = (double)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (SoundWave::ParametricEnvelope *)new SoundWave::ParametricEnvelope(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ParametricEnvelope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametricEnvelope__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  SoundWave::ParametricEnvelope *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::ParametricEnvelope",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::ParametricEnvelope",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (SoundWave::ParametricEnvelope *)new SoundWave::ParametricEnvelope(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ParametricEnvelope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametricEnvelope__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::ParametricEnvelope",0,0)
  result = (SoundWave::ParametricEnvelope *)new SoundWave::ParametricEnvelope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ParametricEnvelope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametricEnvelope(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParametricEnvelope__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ParametricEnvelope__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ParametricEnvelope__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametricEnvelope'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ParametricEnvelope::ParametricEnvelope(double,unsigned int)\n"
    "    SoundWave::ParametricEnvelope::ParametricEnvelope(double)\n"
    "    SoundWave::ParametricEnvelope::ParametricEnvelope()\n");
  lua_error(L);return 0;
}


static int _wrap_ParametricEnvelope_setAttackTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::setAttackTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setAttackTime",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setAttackTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_setAttackTime",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setAttackTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_setAttackSlope(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::setAttackSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setAttackSlope",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setAttackSlope",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_setAttackSlope",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setAttackSlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_setDecayTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::setDecayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setDecayTime",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setDecayTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_setDecayTime",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setDecayTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_setDecaySlope(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::setDecaySlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setDecaySlope",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setDecaySlope",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_setDecaySlope",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setDecaySlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_setSustainLevel(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::setSustainLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setSustainLevel",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setSustainLevel",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_setSustainLevel",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setSustainLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_setReleaseTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::setReleaseTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setReleaseTime",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setReleaseTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_setReleaseTime",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setReleaseTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_setReleaseSlope(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::setReleaseSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setReleaseSlope",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::setReleaseSlope",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_setReleaseSlope",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setReleaseSlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_getCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::getCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::getCurrentTime",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_getCurrentTime",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  result = (double)(arg1)->getCurrentTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_onGateOn(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::onGateOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::onGateOn",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_onGateOn",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  (arg1)->onGateOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_onGateOff(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::onGateOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::onGateOff",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_onGateOff",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  (arg1)->onGateOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_step(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::step",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::step",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_step",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  result = (double)(arg1)->step();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_reset(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::reset",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_reset",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Tick",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_Tick",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  result = (float)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Tick",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_Tick",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ParametricEnvelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ParametricEnvelope_Tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ParametricEnvelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParametricEnvelope_Tick__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParametricEnvelope_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ParametricEnvelope::Tick()\n"
    "    SoundWave::ParametricEnvelope::Tick(float)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametricEnvelope_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Process",1,"SoundWave::ParametricEnvelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_Process",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ParametricEnvelope_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ParametricEnvelope_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Process",1,"SoundWave::ParametricEnvelope *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::ParametricEnvelope::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_Process",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ParametricEnvelope_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ParametricEnvelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParametricEnvelope_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ParametricEnvelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParametricEnvelope_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParametricEnvelope_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ParametricEnvelope::Process(size_t,float *,float *)\n"
    "    SoundWave::ParametricEnvelope::Process(float *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametricEnvelope_getState(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  SoundWave::state_enum result;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::getState",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_getState",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  result = (SoundWave::state_enum)(arg1)->getState();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricEnvelope_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) 0 ;
  SoundWave::parameter_struct result;
  
  SWIG_check_num_args("SoundWave::ParametricEnvelope::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ParametricEnvelope::getParameters",1,"SoundWave::ParametricEnvelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ParametricEnvelope,0))){
    SWIG_fail_ptr("ParametricEnvelope_getParameters",1,SWIGTYPE_p_SoundWave__ParametricEnvelope);
  }
  
  result = (arg1)->getParameters();
  {
    SoundWave::parameter_struct * resultptr = new SoundWave::parameter_struct((const SoundWave::parameter_struct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__parameter_struct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametricEnvelope(void *obj) {
SoundWave::ParametricEnvelope *arg1 = (SoundWave::ParametricEnvelope *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametricEnvelope(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametricEnvelope);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametricEnvelope_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametricEnvelope_methods[]= {
    { "setAttackTime", _wrap_ParametricEnvelope_setAttackTime},
    { "setAttackSlope", _wrap_ParametricEnvelope_setAttackSlope},
    { "setDecayTime", _wrap_ParametricEnvelope_setDecayTime},
    { "setDecaySlope", _wrap_ParametricEnvelope_setDecaySlope},
    { "setSustainLevel", _wrap_ParametricEnvelope_setSustainLevel},
    { "setReleaseTime", _wrap_ParametricEnvelope_setReleaseTime},
    { "setReleaseSlope", _wrap_ParametricEnvelope_setReleaseSlope},
    { "getCurrentTime", _wrap_ParametricEnvelope_getCurrentTime},
    { "onGateOn", _wrap_ParametricEnvelope_onGateOn},
    { "onGateOff", _wrap_ParametricEnvelope_onGateOff},
    { "step", _wrap_ParametricEnvelope_step},
    { "reset", _wrap_ParametricEnvelope_reset},
    { "Tick", _wrap_ParametricEnvelope_Tick},
    { "Process", _wrap_ParametricEnvelope_Process},
    { "getState", _wrap_ParametricEnvelope_getState},
    { "getParameters", _wrap_ParametricEnvelope_getParameters},
    {0,0}
};
static swig_lua_method swig_ParametricEnvelope_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametricEnvelope_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametricEnvelope_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametricEnvelope_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametricEnvelope_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametricEnvelope_Sf_SwigStatic = {
    "ParametricEnvelope",
    swig_ParametricEnvelope_Sf_SwigStatic_methods,
    swig_ParametricEnvelope_Sf_SwigStatic_attributes,
    swig_ParametricEnvelope_Sf_SwigStatic_constants,
    swig_ParametricEnvelope_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametricEnvelope_bases[] = {0};
static const char *swig_ParametricEnvelope_base_names[] = {0};
static swig_lua_class _wrap_class_ParametricEnvelope = { "ParametricEnvelope", "ParametricEnvelope", &SWIGTYPE_p_SoundWave__ParametricEnvelope,_proxy__wrap_new_ParametricEnvelope, swig_delete_ParametricEnvelope, swig_ParametricEnvelope_methods, swig_ParametricEnvelope_attributes, &swig_ParametricEnvelope_Sf_SwigStatic, swig_ParametricEnvelope_meta, swig_ParametricEnvelope_bases, swig_ParametricEnvelope_base_names };

static int _wrap_GammaEnv_Attack_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::Attack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::Attack",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::Attack",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_Attack_set",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->Attack = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_Attack_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::Attack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::Attack",1,"SoundWave::GammaEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_Attack_get",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  result = (double) ((arg1)->Attack);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_Release_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::Release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::Release",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::Release",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_Release_set",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->Release = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_Release_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::Release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::Release",1,"SoundWave::GammaEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_Release_get",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  result = (double) ((arg1)->Release);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_AttackDelay_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::AttackDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::AttackDelay",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::AttackDelay",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_AttackDelay_set",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->AttackDelay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_AttackDelay_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::AttackDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::AttackDelay",1,"SoundWave::GammaEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_AttackDelay_get",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  result = (double) ((arg1)->AttackDelay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_ReleaseDelay_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::ReleaseDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::ReleaseDelay",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::ReleaseDelay",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_ReleaseDelay_set",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ReleaseDelay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_ReleaseDelay_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::ReleaseDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::ReleaseDelay",1,"SoundWave::GammaEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_ReleaseDelay_get",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  result = (double) ((arg1)->ReleaseDelay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_IsInverse_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::IsInverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::IsInverse",1,"SoundWave::GammaEnv *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::IsInverse",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_IsInverse_set",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->IsInverse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_IsInverse_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::IsInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::IsInverse",1,"SoundWave::GammaEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_IsInverse_get",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  result = (bool) ((arg1)->IsInverse);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_init(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::init",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::init",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_init",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_clear(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::clear",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::clear",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_clear",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_process(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::process",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::process",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_process",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_Tick(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::Tick",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_Tick",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::Process",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::GammaEnv::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::GammaEnv::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_Process",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GammaEnv_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GammaEnv_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::Process",1,"SoundWave::GammaEnv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::GammaEnv::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_Process",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GammaEnv_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__GammaEnv, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GammaEnv_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__GammaEnv, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GammaEnv_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GammaEnv_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::GammaEnv::Process(size_t,float *,float *)\n"
    "    SoundWave::GammaEnv::Process(float *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_GammaEnv_processSymm(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::processSymm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::processSymm",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::processSymm",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_processSymm",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processSymm(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_TickS(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::GammaEnv::TickS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::TickS",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::TickS",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_TickS",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->TickS(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_ProcessS__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::ProcessS",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::ProcessS",1,"SoundWave::GammaEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::ProcessS",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::GammaEnv::ProcessS",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::GammaEnv::ProcessS",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_ProcessS",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GammaEnv_ProcessS",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GammaEnv_ProcessS",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessS(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_ProcessS__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::ProcessS",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GammaEnv::ProcessS",1,"SoundWave::GammaEnv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::GammaEnv::ProcessS",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::GammaEnv::ProcessS",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GammaEnv,0))){
    SWIG_fail_ptr("GammaEnv_ProcessS",1,SWIGTYPE_p_SoundWave__GammaEnv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GammaEnv_ProcessS",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ProcessS(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GammaEnv_ProcessS(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__GammaEnv, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GammaEnv_ProcessS__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__GammaEnv, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GammaEnv_ProcessS__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GammaEnv_ProcessS'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::GammaEnv::ProcessS(size_t,float *,float *)\n"
    "    SoundWave::GammaEnv::ProcessS(float *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_new_GammaEnv(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GammaEnv *result = 0 ;
  
  SWIG_check_num_args("SoundWave::GammaEnv::GammaEnv",0,0)
  result = (SoundWave::GammaEnv *)new SoundWave::GammaEnv();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__GammaEnv,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GammaEnv(void *obj) {
SoundWave::GammaEnv *arg1 = (SoundWave::GammaEnv *) obj;
delete arg1;
}
static int _proxy__wrap_new_GammaEnv(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GammaEnv);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GammaEnv_attributes[] = {
    { "Attack", _wrap_GammaEnv_Attack_get, _wrap_GammaEnv_Attack_set },
    { "Release", _wrap_GammaEnv_Release_get, _wrap_GammaEnv_Release_set },
    { "AttackDelay", _wrap_GammaEnv_AttackDelay_get, _wrap_GammaEnv_AttackDelay_set },
    { "ReleaseDelay", _wrap_GammaEnv_ReleaseDelay_get, _wrap_GammaEnv_ReleaseDelay_set },
    { "IsInverse", _wrap_GammaEnv_IsInverse_get, _wrap_GammaEnv_IsInverse_set },
    {0,0,0}
};
static swig_lua_method swig_GammaEnv_methods[]= {
    { "init", _wrap_GammaEnv_init},
    { "clear", _wrap_GammaEnv_clear},
    { "process", _wrap_GammaEnv_process},
    { "Tick", _wrap_GammaEnv_Tick},
    { "Process", _wrap_GammaEnv_Process},
    { "processSymm", _wrap_GammaEnv_processSymm},
    { "TickS", _wrap_GammaEnv_TickS},
    { "ProcessS", _wrap_GammaEnv_ProcessS},
    {0,0}
};
static swig_lua_method swig_GammaEnv_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GammaEnv_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GammaEnv_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GammaEnv_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GammaEnv_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GammaEnv_Sf_SwigStatic = {
    "GammaEnv",
    swig_GammaEnv_Sf_SwigStatic_methods,
    swig_GammaEnv_Sf_SwigStatic_attributes,
    swig_GammaEnv_Sf_SwigStatic_constants,
    swig_GammaEnv_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GammaEnv_bases[] = {0};
static const char *swig_GammaEnv_base_names[] = {0};
static swig_lua_class _wrap_class_GammaEnv = { "GammaEnv", "GammaEnv", &SWIGTYPE_p_SoundWave__GammaEnv,_proxy__wrap_new_GammaEnv, swig_delete_GammaEnv, swig_GammaEnv_methods, swig_GammaEnv_attributes, &swig_GammaEnv_Sf_SwigStatic, swig_GammaEnv_meta, swig_GammaEnv_bases, swig_GammaEnv_base_names };

static int _wrap_new_SndFileReaderFloat(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderFloat *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderFloat::SndFileReaderFloat",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderFloat::SndFileReaderFloat",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderFloat *)new SndFileReaderFloat((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::size",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_size",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int64_t)((SndFileReaderFloat const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::seek",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderFloat::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_seek",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::seek",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_seek",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderFloat_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderFloat_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderFloat::seek(int64_t,int)\n"
    "    SndFileReaderFloat::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderFloat_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderFloat::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::get_string",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_get_string",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::command",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderFloat::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderFloat::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_command",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderFloat_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::frames",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_frames",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int64_t)((SndFileReaderFloat const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::samplerate",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_samplerate",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::channels",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_channels",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::format",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_format",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::sections",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_sections",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::seekable",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_seekable",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderFloat::read",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderFloat::read",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",3,SWIGTYPE_p_float);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderFloat_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderFloat::read(size_t,std::vector< float > &)\n"
    "    SndFileReaderFloat::read(size_t,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderFloat_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read_frames",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderFloat::read_frames",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read_frames",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderFloat::read_frames",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",3,SWIGTYPE_p_float);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderFloat_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderFloat::read_frames(size_t,std::vector< float > &)\n"
    "    SndFileReaderFloat::read_frames(size_t,float *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderFloat(void *obj) {
SndFileReaderFloat *arg1 = (SndFileReaderFloat *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderFloat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderFloat_methods[]= {
    { "size", _wrap_SndFileReaderFloat_size},
    { "seek", _wrap_SndFileReaderFloat_seek},
    { "get_string", _wrap_SndFileReaderFloat_get_string},
    { "command", _wrap_SndFileReaderFloat_command},
    { "frames", _wrap_SndFileReaderFloat_frames},
    { "samplerate", _wrap_SndFileReaderFloat_samplerate},
    { "channels", _wrap_SndFileReaderFloat_channels},
    { "format", _wrap_SndFileReaderFloat_format},
    { "sections", _wrap_SndFileReaderFloat_sections},
    { "seekable", _wrap_SndFileReaderFloat_seekable},
    { "read", _wrap_SndFileReaderFloat_read},
    { "read_frames", _wrap_SndFileReaderFloat_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderFloat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderFloat_Sf_SwigStatic = {
    "SndFileReaderFloat",
    swig_SndFileReaderFloat_Sf_SwigStatic_methods,
    swig_SndFileReaderFloat_Sf_SwigStatic_attributes,
    swig_SndFileReaderFloat_Sf_SwigStatic_constants,
    swig_SndFileReaderFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderFloat_bases[] = {0};
static const char *swig_SndFileReaderFloat_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderFloat = { "SndFileReaderFloat", "SndFileReaderFloat", &SWIGTYPE_p_SndFileReaderFloat,_proxy__wrap_new_SndFileReaderFloat, swig_delete_SndFileReaderFloat, swig_SndFileReaderFloat_methods, swig_SndFileReaderFloat_attributes, &swig_SndFileReaderFloat_Sf_SwigStatic, swig_SndFileReaderFloat_meta, swig_SndFileReaderFloat_bases, swig_SndFileReaderFloat_base_names };

static int _wrap_new_SndFileReaderDouble(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderDouble *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderDouble::SndFileReaderDouble",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderDouble::SndFileReaderDouble",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderDouble *)new SndFileReaderDouble((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::size",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_size",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int64_t)((SndFileReaderDouble const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::seek",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderDouble::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_seek",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::seek",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_seek",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderDouble_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderDouble_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderDouble::seek(int64_t,int)\n"
    "    SndFileReaderDouble::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderDouble_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderDouble::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::get_string",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_get_string",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::command",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderDouble::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderDouble::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_command",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderDouble_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::frames",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_frames",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int64_t)((SndFileReaderDouble const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::samplerate",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_samplerate",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::channels",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_channels",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::format",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_format",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::sections",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_sections",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::seekable",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_seekable",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderDouble::read",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderDouble::read",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",3,SWIGTYPE_p_double);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderDouble_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderDouble::read(size_t,std::vector< double > &)\n"
    "    SndFileReaderDouble::read(size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderDouble_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read_frames",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderDouble::read_frames",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read_frames",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderDouble::read_frames",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",3,SWIGTYPE_p_double);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderDouble_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderDouble::read_frames(size_t,std::vector< double > &)\n"
    "    SndFileReaderDouble::read_frames(size_t,double *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderDouble(void *obj) {
SndFileReaderDouble *arg1 = (SndFileReaderDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderDouble_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderDouble_methods[]= {
    { "size", _wrap_SndFileReaderDouble_size},
    { "seek", _wrap_SndFileReaderDouble_seek},
    { "get_string", _wrap_SndFileReaderDouble_get_string},
    { "command", _wrap_SndFileReaderDouble_command},
    { "frames", _wrap_SndFileReaderDouble_frames},
    { "samplerate", _wrap_SndFileReaderDouble_samplerate},
    { "channels", _wrap_SndFileReaderDouble_channels},
    { "format", _wrap_SndFileReaderDouble_format},
    { "sections", _wrap_SndFileReaderDouble_sections},
    { "seekable", _wrap_SndFileReaderDouble_seekable},
    { "read", _wrap_SndFileReaderDouble_read},
    { "read_frames", _wrap_SndFileReaderDouble_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderDouble_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderDouble_Sf_SwigStatic = {
    "SndFileReaderDouble",
    swig_SndFileReaderDouble_Sf_SwigStatic_methods,
    swig_SndFileReaderDouble_Sf_SwigStatic_attributes,
    swig_SndFileReaderDouble_Sf_SwigStatic_constants,
    swig_SndFileReaderDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderDouble_bases[] = {0};
static const char *swig_SndFileReaderDouble_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderDouble = { "SndFileReaderDouble", "SndFileReaderDouble", &SWIGTYPE_p_SndFileReaderDouble,_proxy__wrap_new_SndFileReaderDouble, swig_delete_SndFileReaderDouble, swig_SndFileReaderDouble_methods, swig_SndFileReaderDouble_attributes, &swig_SndFileReaderDouble_Sf_SwigStatic, swig_SndFileReaderDouble_meta, swig_SndFileReaderDouble_bases, swig_SndFileReaderDouble_base_names };

static int _wrap_new_SndFileReaderInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderInt *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderInt::SndFileReaderInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderInt::SndFileReaderInt",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderInt *)new SndFileReaderInt((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::size",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_size",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int64_t)((SndFileReaderInt const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::seek",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderInt::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_seek",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::seek",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_seek",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderInt_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderInt_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderInt_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderInt::seek(int64_t,int)\n"
    "    SndFileReaderInt::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderInt_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderInt::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::get_string",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_get_string",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::command",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderInt::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderInt::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_command",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderInt_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::frames",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_frames",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int64_t)((SndFileReaderInt const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::samplerate",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_samplerate",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::channels",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_channels",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::format",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_format",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::sections",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_sections",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::seekable",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_seekable",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  std::vector< int > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderInt::read",3,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",3,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderInt::read",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",3,SWIGTYPE_p_int);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderInt_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderInt::read(size_t,std::vector< int > &)\n"
    "    SndFileReaderInt::read(size_t,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderInt_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  std::vector< int > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read_frames",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderInt::read_frames",3,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",3,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read_frames",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderInt::read_frames",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",3,SWIGTYPE_p_int);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderInt_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderInt::read_frames(size_t,std::vector< int > &)\n"
    "    SndFileReaderInt::read_frames(size_t,int *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderInt(void *obj) {
SndFileReaderInt *arg1 = (SndFileReaderInt *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderInt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderInt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderInt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderInt_methods[]= {
    { "size", _wrap_SndFileReaderInt_size},
    { "seek", _wrap_SndFileReaderInt_seek},
    { "get_string", _wrap_SndFileReaderInt_get_string},
    { "command", _wrap_SndFileReaderInt_command},
    { "frames", _wrap_SndFileReaderInt_frames},
    { "samplerate", _wrap_SndFileReaderInt_samplerate},
    { "channels", _wrap_SndFileReaderInt_channels},
    { "format", _wrap_SndFileReaderInt_format},
    { "sections", _wrap_SndFileReaderInt_sections},
    { "seekable", _wrap_SndFileReaderInt_seekable},
    { "read", _wrap_SndFileReaderInt_read},
    { "read_frames", _wrap_SndFileReaderInt_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderInt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderInt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderInt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderInt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderInt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderInt_Sf_SwigStatic = {
    "SndFileReaderInt",
    swig_SndFileReaderInt_Sf_SwigStatic_methods,
    swig_SndFileReaderInt_Sf_SwigStatic_attributes,
    swig_SndFileReaderInt_Sf_SwigStatic_constants,
    swig_SndFileReaderInt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderInt_bases[] = {0};
static const char *swig_SndFileReaderInt_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderInt = { "SndFileReaderInt", "SndFileReaderInt", &SWIGTYPE_p_SndFileReaderInt,_proxy__wrap_new_SndFileReaderInt, swig_delete_SndFileReaderInt, swig_SndFileReaderInt_methods, swig_SndFileReaderInt_attributes, &swig_SndFileReaderInt_Sf_SwigStatic, swig_SndFileReaderInt_meta, swig_SndFileReaderInt_bases, swig_SndFileReaderInt_base_names };

static int _wrap_new_SndFileReaderShort(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderShort *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderShort::SndFileReaderShort",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderShort::SndFileReaderShort",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderShort *)new SndFileReaderShort((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderShort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::size",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_size",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int64_t)((SndFileReaderShort const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::seek",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderShort::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_seek",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::seek",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_seek",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderShort_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderShort_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderShort_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderShort::seek(int64_t,int)\n"
    "    SndFileReaderShort::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderShort_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderShort::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::get_string",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_get_string",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::command",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderShort::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderShort::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_command",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderShort_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::frames",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_frames",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int64_t)((SndFileReaderShort const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::samplerate",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_samplerate",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::channels",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_channels",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::format",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_format",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::sections",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_sections",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::seekable",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_seekable",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  std::vector< short > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderShort::read",3,"std::vector< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",3,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderShort::read",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",3,SWIGTYPE_p_short);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderShort_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderShort::read(size_t,std::vector< short > &)\n"
    "    SndFileReaderShort::read(size_t,short *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderShort_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  std::vector< short > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read_frames",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderShort::read_frames",3,"std::vector< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",3,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read_frames",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderShort::read_frames",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",3,SWIGTYPE_p_short);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderShort_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderShort::read_frames(size_t,std::vector< short > &)\n"
    "    SndFileReaderShort::read_frames(size_t,short *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderShort(void *obj) {
SndFileReaderShort *arg1 = (SndFileReaderShort *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderShort(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderShort);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderShort_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderShort_methods[]= {
    { "size", _wrap_SndFileReaderShort_size},
    { "seek", _wrap_SndFileReaderShort_seek},
    { "get_string", _wrap_SndFileReaderShort_get_string},
    { "command", _wrap_SndFileReaderShort_command},
    { "frames", _wrap_SndFileReaderShort_frames},
    { "samplerate", _wrap_SndFileReaderShort_samplerate},
    { "channels", _wrap_SndFileReaderShort_channels},
    { "format", _wrap_SndFileReaderShort_format},
    { "sections", _wrap_SndFileReaderShort_sections},
    { "seekable", _wrap_SndFileReaderShort_seekable},
    { "read", _wrap_SndFileReaderShort_read},
    { "read_frames", _wrap_SndFileReaderShort_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderShort_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderShort_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderShort_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderShort_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderShort_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderShort_Sf_SwigStatic = {
    "SndFileReaderShort",
    swig_SndFileReaderShort_Sf_SwigStatic_methods,
    swig_SndFileReaderShort_Sf_SwigStatic_attributes,
    swig_SndFileReaderShort_Sf_SwigStatic_constants,
    swig_SndFileReaderShort_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderShort_bases[] = {0};
static const char *swig_SndFileReaderShort_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderShort = { "SndFileReaderShort", "SndFileReaderShort", &SWIGTYPE_p_SndFileReaderShort,_proxy__wrap_new_SndFileReaderShort, swig_delete_SndFileReaderShort, swig_SndFileReaderShort_methods, swig_SndFileReaderShort_attributes, &swig_SndFileReaderShort_Sf_SwigStatic, swig_SndFileReaderShort_meta, swig_SndFileReaderShort_bases, swig_SndFileReaderShort_base_names };

static int _wrap_new_SndFileWriterFloat(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterFloat *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::SndFileWriterFloat",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterFloat *)new SndFileWriterFloat((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterFloat::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::seek",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterFloat::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_seek",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterFloat::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::seek",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_seek",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterFloat_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterFloat_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterFloat_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterFloat::seek(int64_t,int)\n"
    "    SndFileWriterFloat::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterFloat_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::sync",1,"SndFileWriterFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_sync",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::set_string",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterFloat::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_set_string",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::command",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterFloat::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterFloat::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_command",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterFloat_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::samplerate",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_samplerate",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::channels",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_channels",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::format",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_format",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::sections",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_sections",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::seekable",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_seekable",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write",1,"SndFileWriterFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterFloat::write",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterFloat::write",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",3,SWIGTYPE_p_float);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterFloat_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterFloat_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterFloat_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterFloat::write(std::vector< float > &)\n"
    "    SndFileWriterFloat::write(size_t,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterFloat_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write_frames",1,"SndFileWriterFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterFloat::write_frames",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write_frames",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterFloat::write_frames",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",3,SWIGTYPE_p_float);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterFloat_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterFloat_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterFloat_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterFloat::write_frames(std::vector< float > &)\n"
    "    SndFileWriterFloat::write_frames(size_t,float *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterFloat(void *obj) {
SndFileWriterFloat *arg1 = (SndFileWriterFloat *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterFloat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterFloat_methods[]= {
    { "seek", _wrap_SndFileWriterFloat_seek},
    { "sync", _wrap_SndFileWriterFloat_sync},
    { "set_string", _wrap_SndFileWriterFloat_set_string},
    { "command", _wrap_SndFileWriterFloat_command},
    { "samplerate", _wrap_SndFileWriterFloat_samplerate},
    { "channels", _wrap_SndFileWriterFloat_channels},
    { "format", _wrap_SndFileWriterFloat_format},
    { "sections", _wrap_SndFileWriterFloat_sections},
    { "seekable", _wrap_SndFileWriterFloat_seekable},
    { "write", _wrap_SndFileWriterFloat_write},
    { "write_frames", _wrap_SndFileWriterFloat_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterFloat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterFloat_Sf_SwigStatic = {
    "SndFileWriterFloat",
    swig_SndFileWriterFloat_Sf_SwigStatic_methods,
    swig_SndFileWriterFloat_Sf_SwigStatic_attributes,
    swig_SndFileWriterFloat_Sf_SwigStatic_constants,
    swig_SndFileWriterFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterFloat_bases[] = {0};
static const char *swig_SndFileWriterFloat_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterFloat = { "SndFileWriterFloat", "SndFileWriterFloat", &SWIGTYPE_p_SndFileWriterFloat,_proxy__wrap_new_SndFileWriterFloat, swig_delete_SndFileWriterFloat, swig_SndFileWriterFloat_methods, swig_SndFileWriterFloat_attributes, &swig_SndFileWriterFloat_Sf_SwigStatic, swig_SndFileWriterFloat_meta, swig_SndFileWriterFloat_bases, swig_SndFileWriterFloat_base_names };

static int _wrap_new_SndFileWriterDouble(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterDouble *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::SndFileWriterDouble",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterDouble *)new SndFileWriterDouble((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterDouble::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::seek",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterDouble::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_seek",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterDouble::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::seek",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_seek",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterDouble_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterDouble_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterDouble_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterDouble::seek(int64_t,int)\n"
    "    SndFileWriterDouble::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterDouble_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::sync",1,"SndFileWriterDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_sync",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::set_string",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterDouble::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_set_string",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::command",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterDouble::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterDouble::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_command",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterDouble_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::samplerate",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_samplerate",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::channels",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_channels",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::format",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_format",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::sections",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_sections",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::seekable",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_seekable",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write",1,"SndFileWriterDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterDouble::write",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterDouble::write",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",3,SWIGTYPE_p_double);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterDouble_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterDouble_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterDouble_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterDouble::write(std::vector< double > &)\n"
    "    SndFileWriterDouble::write(size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterDouble_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write_frames",1,"SndFileWriterDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterDouble::write_frames",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write_frames",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterDouble::write_frames",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",3,SWIGTYPE_p_double);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterDouble_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterDouble_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterDouble_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterDouble::write_frames(std::vector< double > &)\n"
    "    SndFileWriterDouble::write_frames(size_t,double *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterDouble(void *obj) {
SndFileWriterDouble *arg1 = (SndFileWriterDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterDouble_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterDouble_methods[]= {
    { "seek", _wrap_SndFileWriterDouble_seek},
    { "sync", _wrap_SndFileWriterDouble_sync},
    { "set_string", _wrap_SndFileWriterDouble_set_string},
    { "command", _wrap_SndFileWriterDouble_command},
    { "samplerate", _wrap_SndFileWriterDouble_samplerate},
    { "channels", _wrap_SndFileWriterDouble_channels},
    { "format", _wrap_SndFileWriterDouble_format},
    { "sections", _wrap_SndFileWriterDouble_sections},
    { "seekable", _wrap_SndFileWriterDouble_seekable},
    { "write", _wrap_SndFileWriterDouble_write},
    { "write_frames", _wrap_SndFileWriterDouble_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterDouble_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterDouble_Sf_SwigStatic = {
    "SndFileWriterDouble",
    swig_SndFileWriterDouble_Sf_SwigStatic_methods,
    swig_SndFileWriterDouble_Sf_SwigStatic_attributes,
    swig_SndFileWriterDouble_Sf_SwigStatic_constants,
    swig_SndFileWriterDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterDouble_bases[] = {0};
static const char *swig_SndFileWriterDouble_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterDouble = { "SndFileWriterDouble", "SndFileWriterDouble", &SWIGTYPE_p_SndFileWriterDouble,_proxy__wrap_new_SndFileWriterDouble, swig_delete_SndFileWriterDouble, swig_SndFileWriterDouble_methods, swig_SndFileWriterDouble_attributes, &swig_SndFileWriterDouble_Sf_SwigStatic, swig_SndFileWriterDouble_meta, swig_SndFileWriterDouble_bases, swig_SndFileWriterDouble_base_names };

static int _wrap_new_SndFileWriterShort(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterShort *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::SndFileWriterShort",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterShort *)new SndFileWriterShort((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterShort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterShort::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::seek",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterShort::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_seek",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterShort::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::seek",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_seek",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterShort_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterShort_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterShort_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterShort::seek(int64_t,int)\n"
    "    SndFileWriterShort::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterShort_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::sync",1,"SndFileWriterShort *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_sync",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::set_string",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterShort::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_set_string",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::command",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterShort::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterShort::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_command",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterShort_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::samplerate",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_samplerate",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::channels",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_channels",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::format",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_format",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::sections",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_sections",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::seekable",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_seekable",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  std::vector< short > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write",1,"SndFileWriterShort *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterShort::write",2,"std::vector< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterShort::write",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",3,SWIGTYPE_p_short);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterShort_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterShort_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterShort_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterShort::write(std::vector< short > &)\n"
    "    SndFileWriterShort::write(size_t,short *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterShort_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  std::vector< short > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write_frames",1,"SndFileWriterShort *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterShort::write_frames",2,"std::vector< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write_frames",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterShort::write_frames",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",3,SWIGTYPE_p_short);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterShort_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterShort_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterShort_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterShort::write_frames(std::vector< short > &)\n"
    "    SndFileWriterShort::write_frames(size_t,short *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterShort(void *obj) {
SndFileWriterShort *arg1 = (SndFileWriterShort *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterShort(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterShort);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterShort_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterShort_methods[]= {
    { "seek", _wrap_SndFileWriterShort_seek},
    { "sync", _wrap_SndFileWriterShort_sync},
    { "set_string", _wrap_SndFileWriterShort_set_string},
    { "command", _wrap_SndFileWriterShort_command},
    { "samplerate", _wrap_SndFileWriterShort_samplerate},
    { "channels", _wrap_SndFileWriterShort_channels},
    { "format", _wrap_SndFileWriterShort_format},
    { "sections", _wrap_SndFileWriterShort_sections},
    { "seekable", _wrap_SndFileWriterShort_seekable},
    { "write", _wrap_SndFileWriterShort_write},
    { "write_frames", _wrap_SndFileWriterShort_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterShort_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterShort_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterShort_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterShort_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterShort_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterShort_Sf_SwigStatic = {
    "SndFileWriterShort",
    swig_SndFileWriterShort_Sf_SwigStatic_methods,
    swig_SndFileWriterShort_Sf_SwigStatic_attributes,
    swig_SndFileWriterShort_Sf_SwigStatic_constants,
    swig_SndFileWriterShort_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterShort_bases[] = {0};
static const char *swig_SndFileWriterShort_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterShort = { "SndFileWriterShort", "SndFileWriterShort", &SWIGTYPE_p_SndFileWriterShort,_proxy__wrap_new_SndFileWriterShort, swig_delete_SndFileWriterShort, swig_SndFileWriterShort_methods, swig_SndFileWriterShort_attributes, &swig_SndFileWriterShort_Sf_SwigStatic, swig_SndFileWriterShort_meta, swig_SndFileWriterShort_bases, swig_SndFileWriterShort_base_names };

static int _wrap_new_SndFileWriterInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterInt *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::SndFileWriterInt",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterInt *)new SndFileWriterInt((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterInt::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::seek",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterInt::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_seek",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterInt::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::seek",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_seek",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterInt_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterInt_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterInt_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterInt::seek(int64_t,int)\n"
    "    SndFileWriterInt::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterInt_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::sync",1,"SndFileWriterInt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_sync",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::set_string",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterInt::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_set_string",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::command",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterInt::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterInt::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_command",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterInt_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::samplerate",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_samplerate",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::channels",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_channels",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::format",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_format",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::sections",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_sections",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::seekable",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_seekable",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write",1,"SndFileWriterInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterInt::write",2,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterInt::write",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",3,SWIGTYPE_p_int);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterInt_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterInt_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterInt_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterInt::write(std::vector< int > &)\n"
    "    SndFileWriterInt::write(size_t,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterInt_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write_frames",1,"SndFileWriterInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterInt::write_frames",2,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write_frames",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterInt::write_frames",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",3,SWIGTYPE_p_int);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterInt_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterInt_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterInt_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterInt::write_frames(std::vector< int > &)\n"
    "    SndFileWriterInt::write_frames(size_t,int *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterInt(void *obj) {
SndFileWriterInt *arg1 = (SndFileWriterInt *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterInt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterInt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterInt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterInt_methods[]= {
    { "seek", _wrap_SndFileWriterInt_seek},
    { "sync", _wrap_SndFileWriterInt_sync},
    { "set_string", _wrap_SndFileWriterInt_set_string},
    { "command", _wrap_SndFileWriterInt_command},
    { "samplerate", _wrap_SndFileWriterInt_samplerate},
    { "channels", _wrap_SndFileWriterInt_channels},
    { "format", _wrap_SndFileWriterInt_format},
    { "sections", _wrap_SndFileWriterInt_sections},
    { "seekable", _wrap_SndFileWriterInt_seekable},
    { "write", _wrap_SndFileWriterInt_write},
    { "write_frames", _wrap_SndFileWriterInt_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterInt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterInt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterInt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterInt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterInt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterInt_Sf_SwigStatic = {
    "SndFileWriterInt",
    swig_SndFileWriterInt_Sf_SwigStatic_methods,
    swig_SndFileWriterInt_Sf_SwigStatic_attributes,
    swig_SndFileWriterInt_Sf_SwigStatic_constants,
    swig_SndFileWriterInt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterInt_bases[] = {0};
static const char *swig_SndFileWriterInt_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterInt = { "SndFileWriterInt", "SndFileWriterInt", &SWIGTYPE_p_SndFileWriterInt,_proxy__wrap_new_SndFileWriterInt, swig_delete_SndFileWriterInt, swig_SndFileWriterInt_methods, swig_SndFileWriterInt_attributes, &swig_SndFileWriterInt_Sf_SwigStatic, swig_SndFileWriterInt_meta, swig_SndFileWriterInt_bases, swig_SndFileWriterInt_base_names };

static int _wrap_new_WhiteNoiseSource(lua_State* L) {
  int SWIG_arg = 0;
  WhiteNoiseSource *result = 0 ;
  
  SWIG_check_num_args("WhiteNoiseSource::WhiteNoiseSource",0,0)
  result = (WhiteNoiseSource *)new WhiteNoiseSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WhiteNoiseSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_engine_set(lua_State* L) {
  int SWIG_arg = 0;
  WhiteNoiseSource *arg1 = (WhiteNoiseSource *) 0 ;
  std::mt19937 arg2 ;
  std::mt19937 *argp2 ;
  
  SWIG_check_num_args("WhiteNoiseSource::engine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WhiteNoiseSource::engine",1,"WhiteNoiseSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WhiteNoiseSource::engine",2,"std::mt19937");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_engine_set",1,SWIGTYPE_p_WhiteNoiseSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__mt19937,0))){
    SWIG_fail_ptr("WhiteNoiseSource_engine_set",2,SWIGTYPE_p_std__mt19937);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->engine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_engine_get(lua_State* L) {
  int SWIG_arg = 0;
  WhiteNoiseSource *arg1 = (WhiteNoiseSource *) 0 ;
  std::mt19937 result;
  
  SWIG_check_num_args("WhiteNoiseSource::engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WhiteNoiseSource::engine",1,"WhiteNoiseSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_engine_get",1,SWIGTYPE_p_WhiteNoiseSource);
  }
  
  result =  ((arg1)->engine);
  {
    std::mt19937 * resultptr = new std::mt19937((const std::mt19937 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mt19937,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_dist_set(lua_State* L) {
  int SWIG_arg = 0;
  WhiteNoiseSource *arg1 = (WhiteNoiseSource *) 0 ;
  std::uniform_real_distribution< float > arg2 ;
  std::uniform_real_distribution< float > *argp2 ;
  
  SWIG_check_num_args("WhiteNoiseSource::dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WhiteNoiseSource::dist",1,"WhiteNoiseSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WhiteNoiseSource::dist",2,"std::uniform_real_distribution< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_dist_set",1,SWIGTYPE_p_WhiteNoiseSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__uniform_real_distributionT_float_t,0))){
    SWIG_fail_ptr("WhiteNoiseSource_dist_set",2,SWIGTYPE_p_std__uniform_real_distributionT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dist = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_dist_get(lua_State* L) {
  int SWIG_arg = 0;
  WhiteNoiseSource *arg1 = (WhiteNoiseSource *) 0 ;
  std::uniform_real_distribution< float > result;
  
  SWIG_check_num_args("WhiteNoiseSource::dist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WhiteNoiseSource::dist",1,"WhiteNoiseSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_dist_get",1,SWIGTYPE_p_WhiteNoiseSource);
  }
  
  result =  ((arg1)->dist);
  {
    std::uniform_real_distribution< float > * resultptr = new std::uniform_real_distribution< float >((const std::uniform_real_distribution< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__uniform_real_distributionT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WhiteNoiseSource(void *obj) {
WhiteNoiseSource *arg1 = (WhiteNoiseSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_WhiteNoiseSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WhiteNoiseSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WhiteNoiseSource_attributes[] = {
    { "engine", _wrap_WhiteNoiseSource_engine_get, _wrap_WhiteNoiseSource_engine_set },
    { "dist", _wrap_WhiteNoiseSource_dist_get, _wrap_WhiteNoiseSource_dist_set },
    {0,0,0}
};
static swig_lua_method swig_WhiteNoiseSource_methods[]= {
    {0,0}
};
static swig_lua_method swig_WhiteNoiseSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WhiteNoiseSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WhiteNoiseSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WhiteNoiseSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WhiteNoiseSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WhiteNoiseSource_Sf_SwigStatic = {
    "WhiteNoiseSource",
    swig_WhiteNoiseSource_Sf_SwigStatic_methods,
    swig_WhiteNoiseSource_Sf_SwigStatic_attributes,
    swig_WhiteNoiseSource_Sf_SwigStatic_constants,
    swig_WhiteNoiseSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WhiteNoiseSource_bases[] = {0};
static const char *swig_WhiteNoiseSource_base_names[] = {0};
static swig_lua_class _wrap_class_WhiteNoiseSource = { "WhiteNoiseSource", "WhiteNoiseSource", &SWIGTYPE_p_WhiteNoiseSource,_proxy__wrap_new_WhiteNoiseSource, swig_delete_WhiteNoiseSource, swig_WhiteNoiseSource_methods, swig_WhiteNoiseSource_attributes, &swig_WhiteNoiseSource_Sf_SwigStatic, swig_WhiteNoiseSource_meta, swig_WhiteNoiseSource_bases, swig_WhiteNoiseSource_base_names };

static int _wrap_WhiteNoise___call(lua_State* L) {
  int SWIG_arg = 0;
  WhiteNoise *arg1 = (WhiteNoise *) 0 ;
  float result;
  
  SWIG_check_num_args("WhiteNoise::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WhiteNoise::operator ()",1,"WhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WhiteNoise,0))){
    SWIG_fail_ptr("WhiteNoise___call",1,SWIGTYPE_p_WhiteNoise);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  WhiteNoise *result = 0 ;
  
  SWIG_check_num_args("WhiteNoise::WhiteNoise",0,0)
  result = (WhiteNoise *)new WhiteNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WhiteNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WhiteNoise(void *obj) {
WhiteNoise *arg1 = (WhiteNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_WhiteNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WhiteNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WhiteNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WhiteNoise_methods[]= {
    { "__call", _wrap_WhiteNoise___call},
    {0,0}
};
static swig_lua_method swig_WhiteNoise_meta[] = {
    { "__call", _wrap_WhiteNoise___call},
    {0,0}
};

static swig_lua_attribute swig_WhiteNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WhiteNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WhiteNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WhiteNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WhiteNoise_Sf_SwigStatic = {
    "WhiteNoise",
    swig_WhiteNoise_Sf_SwigStatic_methods,
    swig_WhiteNoise_Sf_SwigStatic_attributes,
    swig_WhiteNoise_Sf_SwigStatic_constants,
    swig_WhiteNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WhiteNoise_bases[] = {0,0};
static const char *swig_WhiteNoise_base_names[] = {"WhiteNoiseSource *",0};
static swig_lua_class _wrap_class_WhiteNoise = { "WhiteNoise", "WhiteNoise", &SWIGTYPE_p_WhiteNoise,_proxy__wrap_new_WhiteNoise, swig_delete_WhiteNoise, swig_WhiteNoise_methods, swig_WhiteNoise_attributes, &swig_WhiteNoise_Sf_SwigStatic, swig_WhiteNoise_meta, swig_WhiteNoise_bases, swig_WhiteNoise_base_names };

static int _wrap_PinkNoise___call(lua_State* L) {
  int SWIG_arg = 0;
  PinkNoise *arg1 = (PinkNoise *) 0 ;
  float result;
  
  SWIG_check_num_args("PinkNoise::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PinkNoise::operator ()",1,"PinkNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise___call",1,SWIGTYPE_p_PinkNoise);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoise_f_set(lua_State* L) {
  int SWIG_arg = 0;
  PinkNoise *arg1 = (PinkNoise *) 0 ;
  PinkingFilter arg2 ;
  PinkingFilter *argp2 ;
  
  SWIG_check_num_args("PinkNoise::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PinkNoise::f",1,"PinkNoise *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("PinkNoise::f",2,"PinkingFilter");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise_f_set",1,SWIGTYPE_p_PinkNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_PinkingFilter,0))){
    SWIG_fail_ptr("PinkNoise_f_set",2,SWIGTYPE_p_PinkingFilter);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoise_f_get(lua_State* L) {
  int SWIG_arg = 0;
  PinkNoise *arg1 = (PinkNoise *) 0 ;
  PinkingFilter result;
  
  SWIG_check_num_args("PinkNoise::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PinkNoise::f",1,"PinkNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise_f_get",1,SWIGTYPE_p_PinkNoise);
  }
  
  result =  ((arg1)->f);
  {
    PinkingFilter * resultptr = new PinkingFilter((const PinkingFilter &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_PinkingFilter,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PinkNoise(lua_State* L) {
  int SWIG_arg = 0;
  PinkNoise *result = 0 ;
  
  SWIG_check_num_args("PinkNoise::PinkNoise",0,0)
  result = (PinkNoise *)new PinkNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PinkNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PinkNoise(void *obj) {
PinkNoise *arg1 = (PinkNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_PinkNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PinkNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PinkNoise_attributes[] = {
    { "f", _wrap_PinkNoise_f_get, _wrap_PinkNoise_f_set },
    {0,0,0}
};
static swig_lua_method swig_PinkNoise_methods[]= {
    { "__call", _wrap_PinkNoise___call},
    {0,0}
};
static swig_lua_method swig_PinkNoise_meta[] = {
    { "__call", _wrap_PinkNoise___call},
    {0,0}
};

static swig_lua_attribute swig_PinkNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PinkNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PinkNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PinkNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PinkNoise_Sf_SwigStatic = {
    "PinkNoise",
    swig_PinkNoise_Sf_SwigStatic_methods,
    swig_PinkNoise_Sf_SwigStatic_attributes,
    swig_PinkNoise_Sf_SwigStatic_constants,
    swig_PinkNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PinkNoise_bases[] = {0,0};
static const char *swig_PinkNoise_base_names[] = {"WhiteNoiseSource *",0};
static swig_lua_class _wrap_class_PinkNoise = { "PinkNoise", "PinkNoise", &SWIGTYPE_p_PinkNoise,_proxy__wrap_new_PinkNoise, swig_delete_PinkNoise, swig_PinkNoise_methods, swig_PinkNoise_attributes, &swig_PinkNoise_Sf_SwigStatic, swig_PinkNoise_meta, swig_PinkNoise_bases, swig_PinkNoise_base_names };

static int _wrap_BrownNoise___call(lua_State* L) {
  int SWIG_arg = 0;
  BrownNoise *arg1 = (BrownNoise *) 0 ;
  float result;
  
  SWIG_check_num_args("BrownNoise::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrownNoise::operator ()",1,"BrownNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrownNoise,0))){
    SWIG_fail_ptr("BrownNoise___call",1,SWIGTYPE_p_BrownNoise);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoise_f_set(lua_State* L) {
  int SWIG_arg = 0;
  BrownNoise *arg1 = (BrownNoise *) 0 ;
  BrowningFilter arg2 ;
  BrowningFilter *argp2 ;
  
  SWIG_check_num_args("BrownNoise::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrownNoise::f",1,"BrownNoise *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BrownNoise::f",2,"BrowningFilter");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrownNoise,0))){
    SWIG_fail_ptr("BrownNoise_f_set",1,SWIGTYPE_p_BrownNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BrowningFilter,0))){
    SWIG_fail_ptr("BrownNoise_f_set",2,SWIGTYPE_p_BrowningFilter);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoise_f_get(lua_State* L) {
  int SWIG_arg = 0;
  BrownNoise *arg1 = (BrownNoise *) 0 ;
  BrowningFilter result;
  
  SWIG_check_num_args("BrownNoise::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrownNoise::f",1,"BrownNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrownNoise,0))){
    SWIG_fail_ptr("BrownNoise_f_get",1,SWIGTYPE_p_BrownNoise);
  }
  
  result =  ((arg1)->f);
  {
    BrowningFilter * resultptr = new BrowningFilter((const BrowningFilter &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BrowningFilter,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BrownNoise(lua_State* L) {
  int SWIG_arg = 0;
  BrownNoise *result = 0 ;
  
  SWIG_check_num_args("BrownNoise::BrownNoise",0,0)
  result = (BrownNoise *)new BrownNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BrownNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BrownNoise(void *obj) {
BrownNoise *arg1 = (BrownNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_BrownNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BrownNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BrownNoise_attributes[] = {
    { "f", _wrap_BrownNoise_f_get, _wrap_BrownNoise_f_set },
    {0,0,0}
};
static swig_lua_method swig_BrownNoise_methods[]= {
    { "__call", _wrap_BrownNoise___call},
    {0,0}
};
static swig_lua_method swig_BrownNoise_meta[] = {
    { "__call", _wrap_BrownNoise___call},
    {0,0}
};

static swig_lua_attribute swig_BrownNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BrownNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BrownNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BrownNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BrownNoise_Sf_SwigStatic = {
    "BrownNoise",
    swig_BrownNoise_Sf_SwigStatic_methods,
    swig_BrownNoise_Sf_SwigStatic_attributes,
    swig_BrownNoise_Sf_SwigStatic_constants,
    swig_BrownNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BrownNoise_bases[] = {0,0};
static const char *swig_BrownNoise_base_names[] = {"WhiteNoiseSource *",0};
static swig_lua_class _wrap_class_BrownNoise = { "BrownNoise", "BrownNoise", &SWIGTYPE_p_BrownNoise,_proxy__wrap_new_BrownNoise, swig_delete_BrownNoise, swig_BrownNoise_methods, swig_BrownNoise_attributes, &swig_BrownNoise_Sf_SwigStatic, swig_BrownNoise_meta, swig_BrownNoise_bases, swig_BrownNoise_base_names };

static int _wrap_NoiseGenerator_noise_type_set(lua_State* L) {
  int SWIG_arg = 0;
  NoiseGenerator *arg1 = (NoiseGenerator *) 0 ;
  enum NoiseGenerator::NoiseType arg2 ;
  
  SWIG_check_num_args("NoiseGenerator::noise_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NoiseGenerator::noise_type",1,"NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NoiseGenerator::noise_type",2,"enum NoiseGenerator::NoiseType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_noise_type_set",1,SWIGTYPE_p_NoiseGenerator);
  }
  
  arg2 = (enum NoiseGenerator::NoiseType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->noise_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_noise_type_get(lua_State* L) {
  int SWIG_arg = 0;
  NoiseGenerator *arg1 = (NoiseGenerator *) 0 ;
  enum NoiseGenerator::NoiseType result;
  
  SWIG_check_num_args("NoiseGenerator::noise_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NoiseGenerator::noise_type",1,"NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_noise_type_get",1,SWIGTYPE_p_NoiseGenerator);
  }
  
  result = (enum NoiseGenerator::NoiseType) ((arg1)->noise_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_produce(lua_State* L) {
  int SWIG_arg = 0;
  NoiseGenerator *arg1 = (NoiseGenerator *) 0 ;
  NoiseGenerator::NoiseType arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  std::vector< float > result;
  
  SWIG_check_num_args("NoiseGenerator::produce",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NoiseGenerator::produce",1,"NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NoiseGenerator::produce",2,"NoiseGenerator::NoiseType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NoiseGenerator::produce",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NoiseGenerator::produce",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("NoiseGenerator::produce",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_produce",1,SWIGTYPE_p_NoiseGenerator);
  }
  
  arg2 = (NoiseGenerator::NoiseType)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->produce(arg2,arg3,arg4,arg5);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Tick(lua_State* L) {
  int SWIG_arg = 0;
  NoiseGenerator *arg1 = (NoiseGenerator *) 0 ;
  float result;
  
  SWIG_check_num_args("NoiseGenerator::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NoiseGenerator::Tick",1,"NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_Tick",1,SWIGTYPE_p_NoiseGenerator);
  }
  
  result = (float)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NoiseGenerator *arg1 = (NoiseGenerator *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("NoiseGenerator::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NoiseGenerator::Process",1,"NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NoiseGenerator::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("NoiseGenerator::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("NoiseGenerator::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",1,SWIGTYPE_p_NoiseGenerator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NoiseGenerator *arg1 = (NoiseGenerator *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("NoiseGenerator::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NoiseGenerator::Process",1,"NoiseGenerator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NoiseGenerator::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NoiseGenerator::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",1,SWIGTYPE_p_NoiseGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NoiseGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NoiseGenerator_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NoiseGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_NoiseGenerator_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoiseGenerator_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NoiseGenerator::Process(size_t,float *,float *)\n"
    "    NoiseGenerator::Process(float *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_new_NoiseGenerator(lua_State* L) {
  int SWIG_arg = 0;
  NoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("NoiseGenerator::NoiseGenerator",0,0)
  result = (NoiseGenerator *)new NoiseGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NoiseGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseGenerator(void *obj) {
NoiseGenerator *arg1 = (NoiseGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseGenerator_attributes[] = {
    { "noise_type", _wrap_NoiseGenerator_noise_type_get, _wrap_NoiseGenerator_noise_type_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseGenerator_methods[]= {
    { "produce", _wrap_NoiseGenerator_produce},
    { "Tick", _wrap_NoiseGenerator_Tick},
    { "Process", _wrap_NoiseGenerator_Process},
    {0,0}
};
static swig_lua_method swig_NoiseGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseGenerator_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("WHITE", NoiseGenerator::WHITE)},
    {SWIG_LUA_CONSTTAB_INT("PINK", NoiseGenerator::PINK)},
    {SWIG_LUA_CONSTTAB_INT("BROWN", NoiseGenerator::BROWN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseGenerator_Sf_SwigStatic = {
    "NoiseGenerator",
    swig_NoiseGenerator_Sf_SwigStatic_methods,
    swig_NoiseGenerator_Sf_SwigStatic_attributes,
    swig_NoiseGenerator_Sf_SwigStatic_constants,
    swig_NoiseGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseGenerator_bases[] = {0};
static const char *swig_NoiseGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseGenerator = { "NoiseGenerator", "NoiseGenerator", &SWIGTYPE_p_NoiseGenerator,_proxy__wrap_new_NoiseGenerator, swig_delete_NoiseGenerator, swig_NoiseGenerator_methods, swig_NoiseGenerator_attributes, &swig_NoiseGenerator_Sf_SwigStatic, swig_NoiseGenerator_meta, swig_NoiseGenerator_bases, swig_NoiseGenerator_base_names };

static int _wrap_GaussianWhiteNoise_g_randn_x_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_x",1,"SoundWave::GaussianWhiteNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_x",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_x_set",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->g_randn_x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_g_randn_x_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_x",1,"SoundWave::GaussianWhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_x_get",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  result = (uint32_t) ((arg1)->g_randn_x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_g_randn_y_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_y",1,"SoundWave::GaussianWhiteNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_y",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_y_set",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->g_randn_y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_g_randn_y_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_y",1,"SoundWave::GaussianWhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_y_get",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  result = (uint32_t) ((arg1)->g_randn_y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_g_randn_z_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_z",1,"SoundWave::GaussianWhiteNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_z",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_z_set",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->g_randn_z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_g_randn_z_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_z",1,"SoundWave::GaussianWhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_z_get",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  result = (uint32_t) ((arg1)->g_randn_z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_g_randn_w_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_w",1,"SoundWave::GaussianWhiteNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_w",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_w_set",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->g_randn_w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_g_randn_w_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::g_randn_w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::g_randn_w",1,"SoundWave::GaussianWhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_g_randn_w_get",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  result = (uint32_t) ((arg1)->g_randn_w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GaussianWhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *result = 0 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::GaussianWhiteNoise",0,0)
  result = (SoundWave::GaussianWhiteNoise *)new SoundWave::GaussianWhiteNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_Generate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::Generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Generate",1,"SoundWave::GaussianWhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Generate",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  result = (double)(arg1)->Generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_Tick(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Tick",1,"SoundWave::GaussianWhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Tick",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  result = (double)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",1,"SoundWave::GaussianWhiteNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Process",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Process",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->Process(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",1,"SoundWave::GaussianWhiteNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Process",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_Process__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::GaussianWhiteNoise::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",1,"SoundWave::GaussianWhiteNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::GaussianWhiteNoise::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Process",1,SWIGTYPE_p_SoundWave__GaussianWhiteNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GaussianWhiteNoise_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__GaussianWhiteNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GaussianWhiteNoise_Process__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__GaussianWhiteNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GaussianWhiteNoise_Process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__GaussianWhiteNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GaussianWhiteNoise_Process__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GaussianWhiteNoise_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::GaussianWhiteNoise::Process(size_t,std::vector< float > &)\n"
    "    SoundWave::GaussianWhiteNoise::Process(size_t,float *,float *)\n"
    "    SoundWave::GaussianWhiteNoise::Process(float *,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_GaussianWhiteNoise(void *obj) {
SoundWave::GaussianWhiteNoise *arg1 = (SoundWave::GaussianWhiteNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_GaussianWhiteNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GaussianWhiteNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GaussianWhiteNoise_attributes[] = {
    { "g_randn_x", _wrap_GaussianWhiteNoise_g_randn_x_get, _wrap_GaussianWhiteNoise_g_randn_x_set },
    { "g_randn_y", _wrap_GaussianWhiteNoise_g_randn_y_get, _wrap_GaussianWhiteNoise_g_randn_y_set },
    { "g_randn_z", _wrap_GaussianWhiteNoise_g_randn_z_get, _wrap_GaussianWhiteNoise_g_randn_z_set },
    { "g_randn_w", _wrap_GaussianWhiteNoise_g_randn_w_get, _wrap_GaussianWhiteNoise_g_randn_w_set },
    {0,0,0}
};
static swig_lua_method swig_GaussianWhiteNoise_methods[]= {
    { "Generate", _wrap_GaussianWhiteNoise_Generate},
    { "Tick", _wrap_GaussianWhiteNoise_Tick},
    { "Process", _wrap_GaussianWhiteNoise_Process},
    {0,0}
};
static swig_lua_method swig_GaussianWhiteNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GaussianWhiteNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GaussianWhiteNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GaussianWhiteNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GaussianWhiteNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GaussianWhiteNoise_Sf_SwigStatic = {
    "GaussianWhiteNoise",
    swig_GaussianWhiteNoise_Sf_SwigStatic_methods,
    swig_GaussianWhiteNoise_Sf_SwigStatic_attributes,
    swig_GaussianWhiteNoise_Sf_SwigStatic_constants,
    swig_GaussianWhiteNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GaussianWhiteNoise_bases[] = {0};
static const char *swig_GaussianWhiteNoise_base_names[] = {0};
static swig_lua_class _wrap_class_GaussianWhiteNoise = { "GaussianWhiteNoise", "GaussianWhiteNoise", &SWIGTYPE_p_SoundWave__GaussianWhiteNoise,_proxy__wrap_new_GaussianWhiteNoise, swig_delete_GaussianWhiteNoise, swig_GaussianWhiteNoise_methods, swig_GaussianWhiteNoise_attributes, &swig_GaussianWhiteNoise_Sf_SwigStatic, swig_GaussianWhiteNoise_meta, swig_GaussianWhiteNoise_bases, swig_GaussianWhiteNoise_base_names };

static int _wrap_ModifiedVelvetNoise_base_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::base_fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::base_fs",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::base_fs",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_base_fs_set",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->base_fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_base_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::base_fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::base_fs",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_base_fs_get",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  result = (int) ((arg1)->base_fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_length_list_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int *arg2 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::length_list",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::length_list",1,"SoundWave::ModifiedVelvetNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::length_list",2,"int [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_length_list_set",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_length_list_set",2,SWIGTYPE_p_int);
  }
  
  {
    size_t ii;
    int *b = (int *) arg1->length_list;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_length_list_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::length_list",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::length_list",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_length_list_get",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  result = (int *)(int *) ((arg1)->length_list);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_current_position_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::current_position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::current_position",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::current_position",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_current_position_set",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->current_position = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_current_position_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::current_position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::current_position",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_current_position_get",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  result = (int) ((arg1)->current_position);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_chunk_length_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::chunk_length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::chunk_length",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::chunk_length",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_chunk_length_set",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->chunk_length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_chunk_length_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::chunk_length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::chunk_length",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_chunk_length_get",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  result = (int) ((arg1)->chunk_length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_count_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::count",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::count",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_count_set",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_count_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::count",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_count_get",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  result = (int) ((arg1)->count);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_g_randi_mvn_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  uint64_t arg2 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::g_randi_mvn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::g_randi_mvn",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::g_randi_mvn",2,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_g_randi_mvn_set",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  arg2 = (uint64_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->g_randi_mvn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_g_randi_mvn_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  uint64_t result;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::g_randi_mvn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::g_randi_mvn",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_g_randi_mvn_get",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  result = (uint64_t) ((arg1)->g_randi_mvn);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ModifiedVelvetNoise__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SoundWave::ModifiedVelvetNoise *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::ModifiedVelvetNoise",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::ModifiedVelvetNoise",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (SoundWave::ModifiedVelvetNoise *)new SoundWave::ModifiedVelvetNoise(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ModifiedVelvetNoise__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *result = 0 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::ModifiedVelvetNoise",0,0)
  result = (SoundWave::ModifiedVelvetNoise *)new SoundWave::ModifiedVelvetNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ModifiedVelvetNoise(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ModifiedVelvetNoise__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ModifiedVelvetNoise__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ModifiedVelvetNoise'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ModifiedVelvetNoise::ModifiedVelvetNoise(int)\n"
    "    SoundWave::ModifiedVelvetNoise::ModifiedVelvetNoise()\n");
  lua_error(L);return 0;
}


static int _wrap_ModifiedVelvetNoise_randi(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::randi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::randi",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::randi",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_randi",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->randi(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_UpdateChunk(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::UpdateChunk",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::UpdateChunk",1,"SoundWave::ModifiedVelvetNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::UpdateChunk",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::UpdateChunk",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_UpdateChunk",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_UpdateChunk",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_UpdateChunk",3,SWIGTYPE_p_int);
  }
  
  (arg1)->UpdateChunk(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_ReseedMVN(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::ReseedMVN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::ReseedMVN",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_ReseedMVN",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  (arg1)->ReseedMVN();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_SetSamplingFrequencyMVN(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::SetSamplingFrequencyMVN",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::SetSamplingFrequencyMVN",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::SetSamplingFrequencyMVN",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_SetSamplingFrequencyMVN",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetSamplingFrequencyMVN(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_Generate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::Generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Generate",1,"SoundWave::ModifiedVelvetNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_Generate",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  result = (int)(arg1)->Generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Process",1,"SoundWave::ModifiedVelvetNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_Process",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::ModifiedVelvetNoise::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Process",1,"SoundWave::ModifiedVelvetNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::ModifiedVelvetNoise::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_Process",1,SWIGTYPE_p_SoundWave__ModifiedVelvetNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ModifiedVelvetNoise_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModifiedVelvetNoise_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ModifiedVelvetNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ModifiedVelvetNoise_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ModifiedVelvetNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ModifiedVelvetNoise_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ModifiedVelvetNoise_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ModifiedVelvetNoise::Process(size_t,float *,float *)\n"
    "    SoundWave::ModifiedVelvetNoise::Process(float *,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_ModifiedVelvetNoise(void *obj) {
SoundWave::ModifiedVelvetNoise *arg1 = (SoundWave::ModifiedVelvetNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModifiedVelvetNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModifiedVelvetNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModifiedVelvetNoise_attributes[] = {
    { "base_fs", _wrap_ModifiedVelvetNoise_base_fs_get, _wrap_ModifiedVelvetNoise_base_fs_set },
    { "length_list", _wrap_ModifiedVelvetNoise_length_list_get, _wrap_ModifiedVelvetNoise_length_list_set },
    { "current_position", _wrap_ModifiedVelvetNoise_current_position_get, _wrap_ModifiedVelvetNoise_current_position_set },
    { "chunk_length", _wrap_ModifiedVelvetNoise_chunk_length_get, _wrap_ModifiedVelvetNoise_chunk_length_set },
    { "count", _wrap_ModifiedVelvetNoise_count_get, _wrap_ModifiedVelvetNoise_count_set },
    { "g_randi_mvn", _wrap_ModifiedVelvetNoise_g_randi_mvn_get, _wrap_ModifiedVelvetNoise_g_randi_mvn_set },
    {0,0,0}
};
static swig_lua_method swig_ModifiedVelvetNoise_methods[]= {
    { "randi", _wrap_ModifiedVelvetNoise_randi},
    { "UpdateChunk", _wrap_ModifiedVelvetNoise_UpdateChunk},
    { "ReseedMVN", _wrap_ModifiedVelvetNoise_ReseedMVN},
    { "SetSamplingFrequencyMVN", _wrap_ModifiedVelvetNoise_SetSamplingFrequencyMVN},
    { "Generate", _wrap_ModifiedVelvetNoise_Generate},
    { "Process", _wrap_ModifiedVelvetNoise_Process},
    {0,0}
};
static swig_lua_method swig_ModifiedVelvetNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModifiedVelvetNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModifiedVelvetNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModifiedVelvetNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModifiedVelvetNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModifiedVelvetNoise_Sf_SwigStatic = {
    "ModifiedVelvetNoise",
    swig_ModifiedVelvetNoise_Sf_SwigStatic_methods,
    swig_ModifiedVelvetNoise_Sf_SwigStatic_attributes,
    swig_ModifiedVelvetNoise_Sf_SwigStatic_constants,
    swig_ModifiedVelvetNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModifiedVelvetNoise_bases[] = {0};
static const char *swig_ModifiedVelvetNoise_base_names[] = {0};
static swig_lua_class _wrap_class_ModifiedVelvetNoise = { "ModifiedVelvetNoise", "ModifiedVelvetNoise", &SWIGTYPE_p_SoundWave__ModifiedVelvetNoise,_proxy__wrap_new_ModifiedVelvetNoise, swig_delete_ModifiedVelvetNoise, swig_ModifiedVelvetNoise_methods, swig_ModifiedVelvetNoise_attributes, &swig_ModifiedVelvetNoise_Sf_SwigStatic, swig_ModifiedVelvetNoise_meta, swig_ModifiedVelvetNoise_bases, swig_ModifiedVelvetNoise_base_names };

static int _wrap_new_PinkNoiseGenerator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SoundWave::PinkNoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::PinkNoiseGenerator::PinkNoiseGenerator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::PinkNoiseGenerator",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (SoundWave::PinkNoiseGenerator *)new SoundWave::PinkNoiseGenerator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__PinkNoiseGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PinkNoiseGenerator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::PinkNoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::PinkNoiseGenerator::PinkNoiseGenerator",0,0)
  result = (SoundWave::PinkNoiseGenerator *)new SoundWave::PinkNoiseGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__PinkNoiseGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PinkNoiseGenerator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PinkNoiseGenerator__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PinkNoiseGenerator__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PinkNoiseGenerator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::PinkNoiseGenerator::PinkNoiseGenerator(int)\n"
    "    SoundWave::PinkNoiseGenerator::PinkNoiseGenerator()\n");
  lua_error(L);return 0;
}


static int _wrap_PinkNoiseGenerator_Generate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::PinkNoiseGenerator *arg1 = (SoundWave::PinkNoiseGenerator *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::PinkNoiseGenerator::Generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::Generate",1,"SoundWave::PinkNoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator,0))){
    SWIG_fail_ptr("PinkNoiseGenerator_Generate",1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator);
  }
  
  result = (float)(arg1)->Generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoiseGenerator_Tick(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::PinkNoiseGenerator *arg1 = (SoundWave::PinkNoiseGenerator *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::PinkNoiseGenerator::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::Tick",1,"SoundWave::PinkNoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator,0))){
    SWIG_fail_ptr("PinkNoiseGenerator_Tick",1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator);
  }
  
  result = (float)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoiseGenerator_Process(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::PinkNoiseGenerator *arg1 = (SoundWave::PinkNoiseGenerator *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::PinkNoiseGenerator::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::Process",1,"SoundWave::PinkNoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator,0))){
    SWIG_fail_ptr("PinkNoiseGenerator_Process",1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PinkNoiseGenerator_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PinkNoiseGenerator_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoiseGenerator_setRows(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::PinkNoiseGenerator *arg1 = (SoundWave::PinkNoiseGenerator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::PinkNoiseGenerator::setRows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::setRows",1,"SoundWave::PinkNoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::PinkNoiseGenerator::setRows",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator,0))){
    SWIG_fail_ptr("PinkNoiseGenerator_setRows",1,SWIGTYPE_p_SoundWave__PinkNoiseGenerator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setRows(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PinkNoiseGenerator(void *obj) {
SoundWave::PinkNoiseGenerator *arg1 = (SoundWave::PinkNoiseGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_PinkNoiseGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PinkNoiseGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PinkNoiseGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PinkNoiseGenerator_methods[]= {
    { "Generate", _wrap_PinkNoiseGenerator_Generate},
    { "Tick", _wrap_PinkNoiseGenerator_Tick},
    { "Process", _wrap_PinkNoiseGenerator_Process},
    { "setRows", _wrap_PinkNoiseGenerator_setRows},
    {0,0}
};
static swig_lua_method swig_PinkNoiseGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PinkNoiseGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PinkNoiseGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PinkNoiseGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PinkNoiseGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PinkNoiseGenerator_Sf_SwigStatic = {
    "PinkNoiseGenerator",
    swig_PinkNoiseGenerator_Sf_SwigStatic_methods,
    swig_PinkNoiseGenerator_Sf_SwigStatic_attributes,
    swig_PinkNoiseGenerator_Sf_SwigStatic_constants,
    swig_PinkNoiseGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PinkNoiseGenerator_bases[] = {0};
static const char *swig_PinkNoiseGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_PinkNoiseGenerator = { "PinkNoiseGenerator", "PinkNoiseGenerator", &SWIGTYPE_p_SoundWave__PinkNoiseGenerator,_proxy__wrap_new_PinkNoiseGenerator, swig_delete_PinkNoiseGenerator, swig_PinkNoiseGenerator_methods, swig_PinkNoiseGenerator_attributes, &swig_PinkNoiseGenerator_Sf_SwigStatic, swig_PinkNoiseGenerator_meta, swig_PinkNoiseGenerator_bases, swig_PinkNoiseGenerator_base_names };

static int _wrap_new_BrownNoiseGenerator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SoundWave::BrownNoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::BrownNoiseGenerator::BrownNoiseGenerator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::BrownNoiseGenerator",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (SoundWave::BrownNoiseGenerator *)new SoundWave::BrownNoiseGenerator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__BrownNoiseGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BrownNoiseGenerator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BrownNoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::BrownNoiseGenerator::BrownNoiseGenerator",0,0)
  result = (SoundWave::BrownNoiseGenerator *)new SoundWave::BrownNoiseGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__BrownNoiseGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BrownNoiseGenerator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BrownNoiseGenerator__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BrownNoiseGenerator__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BrownNoiseGenerator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::BrownNoiseGenerator::BrownNoiseGenerator(int)\n"
    "    SoundWave::BrownNoiseGenerator::BrownNoiseGenerator()\n");
  lua_error(L);return 0;
}


static int _wrap_BrownNoiseGenerator_fillBuffer(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BrownNoiseGenerator *arg1 = (SoundWave::BrownNoiseGenerator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::BrownNoiseGenerator::fillBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::fillBuffer",1,"SoundWave::BrownNoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::fillBuffer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator,0))){
    SWIG_fail_ptr("BrownNoiseGenerator_fillBuffer",1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fillBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoiseGenerator_Generate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BrownNoiseGenerator *arg1 = (SoundWave::BrownNoiseGenerator *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::BrownNoiseGenerator::Generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::Generate",1,"SoundWave::BrownNoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator,0))){
    SWIG_fail_ptr("BrownNoiseGenerator_Generate",1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator);
  }
  
  result = (float)(arg1)->Generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoiseGenerator_Tick(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BrownNoiseGenerator *arg1 = (SoundWave::BrownNoiseGenerator *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::BrownNoiseGenerator::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::Tick",1,"SoundWave::BrownNoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator,0))){
    SWIG_fail_ptr("BrownNoiseGenerator_Tick",1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator);
  }
  
  result = (float)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoiseGenerator_Process(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BrownNoiseGenerator *arg1 = (SoundWave::BrownNoiseGenerator *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::BrownNoiseGenerator::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::Process",1,"SoundWave::BrownNoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::BrownNoiseGenerator::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator,0))){
    SWIG_fail_ptr("BrownNoiseGenerator_Process",1,SWIGTYPE_p_SoundWave__BrownNoiseGenerator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BrownNoiseGenerator_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BrownNoiseGenerator_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BrownNoiseGenerator(void *obj) {
SoundWave::BrownNoiseGenerator *arg1 = (SoundWave::BrownNoiseGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_BrownNoiseGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BrownNoiseGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BrownNoiseGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BrownNoiseGenerator_methods[]= {
    { "fillBuffer", _wrap_BrownNoiseGenerator_fillBuffer},
    { "Generate", _wrap_BrownNoiseGenerator_Generate},
    { "Tick", _wrap_BrownNoiseGenerator_Tick},
    { "Process", _wrap_BrownNoiseGenerator_Process},
    {0,0}
};
static swig_lua_method swig_BrownNoiseGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BrownNoiseGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BrownNoiseGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BrownNoiseGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BrownNoiseGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BrownNoiseGenerator_Sf_SwigStatic = {
    "BrownNoiseGenerator",
    swig_BrownNoiseGenerator_Sf_SwigStatic_methods,
    swig_BrownNoiseGenerator_Sf_SwigStatic_attributes,
    swig_BrownNoiseGenerator_Sf_SwigStatic_constants,
    swig_BrownNoiseGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BrownNoiseGenerator_bases[] = {0};
static const char *swig_BrownNoiseGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_BrownNoiseGenerator = { "BrownNoiseGenerator", "BrownNoiseGenerator", &SWIGTYPE_p_SoundWave__BrownNoiseGenerator,_proxy__wrap_new_BrownNoiseGenerator, swig_delete_BrownNoiseGenerator, swig_BrownNoiseGenerator_methods, swig_BrownNoiseGenerator_attributes, &swig_BrownNoiseGenerator_Sf_SwigStatic, swig_BrownNoiseGenerator_meta, swig_BrownNoiseGenerator_bases, swig_BrownNoiseGenerator_base_names };

static int _wrap_new_NoiseFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int arg2 ;
  SoundWave::NoiseFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::NoiseFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::NoiseFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::NoiseFilter",2,"int");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (SoundWave::NoiseFilter *)new SoundWave::NoiseFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__NoiseFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::NoiseFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::NoiseFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::NoiseFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::NoiseFilter *)new SoundWave::NoiseFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__NoiseFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::NoiseFilter",0,0)
  result = (SoundWave::NoiseFilter *)new SoundWave::NoiseFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__NoiseFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NoiseFilter__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_NoiseFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NoiseFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NoiseFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::NoiseFilter::NoiseFilter(float,int)\n"
    "    SoundWave::NoiseFilter::NoiseFilter(float)\n"
    "    SoundWave::NoiseFilter::NoiseFilter()\n");
  lua_error(L);return 0;
}


static int _wrap_NoiseFilter_dc_blocking_filter(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::dc_blocking_filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::dc_blocking_filter",1,"SoundWave::NoiseFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::dc_blocking_filter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseFilter,0))){
    SWIG_fail_ptr("NoiseFilter_dc_blocking_filter",1,SWIGTYPE_p_SoundWave__NoiseFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->dc_blocking_filter(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseFilter_smoothing_filter(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::smoothing_filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::smoothing_filter",1,"SoundWave::NoiseFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::smoothing_filter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseFilter,0))){
    SWIG_fail_ptr("NoiseFilter_smoothing_filter",1,SWIGTYPE_p_SoundWave__NoiseFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->smoothing_filter(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseFilter_setDCfiltConst(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::setDCfiltConst",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::setDCfiltConst",1,"SoundWave::NoiseFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::setDCfiltConst",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseFilter,0))){
    SWIG_fail_ptr("NoiseFilter_setDCfiltConst",1,SWIGTYPE_p_SoundWave__NoiseFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDCfiltConst(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseFilter_setSmoothLength(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::setSmoothLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::setSmoothLength",1,"SoundWave::NoiseFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::setSmoothLength",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseFilter,0))){
    SWIG_fail_ptr("NoiseFilter_setSmoothLength",1,SWIGTYPE_p_SoundWave__NoiseFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSmoothLength(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseFilter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::Tick",1,"SoundWave::NoiseFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseFilter,0))){
    SWIG_fail_ptr("NoiseFilter_Tick",1,SWIGTYPE_p_SoundWave__NoiseFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseFilter_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::Process",1,"SoundWave::NoiseFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::NoiseFilter::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::NoiseFilter::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseFilter,0))){
    SWIG_fail_ptr("NoiseFilter_Process",1,SWIGTYPE_p_SoundWave__NoiseFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseFilter_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseFilter_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseFilter_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseFilter::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseFilter::Process",1,"SoundWave::NoiseFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseFilter::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::NoiseFilter::Process",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseFilter,0))){
    SWIG_fail_ptr("NoiseFilter_Process",1,SWIGTYPE_p_SoundWave__NoiseFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseFilter_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseFilter_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__NoiseFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NoiseFilter_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__NoiseFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_NoiseFilter_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoiseFilter_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::NoiseFilter::Process(size_t,float *,float *)\n"
    "    SoundWave::NoiseFilter::Process(size_t,float *)\n");
  lua_error(L);return 0;
}


static void swig_delete_NoiseFilter(void *obj) {
SoundWave::NoiseFilter *arg1 = (SoundWave::NoiseFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NoiseFilter_methods[]= {
    { "dc_blocking_filter", _wrap_NoiseFilter_dc_blocking_filter},
    { "smoothing_filter", _wrap_NoiseFilter_smoothing_filter},
    { "setDCfiltConst", _wrap_NoiseFilter_setDCfiltConst},
    { "setSmoothLength", _wrap_NoiseFilter_setSmoothLength},
    { "Tick", _wrap_NoiseFilter_Tick},
    { "Process", _wrap_NoiseFilter_Process},
    {0,0}
};
static swig_lua_method swig_NoiseFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseFilter_Sf_SwigStatic = {
    "NoiseFilter",
    swig_NoiseFilter_Sf_SwigStatic_methods,
    swig_NoiseFilter_Sf_SwigStatic_attributes,
    swig_NoiseFilter_Sf_SwigStatic_constants,
    swig_NoiseFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseFilter_bases[] = {0};
static const char *swig_NoiseFilter_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseFilter = { "NoiseFilter", "NoiseFilter", &SWIGTYPE_p_SoundWave__NoiseFilter,_proxy__wrap_new_NoiseFilter, swig_delete_NoiseFilter, swig_NoiseFilter_methods, swig_NoiseFilter_attributes, &swig_NoiseFilter_Sf_SwigStatic, swig_NoiseFilter_meta, swig_NoiseFilter_bases, swig_NoiseFilter_base_names };

static int _wrap_BandlimitedOscillator_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  PolyBLEP *arg2 = (PolyBLEP *) 0 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::osc",1,"SoundWave::BandlimitedOscillator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::osc",2,"PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_osc_set",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PolyBLEP,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("BandlimitedOscillator_osc_set",2,SWIGTYPE_p_PolyBLEP);
  }
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  PolyBLEP *result = 0 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::osc",1,"SoundWave::BandlimitedOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_osc_get",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  result = (PolyBLEP *) ((arg1)->osc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PolyBLEP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandlimitedOscillator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  SoundWave::BandlimitedOscillator::Waveform arg2 ;
  double arg3 ;
  SoundWave::BandlimitedOscillator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::BandlimitedOscillator",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::BandlimitedOscillator",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::BandlimitedOscillator",2,"SoundWave::BandlimitedOscillator::Waveform");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::BandlimitedOscillator",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (SoundWave::BandlimitedOscillator::Waveform)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (SoundWave::BandlimitedOscillator *)new SoundWave::BandlimitedOscillator(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__BandlimitedOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandlimitedOscillator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  SoundWave::BandlimitedOscillator::Waveform arg2 ;
  SoundWave::BandlimitedOscillator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::BandlimitedOscillator",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::BandlimitedOscillator",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::BandlimitedOscillator",2,"SoundWave::BandlimitedOscillator::Waveform");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (SoundWave::BandlimitedOscillator::Waveform)(int)lua_tonumber(L, 2);
  result = (SoundWave::BandlimitedOscillator *)new SoundWave::BandlimitedOscillator(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__BandlimitedOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandlimitedOscillator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  SoundWave::BandlimitedOscillator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::BandlimitedOscillator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::BandlimitedOscillator",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (SoundWave::BandlimitedOscillator *)new SoundWave::BandlimitedOscillator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__BandlimitedOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandlimitedOscillator(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BandlimitedOscillator__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BandlimitedOscillator__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_BandlimitedOscillator__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BandlimitedOscillator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::BandlimitedOscillator::BandlimitedOscillator(double,SoundWave::BandlimitedOscillator::Waveform,double)\n"
    "    SoundWave::BandlimitedOscillator::BandlimitedOscillator(double,SoundWave::BandlimitedOscillator::Waveform)\n"
    "    SoundWave::BandlimitedOscillator::BandlimitedOscillator(double)\n");
  lua_error(L);return 0;
}


static int _wrap_BandlimitedOscillator_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setFrequency",1,"SoundWave::BandlimitedOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setFrequency",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_setFrequency",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setSampleRate",1,"SoundWave::BandlimitedOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setSampleRate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_setSampleRate",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_setWaveform(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  SoundWave::BandlimitedOscillator::Waveform arg2 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::setWaveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setWaveform",1,"SoundWave::BandlimitedOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setWaveform",2,"SoundWave::BandlimitedOscillator::Waveform");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_setWaveform",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  arg2 = (SoundWave::BandlimitedOscillator::Waveform)(int)lua_tonumber(L, 2);
  (arg1)->setWaveform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_setPulseWidth(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::setPulseWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setPulseWidth",1,"SoundWave::BandlimitedOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::setPulseWidth",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_setPulseWidth",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setPulseWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Tick",1,"SoundWave::BandlimitedOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_Tick",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  result = (double)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Tick",1,"SoundWave::BandlimitedOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_Tick",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__BandlimitedOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BandlimitedOscillator_Tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__BandlimitedOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BandlimitedOscillator_Tick__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BandlimitedOscillator_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::BandlimitedOscillator::Tick()\n"
    "    SoundWave::BandlimitedOscillator::Tick(double)\n");
  lua_error(L);return 0;
}


static int _wrap_BandlimitedOscillator_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Process",1,"SoundWave::BandlimitedOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_Process",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BandlimitedOscillator_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BandlimitedOscillator_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Process",1,"SoundWave::BandlimitedOscillator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_Process",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BandlimitedOscillator_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandlimitedOscillator_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__BandlimitedOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BandlimitedOscillator_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__BandlimitedOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BandlimitedOscillator_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BandlimitedOscillator_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::BandlimitedOscillator::Process(size_t,float *,float *)\n"
    "    SoundWave::BandlimitedOscillator::Process(float *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_BandlimitedOscillator_sync(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::BandlimitedOscillator::sync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::sync",1,"SoundWave::BandlimitedOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::BandlimitedOscillator::sync",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__BandlimitedOscillator,0))){
    SWIG_fail_ptr("BandlimitedOscillator_sync",1,SWIGTYPE_p_SoundWave__BandlimitedOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->sync(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BandlimitedOscillator(void *obj) {
SoundWave::BandlimitedOscillator *arg1 = (SoundWave::BandlimitedOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_BandlimitedOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BandlimitedOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BandlimitedOscillator_attributes[] = {
    { "osc", _wrap_BandlimitedOscillator_osc_get, _wrap_BandlimitedOscillator_osc_set },
    {0,0,0}
};
static swig_lua_method swig_BandlimitedOscillator_methods[]= {
    { "setFrequency", _wrap_BandlimitedOscillator_setFrequency},
    { "setSampleRate", _wrap_BandlimitedOscillator_setSampleRate},
    { "setWaveform", _wrap_BandlimitedOscillator_setWaveform},
    { "setPulseWidth", _wrap_BandlimitedOscillator_setPulseWidth},
    { "Tick", _wrap_BandlimitedOscillator_Tick},
    { "Process", _wrap_BandlimitedOscillator_Process},
    { "sync", _wrap_BandlimitedOscillator_sync},
    {0,0}
};
static swig_lua_method swig_BandlimitedOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BandlimitedOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BandlimitedOscillator_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("SINE", SoundWave::BandlimitedOscillator::SINE)},
    {SWIG_LUA_CONSTTAB_INT("COSINE", SoundWave::BandlimitedOscillator::COSINE)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGLE", SoundWave::BandlimitedOscillator::TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("SQUARE", SoundWave::BandlimitedOscillator::SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("RECTANGLE", SoundWave::BandlimitedOscillator::RECTANGLE)},
    {SWIG_LUA_CONSTTAB_INT("SAWTOOTH", SoundWave::BandlimitedOscillator::SAWTOOTH)},
    {SWIG_LUA_CONSTTAB_INT("RAMP", SoundWave::BandlimitedOscillator::RAMP)},
    {SWIG_LUA_CONSTTAB_INT("MODIFIED_TRIANGLE", SoundWave::BandlimitedOscillator::MODIFIED_TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("MODIFIED_SQUARE", SoundWave::BandlimitedOscillator::MODIFIED_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("HALF_WAVE_RECTIFIED_SINE", SoundWave::BandlimitedOscillator::HALF_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("FULL_WAVE_RECTIFIED_SINE", SoundWave::BandlimitedOscillator::FULL_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGULAR_PULSE", SoundWave::BandlimitedOscillator::TRIANGULAR_PULSE)},
    {SWIG_LUA_CONSTTAB_INT("TRAPEZOID_FIXED", SoundWave::BandlimitedOscillator::TRAPEZOID_FIXED)},
    {SWIG_LUA_CONSTTAB_INT("TRAPEZOID_VARIABLE", SoundWave::BandlimitedOscillator::TRAPEZOID_VARIABLE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BandlimitedOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BandlimitedOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BandlimitedOscillator_Sf_SwigStatic = {
    "BandlimitedOscillator",
    swig_BandlimitedOscillator_Sf_SwigStatic_methods,
    swig_BandlimitedOscillator_Sf_SwigStatic_attributes,
    swig_BandlimitedOscillator_Sf_SwigStatic_constants,
    swig_BandlimitedOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BandlimitedOscillator_bases[] = {0};
static const char *swig_BandlimitedOscillator_base_names[] = {0};
static swig_lua_class _wrap_class_BandlimitedOscillator = { "BandlimitedOscillator", "BandlimitedOscillator", &SWIGTYPE_p_SoundWave__BandlimitedOscillator,_proxy__wrap_new_BandlimitedOscillator, swig_delete_BandlimitedOscillator, swig_BandlimitedOscillator_methods, swig_BandlimitedOscillator_attributes, &swig_BandlimitedOscillator_Sf_SwigStatic, swig_BandlimitedOscillator_meta, swig_BandlimitedOscillator_bases, swig_BandlimitedOscillator_base_names };

static int _wrap_waveTable_topFreq_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::waveTable *arg1 = (SoundWave::waveTable *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::waveTable::topFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::waveTable::topFreq",1,"SoundWave::waveTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::waveTable::topFreq",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__waveTable,0))){
    SWIG_fail_ptr("waveTable_topFreq_set",1,SWIGTYPE_p_SoundWave__waveTable);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->topFreq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveTable_topFreq_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::waveTable *arg1 = (SoundWave::waveTable *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::waveTable::topFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::waveTable::topFreq",1,"SoundWave::waveTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__waveTable,0))){
    SWIG_fail_ptr("waveTable_topFreq_get",1,SWIGTYPE_p_SoundWave__waveTable);
  }
  
  result = (double) ((arg1)->topFreq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveTable_waveTableLen_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::waveTable *arg1 = (SoundWave::waveTable *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::waveTable::waveTableLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::waveTable::waveTableLen",1,"SoundWave::waveTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::waveTable::waveTableLen",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__waveTable,0))){
    SWIG_fail_ptr("waveTable_waveTableLen_set",1,SWIGTYPE_p_SoundWave__waveTable);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->waveTableLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveTable_waveTableLen_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::waveTable *arg1 = (SoundWave::waveTable *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::waveTable::waveTableLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::waveTable::waveTableLen",1,"SoundWave::waveTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__waveTable,0))){
    SWIG_fail_ptr("waveTable_waveTableLen_get",1,SWIGTYPE_p_SoundWave__waveTable);
  }
  
  result = (int) ((arg1)->waveTableLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveTable_waveTable_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::waveTable *arg1 = (SoundWave::waveTable *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::waveTable::waveTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::waveTable::waveTable",1,"SoundWave::waveTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::waveTable::waveTable",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__waveTable,0))){
    SWIG_fail_ptr("waveTable_waveTable_set",1,SWIGTYPE_p_SoundWave__waveTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("waveTable_waveTable_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->waveTable = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveTable_waveTable_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::waveTable *arg1 = (SoundWave::waveTable *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SoundWave::waveTable::waveTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::waveTable::waveTable",1,"SoundWave::waveTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__waveTable,0))){
    SWIG_fail_ptr("waveTable_waveTable_get",1,SWIGTYPE_p_SoundWave__waveTable);
  }
  
  result = (float *) ((arg1)->waveTable);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_waveTable(void *obj) {
SoundWave::waveTable *arg1 = (SoundWave::waveTable *) obj;
delete arg1;
}
static swig_lua_attribute swig_waveTable_attributes[] = {
    { "topFreq", _wrap_waveTable_topFreq_get, _wrap_waveTable_topFreq_set },
    { "waveTableLen", _wrap_waveTable_waveTableLen_get, _wrap_waveTable_waveTableLen_set },
    { "waveTable", _wrap_waveTable_waveTable_get, _wrap_waveTable_waveTable_set },
    {0,0,0}
};
static swig_lua_method swig_waveTable_methods[]= {
    {0,0}
};
static swig_lua_method swig_waveTable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_waveTable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_waveTable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_waveTable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_waveTable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_waveTable_Sf_SwigStatic = {
    "waveTable",
    swig_waveTable_Sf_SwigStatic_methods,
    swig_waveTable_Sf_SwigStatic_attributes,
    swig_waveTable_Sf_SwigStatic_constants,
    swig_waveTable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_waveTable_bases[] = {0};
static const char *swig_waveTable_base_names[] = {0};
static swig_lua_class _wrap_class_waveTable = { "waveTable", "waveTable", &SWIGTYPE_p_SoundWave__waveTable,0, swig_delete_waveTable, swig_waveTable_methods, swig_waveTable_attributes, &swig_waveTable_Sf_SwigStatic, swig_waveTable_meta, swig_waveTable_bases, swig_waveTable_base_names };

static int _wrap_numWaveTableSlots_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("SoundWave::numWaveTableSlots",0,0)
  result = (int)(int)SoundWave::numWaveTableSlots;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WaveTableOsc(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *result = 0 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::WaveTableOsc",0,0)
  result = (SoundWave::WaveTableOsc *)new SoundWave::WaveTableOsc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__WaveTableOsc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::setFrequency",1,"SoundWave::WaveTableOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::setFrequency",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_setFrequency",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_setPhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::setPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::setPhaseOffset",1,"SoundWave::WaveTableOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::setPhaseOffset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_setPhaseOffset",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_updatePhase(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::updatePhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::updatePhase",1,"SoundWave::WaveTableOsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_updatePhase",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  (arg1)->updatePhase();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_getOutput(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::getOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::getOutput",1,"SoundWave::WaveTableOsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_getOutput",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  result = (float)(arg1)->getOutput();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_getOutputMinusOffset(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::getOutputMinusOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::getOutputMinusOffset",1,"SoundWave::WaveTableOsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_getOutputMinusOffset",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  result = (float)(arg1)->getOutputMinusOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_addWaveTable(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  int arg2 ;
  std::vector< float > arg3 ;
  double arg4 ;
  std::vector< float > *argp3 ;
  int result;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::addWaveTable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::addWaveTable",1,"SoundWave::WaveTableOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::addWaveTable",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::WaveTableOsc::addWaveTable",3,"std::vector< float >");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::WaveTableOsc::addWaveTable",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_addWaveTable",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("WaveTableOsc_addWaveTable",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  result = (int)(arg1)->addWaveTable(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_SetPhase(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::SetPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::SetPhase",1,"SoundWave::WaveTableOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::SetPhase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_SetPhase",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  double result;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::Tick",1,"SoundWave::WaveTableOsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_Tick",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  result = (double)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::Tick",1,"SoundWave::WaveTableOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_Tick",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__WaveTableOsc, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_WaveTableOsc_Tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__WaveTableOsc, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WaveTableOsc_Tick__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WaveTableOsc_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::WaveTableOsc::Tick()\n"
    "    SoundWave::WaveTableOsc::Tick(double)\n");
  lua_error(L);return 0;
}


static int _wrap_WaveTableOsc_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",1,"SoundWave::WaveTableOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",1,"SoundWave::WaveTableOsc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_Process__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::Process",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",1,"SoundWave::WaveTableOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",5,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_Process__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SoundWave::WaveTableOsc::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",1,"SoundWave::WaveTableOsc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::WaveTableOsc::Process",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__WaveTableOsc,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",1,SWIGTYPE_p_SoundWave__WaveTableOsc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WaveTableOsc_Process",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveTableOsc_Process(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__WaveTableOsc, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WaveTableOsc_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__WaveTableOsc, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WaveTableOsc_Process__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__WaveTableOsc, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_WaveTableOsc_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__WaveTableOsc, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_WaveTableOsc_Process__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WaveTableOsc_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::WaveTableOsc::Process(size_t,float *,float *)\n"
    "    SoundWave::WaveTableOsc::Process(float *,size_t)\n"
    "    SoundWave::WaveTableOsc::Process(size_t,float *,float *,float *)\n"
    "    SoundWave::WaveTableOsc::Process(float *,float *,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_WaveTableOsc(void *obj) {
SoundWave::WaveTableOsc *arg1 = (SoundWave::WaveTableOsc *) obj;
delete arg1;
}
static int _proxy__wrap_new_WaveTableOsc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WaveTableOsc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WaveTableOsc_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WaveTableOsc_methods[]= {
    { "setFrequency", _wrap_WaveTableOsc_setFrequency},
    { "setPhaseOffset", _wrap_WaveTableOsc_setPhaseOffset},
    { "updatePhase", _wrap_WaveTableOsc_updatePhase},
    { "getOutput", _wrap_WaveTableOsc_getOutput},
    { "getOutputMinusOffset", _wrap_WaveTableOsc_getOutputMinusOffset},
    { "addWaveTable", _wrap_WaveTableOsc_addWaveTable},
    { "SetPhase", _wrap_WaveTableOsc_SetPhase},
    { "Tick", _wrap_WaveTableOsc_Tick},
    { "Process", _wrap_WaveTableOsc_Process},
    {0,0}
};
static swig_lua_method swig_WaveTableOsc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveTableOsc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveTableOsc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveTableOsc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WaveTableOsc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveTableOsc_Sf_SwigStatic = {
    "WaveTableOsc",
    swig_WaveTableOsc_Sf_SwigStatic_methods,
    swig_WaveTableOsc_Sf_SwigStatic_attributes,
    swig_WaveTableOsc_Sf_SwigStatic_constants,
    swig_WaveTableOsc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveTableOsc_bases[] = {0};
static const char *swig_WaveTableOsc_base_names[] = {0};
static swig_lua_class _wrap_class_WaveTableOsc = { "WaveTableOsc", "WaveTableOsc", &SWIGTYPE_p_SoundWave__WaveTableOsc,_proxy__wrap_new_WaveTableOsc, swig_delete_WaveTableOsc, swig_WaveTableOsc_methods, swig_WaveTableOsc_attributes, &swig_WaveTableOsc_Sf_SwigStatic, swig_WaveTableOsc_meta, swig_WaveTableOsc_bases, swig_WaveTableOsc_base_names };

static int _wrap_MakeSine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("SoundWave::MakeSine",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeSine",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeSine",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeSine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeSine",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::MakeSine",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeSine",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  SoundWave::MakeSine(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeSine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SoundWave::MakeSine",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeSine",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeSine",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeSine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeSine",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeSine",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  SoundWave::MakeSine(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeSine(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MakeSine__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MakeSine__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MakeSine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MakeSine(std::vector< float > &,size_t,float,float,float)\n"
    "    SoundWave::MakeSine(std::vector< float > &,size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_MakeSaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("SoundWave::MakeSaw",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeSaw",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeSaw",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeSaw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeSaw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::MakeSaw",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeSaw",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  SoundWave::MakeSaw(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeSaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SoundWave::MakeSaw",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeSaw",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeSaw",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeSaw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeSaw",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeSaw",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  SoundWave::MakeSaw(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeSaw(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MakeSaw__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MakeSaw__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MakeSaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MakeSaw(std::vector< float > &,size_t,float,float,float)\n"
    "    SoundWave::MakeSaw(std::vector< float > &,size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_MakeReverseSaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("SoundWave::MakeReverseSaw",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeReverseSaw",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeReverseSaw",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeReverseSaw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeReverseSaw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::MakeReverseSaw",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeReverseSaw",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  SoundWave::MakeReverseSaw(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeReverseSaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SoundWave::MakeReverseSaw",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeReverseSaw",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeReverseSaw",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeReverseSaw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeReverseSaw",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeReverseSaw",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  SoundWave::MakeReverseSaw(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeReverseSaw(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MakeReverseSaw__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MakeReverseSaw__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MakeReverseSaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MakeReverseSaw(std::vector< float > &,size_t,float,float,float)\n"
    "    SoundWave::MakeReverseSaw(std::vector< float > &,size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_MakeSquare__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("SoundWave::MakeSquare",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeSquare",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeSquare",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeSquare",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeSquare",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::MakeSquare",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeSquare",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  SoundWave::MakeSquare(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeSquare__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SoundWave::MakeSquare",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeSquare",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeSquare",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeSquare",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeSquare",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeSquare",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  SoundWave::MakeSquare(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeSquare(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MakeSquare__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MakeSquare__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MakeSquare'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MakeSquare(std::vector< float > &,size_t,float,float,float)\n"
    "    SoundWave::MakeSquare(std::vector< float > &,size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_MakeTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("SoundWave::MakeTriangle",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeTriangle",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeTriangle",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeTriangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeTriangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::MakeTriangle",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeTriangle",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  SoundWave::MakeTriangle(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SoundWave::MakeTriangle",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::MakeTriangle",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MakeTriangle",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MakeTriangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MakeTriangle",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MakeTriangle",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  SoundWave::MakeTriangle(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MakeTriangle(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MakeTriangle__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MakeTriangle__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MakeTriangle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MakeTriangle(std::vector< float > &,size_t,float,float,float)\n"
    "    SoundWave::MakeTriangle(std::vector< float > &,size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_clamp(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("SoundWave::clamp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::clamp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::clamp",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::clamp",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)SoundWave::clamp(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  ::RBJFilter *arg2 = (::RBJFilter *) 0 ;
  
  SWIG_check_num_args("SoundWave::Filter::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::filter",1,"SoundWave::Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::Filter::filter",2,"::RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_filter_set",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RBJFilter,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Filter_filter_set",2,SWIGTYPE_p_RBJFilter);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  ::RBJFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::Filter::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::filter",1,"SoundWave::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_filter_get",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  result = (::RBJFilter *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RBJFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Filter(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::FilterType arg1 ;
  float arg2 ;
  float arg3 ;
  SoundWave::Filter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::Filter::Filter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::Filter::Filter",1,"SoundWave::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::Filter::Filter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::Filter::Filter",3,"float");
  arg1 = (SoundWave::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (SoundWave::Filter *)new SoundWave::Filter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_UpdateCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  
  SWIG_check_num_args("SoundWave::Filter::UpdateCoefficients",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::UpdateCoefficients",1,"SoundWave::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_UpdateCoefficients",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  (arg1)->UpdateCoefficients();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::Filter::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::SetCutoff",1,"SoundWave::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::Filter::SetCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_SetCutoff",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_SetQ(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::Filter::SetQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::SetQ",1,"SoundWave::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::Filter::SetQ",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_SetQ",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_GetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::Filter::GetCutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::GetCutoff",1,"SoundWave::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_GetCutoff",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  result = (float)(arg1)->GetCutoff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_GetQ(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::Filter::GetQ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::GetQ",1,"SoundWave::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_GetQ",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  result = (float)(arg1)->GetQ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_Process(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  float *arg2 = (float *) 0 ;
  uint32_t arg3 ;
  
  SWIG_check_num_args("SoundWave::Filter::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::Process",1,"SoundWave::Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::Filter::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::Filter::Process",3,"uint32_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_Process",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Filter_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t const)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Filter *arg1 = (SoundWave::Filter *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::Filter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::Filter::Tick",1,"SoundWave::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::Filter::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__Filter,0))){
    SWIG_fail_ptr("Filter_Tick",1,SWIGTYPE_p_SoundWave__Filter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Filter(void *obj) {
SoundWave::Filter *arg1 = (SoundWave::Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Filter_attributes[] = {
    { "filter", _wrap_Filter_filter_get, _wrap_Filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Filter_methods[]= {
    { "UpdateCoefficients", _wrap_Filter_UpdateCoefficients},
    { "SetCutoff", _wrap_Filter_SetCutoff},
    { "SetQ", _wrap_Filter_SetQ},
    { "GetCutoff", _wrap_Filter_GetCutoff},
    { "GetQ", _wrap_Filter_GetQ},
    { "Process", _wrap_Filter_Process},
    { "Tick", _wrap_Filter_Tick},
    {0,0}
};
static swig_lua_method swig_Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Filter_Sf_SwigStatic = {
    "Filter",
    swig_Filter_Sf_SwigStatic_methods,
    swig_Filter_Sf_SwigStatic_attributes,
    swig_Filter_Sf_SwigStatic_constants,
    swig_Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Filter_bases[] = {0};
static const char *swig_Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Filter = { "Filter", "Filter", &SWIGTYPE_p_SoundWave__Filter,_proxy__wrap_new_Filter, swig_delete_Filter, swig_Filter_methods, swig_Filter_attributes, &swig_Filter_Sf_SwigStatic, swig_Filter_meta, swig_Filter_bases, swig_Filter_base_names };

static int _wrap_new_RBJLowPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJLowPassFilter::RBJLowPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJLowPassFilter::RBJLowPassFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJLowPassFilter::RBJLowPassFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJLowPassFilter *)new SoundWave::RBJLowPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJLowPassFilter::RBJLowPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJLowPassFilter::RBJLowPassFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJLowPassFilter *)new SoundWave::RBJLowPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJLowPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJLowPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJLowPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJLowPassFilter::RBJLowPassFilter(float,float)\n"
    "    SoundWave::RBJLowPassFilter::RBJLowPassFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJLowPassFilter(void *obj) {
SoundWave::RBJLowPassFilter *arg1 = (SoundWave::RBJLowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJLowPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJLowPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJLowPassFilter_Sf_SwigStatic = {
    "RBJLowPassFilter",
    swig_RBJLowPassFilter_Sf_SwigStatic_methods,
    swig_RBJLowPassFilter_Sf_SwigStatic_attributes,
    swig_RBJLowPassFilter_Sf_SwigStatic_constants,
    swig_RBJLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJLowPassFilter_bases[] = {0,0};
static const char *swig_RBJLowPassFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJLowPassFilter = { "RBJLowPassFilter", "RBJLowPassFilter", &SWIGTYPE_p_SoundWave__RBJLowPassFilter,_proxy__wrap_new_RBJLowPassFilter, swig_delete_RBJLowPassFilter, swig_RBJLowPassFilter_methods, swig_RBJLowPassFilter_attributes, &swig_RBJLowPassFilter_Sf_SwigStatic, swig_RBJLowPassFilter_meta, swig_RBJLowPassFilter_bases, swig_RBJLowPassFilter_base_names };

static int _wrap_new_RBJHighPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJHighPassFilter::RBJHighPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJHighPassFilter::RBJHighPassFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJHighPassFilter::RBJHighPassFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJHighPassFilter *)new SoundWave::RBJHighPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJHighPassFilter::RBJHighPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJHighPassFilter::RBJHighPassFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJHighPassFilter *)new SoundWave::RBJHighPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJHighPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJHighPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJHighPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJHighPassFilter::RBJHighPassFilter(float,float)\n"
    "    SoundWave::RBJHighPassFilter::RBJHighPassFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJHighPassFilter(void *obj) {
SoundWave::RBJHighPassFilter *arg1 = (SoundWave::RBJHighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJHighPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJHighPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJHighPassFilter_Sf_SwigStatic = {
    "RBJHighPassFilter",
    swig_RBJHighPassFilter_Sf_SwigStatic_methods,
    swig_RBJHighPassFilter_Sf_SwigStatic_attributes,
    swig_RBJHighPassFilter_Sf_SwigStatic_constants,
    swig_RBJHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJHighPassFilter_bases[] = {0,0};
static const char *swig_RBJHighPassFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJHighPassFilter = { "RBJHighPassFilter", "RBJHighPassFilter", &SWIGTYPE_p_SoundWave__RBJHighPassFilter,_proxy__wrap_new_RBJHighPassFilter, swig_delete_RBJHighPassFilter, swig_RBJHighPassFilter_methods, swig_RBJHighPassFilter_attributes, &swig_RBJHighPassFilter_Sf_SwigStatic, swig_RBJHighPassFilter_meta, swig_RBJHighPassFilter_bases, swig_RBJHighPassFilter_base_names };

static int _wrap_new_RBJBandPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJBandPassFilter::RBJBandPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJBandPassFilter::RBJBandPassFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJBandPassFilter::RBJBandPassFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJBandPassFilter *)new SoundWave::RBJBandPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBandPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJBandPassFilter::RBJBandPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJBandPassFilter::RBJBandPassFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJBandPassFilter *)new SoundWave::RBJBandPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBandPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJBandPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJBandPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJBandPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJBandPassFilter::RBJBandPassFilter(float,float)\n"
    "    SoundWave::RBJBandPassFilter::RBJBandPassFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJBandPassFilter(void *obj) {
SoundWave::RBJBandPassFilter *arg1 = (SoundWave::RBJBandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJBandPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJBandPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJBandPassFilter_Sf_SwigStatic = {
    "RBJBandPassFilter",
    swig_RBJBandPassFilter_Sf_SwigStatic_methods,
    swig_RBJBandPassFilter_Sf_SwigStatic_attributes,
    swig_RBJBandPassFilter_Sf_SwigStatic_constants,
    swig_RBJBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJBandPassFilter_bases[] = {0,0};
static const char *swig_RBJBandPassFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJBandPassFilter = { "RBJBandPassFilter", "RBJBandPassFilter", &SWIGTYPE_p_SoundWave__RBJBandPassFilter,_proxy__wrap_new_RBJBandPassFilter, swig_delete_RBJBandPassFilter, swig_RBJBandPassFilter_methods, swig_RBJBandPassFilter_attributes, &swig_RBJBandPassFilter_Sf_SwigStatic, swig_RBJBandPassFilter_meta, swig_RBJBandPassFilter_bases, swig_RBJBandPassFilter_base_names };

static int _wrap_new_RBJAllPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJAllPassFilter::RBJAllPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJAllPassFilter::RBJAllPassFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJAllPassFilter::RBJAllPassFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJAllPassFilter *)new SoundWave::RBJAllPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJAllPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJAllPassFilter::RBJAllPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJAllPassFilter::RBJAllPassFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJAllPassFilter *)new SoundWave::RBJAllPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJAllPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJAllPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJAllPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJAllPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJAllPassFilter::RBJAllPassFilter(float,float)\n"
    "    SoundWave::RBJAllPassFilter::RBJAllPassFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJAllPassFilter(void *obj) {
SoundWave::RBJAllPassFilter *arg1 = (SoundWave::RBJAllPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJAllPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJAllPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJAllPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJAllPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJAllPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJAllPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJAllPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJAllPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJAllPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJAllPassFilter_Sf_SwigStatic = {
    "RBJAllPassFilter",
    swig_RBJAllPassFilter_Sf_SwigStatic_methods,
    swig_RBJAllPassFilter_Sf_SwigStatic_attributes,
    swig_RBJAllPassFilter_Sf_SwigStatic_constants,
    swig_RBJAllPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJAllPassFilter_bases[] = {0,0};
static const char *swig_RBJAllPassFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJAllPassFilter = { "RBJAllPassFilter", "RBJAllPassFilter", &SWIGTYPE_p_SoundWave__RBJAllPassFilter,_proxy__wrap_new_RBJAllPassFilter, swig_delete_RBJAllPassFilter, swig_RBJAllPassFilter_methods, swig_RBJAllPassFilter_attributes, &swig_RBJAllPassFilter_Sf_SwigStatic, swig_RBJAllPassFilter_meta, swig_RBJAllPassFilter_bases, swig_RBJAllPassFilter_base_names };

static int _wrap_new_RBJNotchFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJNotchFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJNotchFilter::RBJNotchFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJNotchFilter::RBJNotchFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJNotchFilter::RBJNotchFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJNotchFilter *)new SoundWave::RBJNotchFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJNotchFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJNotchFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJNotchFilter::RBJNotchFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJNotchFilter::RBJNotchFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJNotchFilter *)new SoundWave::RBJNotchFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJNotchFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJNotchFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJNotchFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJNotchFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJNotchFilter::RBJNotchFilter(float,float)\n"
    "    SoundWave::RBJNotchFilter::RBJNotchFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJNotchFilter(void *obj) {
SoundWave::RBJNotchFilter *arg1 = (SoundWave::RBJNotchFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJNotchFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJNotchFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJNotchFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJNotchFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJNotchFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJNotchFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJNotchFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJNotchFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJNotchFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJNotchFilter_Sf_SwigStatic = {
    "RBJNotchFilter",
    swig_RBJNotchFilter_Sf_SwigStatic_methods,
    swig_RBJNotchFilter_Sf_SwigStatic_attributes,
    swig_RBJNotchFilter_Sf_SwigStatic_constants,
    swig_RBJNotchFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJNotchFilter_bases[] = {0,0};
static const char *swig_RBJNotchFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJNotchFilter = { "RBJNotchFilter", "RBJNotchFilter", &SWIGTYPE_p_SoundWave__RBJNotchFilter,_proxy__wrap_new_RBJNotchFilter, swig_delete_RBJNotchFilter, swig_RBJNotchFilter_methods, swig_RBJNotchFilter_attributes, &swig_RBJNotchFilter_Sf_SwigStatic, swig_RBJNotchFilter_meta, swig_RBJNotchFilter_bases, swig_RBJNotchFilter_base_names };

static int _wrap_new_RBJPeakFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJPeakFilter::RBJPeakFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJPeakFilter::RBJPeakFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJPeakFilter::RBJPeakFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJPeakFilter *)new SoundWave::RBJPeakFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJPeakFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJPeakFilter::RBJPeakFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJPeakFilter::RBJPeakFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJPeakFilter *)new SoundWave::RBJPeakFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJPeakFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJPeakFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJPeakFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJPeakFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJPeakFilter::RBJPeakFilter(float,float)\n"
    "    SoundWave::RBJPeakFilter::RBJPeakFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJPeakFilter(void *obj) {
SoundWave::RBJPeakFilter *arg1 = (SoundWave::RBJPeakFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJPeakFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJPeakFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJPeakFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJPeakFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJPeakFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJPeakFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJPeakFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJPeakFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJPeakFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJPeakFilter_Sf_SwigStatic = {
    "RBJPeakFilter",
    swig_RBJPeakFilter_Sf_SwigStatic_methods,
    swig_RBJPeakFilter_Sf_SwigStatic_attributes,
    swig_RBJPeakFilter_Sf_SwigStatic_constants,
    swig_RBJPeakFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJPeakFilter_bases[] = {0,0};
static const char *swig_RBJPeakFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJPeakFilter = { "RBJPeakFilter", "RBJPeakFilter", &SWIGTYPE_p_SoundWave__RBJPeakFilter,_proxy__wrap_new_RBJPeakFilter, swig_delete_RBJPeakFilter, swig_RBJPeakFilter_methods, swig_RBJPeakFilter_attributes, &swig_RBJPeakFilter_Sf_SwigStatic, swig_RBJPeakFilter_meta, swig_RBJPeakFilter_bases, swig_RBJPeakFilter_base_names };

static int _wrap_new_RBJLowShelfFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJLowShelfFilter::RBJLowShelfFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJLowShelfFilter::RBJLowShelfFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJLowShelfFilter::RBJLowShelfFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJLowShelfFilter *)new SoundWave::RBJLowShelfFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowShelfFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJLowShelfFilter::RBJLowShelfFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJLowShelfFilter::RBJLowShelfFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJLowShelfFilter *)new SoundWave::RBJLowShelfFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowShelfFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJLowShelfFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJLowShelfFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJLowShelfFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJLowShelfFilter::RBJLowShelfFilter(float,float)\n"
    "    SoundWave::RBJLowShelfFilter::RBJLowShelfFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJLowShelfFilter(void *obj) {
SoundWave::RBJLowShelfFilter *arg1 = (SoundWave::RBJLowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJLowShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJLowShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJLowShelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJLowShelfFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJLowShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJLowShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJLowShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJLowShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJLowShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJLowShelfFilter_Sf_SwigStatic = {
    "RBJLowShelfFilter",
    swig_RBJLowShelfFilter_Sf_SwigStatic_methods,
    swig_RBJLowShelfFilter_Sf_SwigStatic_attributes,
    swig_RBJLowShelfFilter_Sf_SwigStatic_constants,
    swig_RBJLowShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJLowShelfFilter_bases[] = {0,0};
static const char *swig_RBJLowShelfFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJLowShelfFilter = { "RBJLowShelfFilter", "RBJLowShelfFilter", &SWIGTYPE_p_SoundWave__RBJLowShelfFilter,_proxy__wrap_new_RBJLowShelfFilter, swig_delete_RBJLowShelfFilter, swig_RBJLowShelfFilter_methods, swig_RBJLowShelfFilter_attributes, &swig_RBJLowShelfFilter_Sf_SwigStatic, swig_RBJLowShelfFilter_meta, swig_RBJLowShelfFilter_bases, swig_RBJLowShelfFilter_base_names };

static int _wrap_new_RBJHighShelfFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SoundWave::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJHighShelfFilter::RBJHighShelfFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJHighShelfFilter::RBJHighShelfFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::RBJHighShelfFilter::RBJHighShelfFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::RBJHighShelfFilter *)new SoundWave::RBJHighShelfFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighShelfFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SoundWave::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::RBJHighShelfFilter::RBJHighShelfFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::RBJHighShelfFilter::RBJHighShelfFilter",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (SoundWave::RBJHighShelfFilter *)new SoundWave::RBJHighShelfFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighShelfFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJHighShelfFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJHighShelfFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJHighShelfFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::RBJHighShelfFilter::RBJHighShelfFilter(float,float)\n"
    "    SoundWave::RBJHighShelfFilter::RBJHighShelfFilter(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJHighShelfFilter(void *obj) {
SoundWave::RBJHighShelfFilter *arg1 = (SoundWave::RBJHighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJHighShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJHighShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJHighShelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJHighShelfFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJHighShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJHighShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJHighShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJHighShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJHighShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJHighShelfFilter_Sf_SwigStatic = {
    "RBJHighShelfFilter",
    swig_RBJHighShelfFilter_Sf_SwigStatic_methods,
    swig_RBJHighShelfFilter_Sf_SwigStatic_attributes,
    swig_RBJHighShelfFilter_Sf_SwigStatic_constants,
    swig_RBJHighShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJHighShelfFilter_bases[] = {0,0};
static const char *swig_RBJHighShelfFilter_base_names[] = {"SoundWave::Filter *",0};
static swig_lua_class _wrap_class_RBJHighShelfFilter = { "RBJHighShelfFilter", "RBJHighShelfFilter", &SWIGTYPE_p_SoundWave__RBJHighShelfFilter,_proxy__wrap_new_RBJHighShelfFilter, swig_delete_RBJHighShelfFilter, swig_RBJHighShelfFilter_methods, swig_RBJHighShelfFilter_attributes, &swig_RBJHighShelfFilter_Sf_SwigStatic, swig_RBJHighShelfFilter_meta, swig_RBJHighShelfFilter_bases, swig_RBJHighShelfFilter_base_names };

static int _wrap_CRingBuffer_ring_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  RingBuffer *arg2 = (RingBuffer *) 0 ;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::ring",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::ring",1,"SoundWave::CRingBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::CRingBuffer::ring",2,"RingBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_ring_set",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RingBuffer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CRingBuffer_ring_set",2,SWIGTYPE_p_RingBuffer);
  }
  
  if (arg1) (arg1)->ring = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_ring_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  RingBuffer *result = 0 ;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::ring",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::ring",1,"SoundWave::CRingBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_ring_get",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  result = (RingBuffer *) ((arg1)->ring);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RingBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CRingBuffer(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SoundWave::CRingBuffer *result = 0 ;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::CRingBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::CRingBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (SoundWave::CRingBuffer *)new SoundWave::CRingBuffer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__CRingBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::resize",1,"SoundWave::CRingBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::CRingBuffer::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_resize",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_clear(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::clear",1,"SoundWave::CRingBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_clear",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_getSize(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::getSize",1,"SoundWave::CRingBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_getSize",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  result = ((SoundWave::CRingBuffer const *)arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_getAvailableWrite(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::getAvailableWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::getAvailableWrite",1,"SoundWave::CRingBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_getAvailableWrite",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  result = ((SoundWave::CRingBuffer const *)arg1)->getAvailableWrite();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_getAvailableRead(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::getAvailableRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::getAvailableRead",1,"SoundWave::CRingBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_getAvailableRead",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  result = ((SoundWave::CRingBuffer const *)arg1)->getAvailableRead();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_write(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::write",1,"SoundWave::CRingBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::CRingBuffer::write",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::CRingBuffer::write",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_write",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CRingBuffer_write",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)(arg1)->write((float const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRingBuffer_read(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::CRingBuffer::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::CRingBuffer::read",1,"SoundWave::CRingBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::CRingBuffer::read",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::CRingBuffer::read",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__CRingBuffer,0))){
    SWIG_fail_ptr("CRingBuffer_read",1,SWIGTYPE_p_SoundWave__CRingBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CRingBuffer_read",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)(arg1)->read(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CRingBuffer(void *obj) {
SoundWave::CRingBuffer *arg1 = (SoundWave::CRingBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_CRingBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CRingBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CRingBuffer_attributes[] = {
    { "ring", _wrap_CRingBuffer_ring_get, _wrap_CRingBuffer_ring_set },
    {0,0,0}
};
static swig_lua_method swig_CRingBuffer_methods[]= {
    { "resize", _wrap_CRingBuffer_resize},
    { "clear", _wrap_CRingBuffer_clear},
    { "getSize", _wrap_CRingBuffer_getSize},
    { "getAvailableWrite", _wrap_CRingBuffer_getAvailableWrite},
    { "getAvailableRead", _wrap_CRingBuffer_getAvailableRead},
    { "write", _wrap_CRingBuffer_write},
    { "read", _wrap_CRingBuffer_read},
    {0,0}
};
static swig_lua_method swig_CRingBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CRingBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CRingBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CRingBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CRingBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CRingBuffer_Sf_SwigStatic = {
    "CRingBuffer",
    swig_CRingBuffer_Sf_SwigStatic_methods,
    swig_CRingBuffer_Sf_SwigStatic_attributes,
    swig_CRingBuffer_Sf_SwigStatic_constants,
    swig_CRingBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CRingBuffer_bases[] = {0};
static const char *swig_CRingBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_CRingBuffer = { "CRingBuffer", "CRingBuffer", &SWIGTYPE_p_SoundWave__CRingBuffer,_proxy__wrap_new_CRingBuffer, swig_delete_CRingBuffer, swig_CRingBuffer_methods, swig_CRingBuffer_attributes, &swig_CRingBuffer_Sf_SwigStatic, swig_CRingBuffer_meta, swig_CRingBuffer_bases, swig_CRingBuffer_base_names };

static int _wrap_NoiseSamples_noise_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  ::NoiseGenerator *arg2 = (::NoiseGenerator *) 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::noise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::noise",1,"SoundWave::NoiseSamples *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::NoiseSamples::noise",2,"::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_noise_set",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NoiseGenerator,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("NoiseSamples_noise_set",2,SWIGTYPE_p_NoiseGenerator);
  }
  
  if (arg1) (arg1)->noise = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_noise_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  ::NoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::noise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::noise",1,"SoundWave::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_noise_get",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  result = (::NoiseGenerator *) ((arg1)->noise);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NoiseGenerator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_type_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  SoundWave::NoiseType arg2 ;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::type",1,"SoundWave::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseSamples::type",2,"SoundWave::NoiseType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_type_set",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  arg2 = (SoundWave::NoiseType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_type_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  SoundWave::NoiseType result;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::type",1,"SoundWave::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_type_get",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  result = (SoundWave::NoiseType) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::sampleRate",1,"SoundWave::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseSamples::sampleRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_sampleRate_set",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::sampleRate",1,"SoundWave::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_sampleRate_get",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  result = (int) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_channels_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::channels",1,"SoundWave::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseSamples::channels",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_channels_set",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->channels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_channels_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  int result;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::channels",1,"SoundWave::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_channels_get",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  result = (int) ((arg1)->channels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseSamples(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseType arg1 ;
  int arg2 ;
  int arg3 ;
  SoundWave::NoiseSamples *result = 0 ;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::NoiseSamples",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::NoiseSamples",1,"SoundWave::NoiseType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseSamples::NoiseSamples",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::NoiseSamples::NoiseSamples",3,"int");
  arg1 = (SoundWave::NoiseType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (SoundWave::NoiseSamples *)new SoundWave::NoiseSamples(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__NoiseSamples,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_produce(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) 0 ;
  float arg2 ;
  Std::StdVector< float > result;
  
  SWIG_check_num_args("SoundWave::NoiseSamples::produce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::NoiseSamples::produce",1,"SoundWave::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::NoiseSamples::produce",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_produce",1,SWIGTYPE_p_SoundWave__NoiseSamples);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->produce(arg2);
  {
    Std::StdVector< float > * resultptr = new Std::StdVector< float >((const Std::StdVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseSamples(void *obj) {
SoundWave::NoiseSamples *arg1 = (SoundWave::NoiseSamples *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseSamples(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseSamples);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseSamples_attributes[] = {
    { "noise", _wrap_NoiseSamples_noise_get, _wrap_NoiseSamples_noise_set },
    { "type", _wrap_NoiseSamples_type_get, _wrap_NoiseSamples_type_set },
    { "sampleRate", _wrap_NoiseSamples_sampleRate_get, _wrap_NoiseSamples_sampleRate_set },
    { "channels", _wrap_NoiseSamples_channels_get, _wrap_NoiseSamples_channels_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseSamples_methods[]= {
    { "produce", _wrap_NoiseSamples_produce},
    {0,0}
};
static swig_lua_method swig_NoiseSamples_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseSamples_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseSamples_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseSamples_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseSamples_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseSamples_Sf_SwigStatic = {
    "NoiseSamples",
    swig_NoiseSamples_Sf_SwigStatic_methods,
    swig_NoiseSamples_Sf_SwigStatic_attributes,
    swig_NoiseSamples_Sf_SwigStatic_constants,
    swig_NoiseSamples_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseSamples_bases[] = {0};
static const char *swig_NoiseSamples_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseSamples = { "NoiseSamples", "NoiseSamples", &SWIGTYPE_p_SoundWave__NoiseSamples,_proxy__wrap_new_NoiseSamples, swig_delete_NoiseSamples, swig_NoiseSamples_methods, swig_NoiseSamples_attributes, &swig_NoiseSamples_Sf_SwigStatic, swig_NoiseSamples_meta, swig_NoiseSamples_bases, swig_NoiseSamples_base_names };

static int _wrap_MoogLadderFilter_moog_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  LadderFilterBase *arg2 = (LadderFilterBase *) 0 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::moog",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::moog",1,"SoundWave::MoogLadderFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::moog",2,"LadderFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_moog_set",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LadderFilterBase,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MoogLadderFilter_moog_set",2,SWIGTYPE_p_LadderFilterBase);
  }
  
  if (arg1) (arg1)->moog = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_moog_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  LadderFilterBase *result = 0 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::moog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::moog",1,"SoundWave::MoogLadderFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_moog_get",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  result = (LadderFilterBase *) ((arg1)->moog);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LadderFilterBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::sr",1,"SoundWave::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_sr_set",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::sr",1,"SoundWave::MoogLadderFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_sr_get",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogLadderFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogModelType arg1 ;
  float arg2 ;
  SoundWave::MoogLadderFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::MoogLadderFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::MoogLadderFilter",1,"SoundWave::MoogModelType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::MoogLadderFilter",2,"float");
  arg1 = (SoundWave::MoogModelType)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SoundWave::MoogLadderFilter *)new SoundWave::MoogLadderFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__MoogLadderFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogLadderFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogModelType arg1 ;
  SoundWave::MoogLadderFilter *result = 0 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::MoogLadderFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::MoogLadderFilter",1,"SoundWave::MoogModelType");
  arg1 = (SoundWave::MoogModelType)(int)lua_tonumber(L, 1);
  result = (SoundWave::MoogLadderFilter *)new SoundWave::MoogLadderFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__MoogLadderFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogLadderFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MoogLadderFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MoogLadderFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MoogLadderFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MoogLadderFilter::MoogLadderFilter(SoundWave::MoogModelType,float)\n"
    "    SoundWave::MoogLadderFilter::MoogLadderFilter(SoundWave::MoogModelType)\n");
  lua_error(L);return 0;
}


static int _wrap_MoogLadderFilter_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  uint32_t arg3 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Process",1,"SoundWave::MoogLadderFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Process",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Process",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MoogLadderFilter_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  uint32_t arg4 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Process",1,"SoundWave::MoogLadderFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Process",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Process",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Process",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Process",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MoogLadderFilter_Process",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MoogLadderFilter_Process",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MoogLadderFilter_Process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MoogLadderFilter_Process__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MoogLadderFilter_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MoogLadderFilter::Process(float *,uint32_t)\n"
    "    SoundWave::MoogLadderFilter::Process(float *,float *,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_MoogLadderFilter_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::SetResonance",1,"SoundWave::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::SetResonance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_SetResonance",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::SetCutoff",1,"SoundWave::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::SetCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_SetCutoff",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",1,"SoundWave::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (float)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",1,"SoundWave::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (float)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",1,"SoundWave::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::MoogLadderFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",1,"SoundWave::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::MoogLadderFilter::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_SoundWave__MoogLadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MoogLadderFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MoogLadderFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MoogLadderFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MoogLadderFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MoogLadderFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::MoogLadderFilter::Tick(float,float,float,float)\n"
    "    SoundWave::MoogLadderFilter::Tick(float,float,float)\n"
    "    SoundWave::MoogLadderFilter::Tick(float,float)\n"
    "    SoundWave::MoogLadderFilter::Tick(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_MoogLadderFilter(void *obj) {
SoundWave::MoogLadderFilter *arg1 = (SoundWave::MoogLadderFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoogLadderFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoogLadderFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoogLadderFilter_attributes[] = {
    { "moog", _wrap_MoogLadderFilter_moog_get, _wrap_MoogLadderFilter_moog_set },
    { "sr", _wrap_MoogLadderFilter_sr_get, _wrap_MoogLadderFilter_sr_set },
    {0,0,0}
};
static swig_lua_method swig_MoogLadderFilter_methods[]= {
    { "Process", _wrap_MoogLadderFilter_Process},
    { "SetResonance", _wrap_MoogLadderFilter_SetResonance},
    { "SetCutoff", _wrap_MoogLadderFilter_SetCutoff},
    { "Tick", _wrap_MoogLadderFilter_Tick},
    {0,0}
};
static swig_lua_method swig_MoogLadderFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoogLadderFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoogLadderFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoogLadderFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoogLadderFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoogLadderFilter_Sf_SwigStatic = {
    "MoogLadderFilter",
    swig_MoogLadderFilter_Sf_SwigStatic_methods,
    swig_MoogLadderFilter_Sf_SwigStatic_attributes,
    swig_MoogLadderFilter_Sf_SwigStatic_constants,
    swig_MoogLadderFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoogLadderFilter_bases[] = {0};
static const char *swig_MoogLadderFilter_base_names[] = {0};
static swig_lua_class _wrap_class_MoogLadderFilter = { "MoogLadderFilter", "MoogLadderFilter", &SWIGTYPE_p_SoundWave__MoogLadderFilter,_proxy__wrap_new_MoogLadderFilter, swig_delete_MoogLadderFilter, swig_MoogLadderFilter_methods, swig_MoogLadderFilter_attributes, &swig_MoogLadderFilter_Sf_SwigStatic, swig_MoogLadderFilter_meta, swig_MoogLadderFilter_bases, swig_MoogLadderFilter_base_names };

static int _wrap_tp_coeffs_a0_set(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("tp_coeffs::a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::a0",1,"tp_coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tp_coeffs::a0",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_a0_set",1,SWIGTYPE_p_tp_coeffs);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_a0_get(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("tp_coeffs::a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::a0",1,"tp_coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_a0_get",1,SWIGTYPE_p_tp_coeffs);
  }
  
  result = (coef_size_t) ((arg1)->a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_a1_set(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("tp_coeffs::a1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::a1",1,"tp_coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tp_coeffs::a1",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_a1_set",1,SWIGTYPE_p_tp_coeffs);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_a1_get(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("tp_coeffs::a1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::a1",1,"tp_coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_a1_get",1,SWIGTYPE_p_tp_coeffs);
  }
  
  result = (coef_size_t) ((arg1)->a1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_a2_set(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("tp_coeffs::a2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::a2",1,"tp_coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tp_coeffs::a2",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_a2_set",1,SWIGTYPE_p_tp_coeffs);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->a2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_a2_get(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("tp_coeffs::a2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::a2",1,"tp_coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_a2_get",1,SWIGTYPE_p_tp_coeffs);
  }
  
  result = (coef_size_t) ((arg1)->a2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("tp_coeffs::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::b1",1,"tp_coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tp_coeffs::b1",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_b1_set",1,SWIGTYPE_p_tp_coeffs);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("tp_coeffs::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::b1",1,"tp_coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_b1_get",1,SWIGTYPE_p_tp_coeffs);
  }
  
  result = (coef_size_t) ((arg1)->b1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_b2_set(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("tp_coeffs::b2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::b2",1,"tp_coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tp_coeffs::b2",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_b2_set",1,SWIGTYPE_p_tp_coeffs);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->b2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_b2_get(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("tp_coeffs::b2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::b2",1,"tp_coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_b2_get",1,SWIGTYPE_p_tp_coeffs);
  }
  
  result = (coef_size_t) ((arg1)->b2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_c0_set(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("tp_coeffs::c0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::c0",1,"tp_coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tp_coeffs::c0",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_c0_set",1,SWIGTYPE_p_tp_coeffs);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->c0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_c0_get(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("tp_coeffs::c0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::c0",1,"tp_coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_c0_get",1,SWIGTYPE_p_tp_coeffs);
  }
  
  result = (coef_size_t) ((arg1)->c0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_d0_set(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("tp_coeffs::d0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::d0",1,"tp_coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tp_coeffs::d0",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_d0_set",1,SWIGTYPE_p_tp_coeffs);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->d0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp_coeffs_d0_get(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *arg1 = (tp_coeffs *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("tp_coeffs::d0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tp_coeffs::d0",1,"tp_coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tp_coeffs,0))){
    SWIG_fail_ptr("tp_coeffs_d0_get",1,SWIGTYPE_p_tp_coeffs);
  }
  
  result = (coef_size_t) ((arg1)->d0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_tp_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("tp_coeffs::tp_coeffs",0,0)
  result = (tp_coeffs *)new tp_coeffs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_tp_coeffs(void *obj) {
tp_coeffs *arg1 = (tp_coeffs *) obj;
delete arg1;
}
static int _proxy__wrap_new_tp_coeffs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_tp_coeffs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_tp_coeffs_attributes[] = {
    { "a0", _wrap_tp_coeffs_a0_get, _wrap_tp_coeffs_a0_set },
    { "a1", _wrap_tp_coeffs_a1_get, _wrap_tp_coeffs_a1_set },
    { "a2", _wrap_tp_coeffs_a2_get, _wrap_tp_coeffs_a2_set },
    { "b1", _wrap_tp_coeffs_b1_get, _wrap_tp_coeffs_b1_set },
    { "b2", _wrap_tp_coeffs_b2_get, _wrap_tp_coeffs_b2_set },
    { "c0", _wrap_tp_coeffs_c0_get, _wrap_tp_coeffs_c0_set },
    { "d0", _wrap_tp_coeffs_d0_get, _wrap_tp_coeffs_d0_set },
    {0,0,0}
};
static swig_lua_method swig_tp_coeffs_methods[]= {
    {0,0}
};
static swig_lua_method swig_tp_coeffs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_tp_coeffs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_tp_coeffs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_tp_coeffs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_tp_coeffs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_tp_coeffs_Sf_SwigStatic = {
    "tp_coeffs",
    swig_tp_coeffs_Sf_SwigStatic_methods,
    swig_tp_coeffs_Sf_SwigStatic_attributes,
    swig_tp_coeffs_Sf_SwigStatic_constants,
    swig_tp_coeffs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_tp_coeffs_bases[] = {0};
static const char *swig_tp_coeffs_base_names[] = {0};
static swig_lua_class _wrap_class_tp_coeffs = { "tp_coeffs", "tp_coeffs", &SWIGTYPE_p_tp_coeffs,_proxy__wrap_new_tp_coeffs, swig_delete_tp_coeffs, swig_tp_coeffs_methods, swig_tp_coeffs_attributes, &swig_tp_coeffs_Sf_SwigStatic, swig_tp_coeffs_meta, swig_tp_coeffs_bases, swig_tp_coeffs_base_names };

static int _wrap_new_Biquad(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *result = 0 ;
  
  SWIG_check_num_args("Biquad::Biquad",0,0)
  result = (Biquad *)new Biquad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_process(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  coef_size_t arg2 ;
  coef_size_t result;
  
  SWIG_check_num_args("Biquad::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::process",1,"Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Biquad::process",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_process",1,SWIGTYPE_p_Biquad);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  result = (coef_size_t)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_set_offset(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  coef_size_t arg2 ;
  
  SWIG_check_num_args("Biquad::set_offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::set_offset",1,"Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Biquad::set_offset",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_set_offset",1,SWIGTYPE_p_Biquad);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  (arg1)->set_offset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_get_offset(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  coef_size_t result;
  
  SWIG_check_num_args("Biquad::get_offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::get_offset",1,"Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_get_offset",1,SWIGTYPE_p_Biquad);
  }
  
  result = (coef_size_t)(arg1)->get_offset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
Biquad *arg1 = (Biquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "process", _wrap_Biquad_process},
    { "set_offset", _wrap_Biquad_set_offset},
    { "get_offset", _wrap_Biquad_get_offset},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0};
static const char *swig_Biquad_base_names[] = {0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_Biquad,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_BiquadModified_process(lua_State* L) {
  int SWIG_arg = 0;
  BiquadModified *arg1 = (BiquadModified *) 0 ;
  coef_size_t arg2 ;
  coef_size_t result;
  
  SWIG_check_num_args("BiquadModified::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadModified::process",1,"BiquadModified *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BiquadModified::process",2,"coef_size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadModified,0))){
    SWIG_fail_ptr("BiquadModified_process",1,SWIGTYPE_p_BiquadModified);
  }
  
  arg2 = (coef_size_t)lua_tonumber(L, 2);
  result = (coef_size_t)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadModified(lua_State* L) {
  int SWIG_arg = 0;
  BiquadModified *result = 0 ;
  
  SWIG_check_num_args("BiquadModified::BiquadModified",0,0)
  result = (BiquadModified *)new BiquadModified();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BiquadModified,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadModified(void *obj) {
BiquadModified *arg1 = (BiquadModified *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadModified(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadModified);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadModified_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadModified_methods[]= {
    { "process", _wrap_BiquadModified_process},
    {0,0}
};
static swig_lua_method swig_BiquadModified_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadModified_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadModified_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadModified_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadModified_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadModified_Sf_SwigStatic = {
    "BiquadModified",
    swig_BiquadModified_Sf_SwigStatic_methods,
    swig_BiquadModified_Sf_SwigStatic_attributes,
    swig_BiquadModified_Sf_SwigStatic_constants,
    swig_BiquadModified_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadModified_bases[] = {0,0};
static const char *swig_BiquadModified_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_BiquadModified = { "BiquadModified", "BiquadModified", &SWIGTYPE_p_BiquadModified,_proxy__wrap_new_BiquadModified, swig_delete_BiquadModified, swig_BiquadModified_methods, swig_BiquadModified_attributes, &swig_BiquadModified_Sf_SwigStatic, swig_BiquadModified_meta, swig_BiquadModified_bases, swig_BiquadModified_base_names };

static int _wrap_FO_APF_calculate_coeffs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FO_APF *arg1 = (FO_APF *) 0 ;
  int arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("FO_APF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FO_APF::calculate_coeffs",1,"FO_APF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FO_APF::calculate_coeffs",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FO_APF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FO_APF,0))){
    SWIG_fail_ptr("FO_APF_calculate_coeffs",1,SWIGTYPE_p_FO_APF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FO_APF_calculate_coeffs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FO_APF *arg1 = (FO_APF *) 0 ;
  int arg2 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("FO_APF::calculate_coeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FO_APF::calculate_coeffs",1,"FO_APF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FO_APF::calculate_coeffs",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FO_APF,0))){
    SWIG_fail_ptr("FO_APF_calculate_coeffs",1,SWIGTYPE_p_FO_APF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FO_APF_calculate_coeffs(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FO_APF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FO_APF_calculate_coeffs__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FO_APF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FO_APF_calculate_coeffs__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FO_APF_calculate_coeffs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FO_APF::calculate_coeffs(int,int)\n"
    "    FO_APF::calculate_coeffs(int)\n");
  lua_error(L);return 0;
}


static int _wrap_new_FO_APF(lua_State* L) {
  int SWIG_arg = 0;
  FO_APF *result = 0 ;
  
  SWIG_check_num_args("FO_APF::FO_APF",0,0)
  result = (FO_APF *)new FO_APF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FO_APF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FO_APF(void *obj) {
FO_APF *arg1 = (FO_APF *) obj;
delete arg1;
}
static int _proxy__wrap_new_FO_APF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FO_APF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FO_APF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FO_APF_methods[]= {
    { "calculate_coeffs", _wrap_FO_APF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_FO_APF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FO_APF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FO_APF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FO_APF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FO_APF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FO_APF_Sf_SwigStatic = {
    "FO_APF",
    swig_FO_APF_Sf_SwigStatic_methods,
    swig_FO_APF_Sf_SwigStatic_attributes,
    swig_FO_APF_Sf_SwigStatic_constants,
    swig_FO_APF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FO_APF_bases[] = {0,0};
static const char *swig_FO_APF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_FO_APF = { "FO_APF", "FO_APF", &SWIGTYPE_p_FO_APF,_proxy__wrap_new_FO_APF, swig_delete_FO_APF, swig_FO_APF_methods, swig_FO_APF_attributes, &swig_FO_APF_Sf_SwigStatic, swig_FO_APF_meta, swig_FO_APF_bases, swig_FO_APF_base_names };

static int _wrap_FO_LPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  FO_LPF *arg1 = (FO_LPF *) 0 ;
  int arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("FO_LPF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FO_LPF::calculate_coeffs",1,"FO_LPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FO_LPF::calculate_coeffs",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FO_LPF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FO_LPF,0))){
    SWIG_fail_ptr("FO_LPF_calculate_coeffs",1,SWIGTYPE_p_FO_LPF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FO_LPF(lua_State* L) {
  int SWIG_arg = 0;
  FO_LPF *result = 0 ;
  
  SWIG_check_num_args("FO_LPF::FO_LPF",0,0)
  result = (FO_LPF *)new FO_LPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FO_LPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FO_LPF(void *obj) {
FO_LPF *arg1 = (FO_LPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_FO_LPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FO_LPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FO_LPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FO_LPF_methods[]= {
    { "calculate_coeffs", _wrap_FO_LPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_FO_LPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FO_LPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FO_LPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FO_LPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FO_LPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FO_LPF_Sf_SwigStatic = {
    "FO_LPF",
    swig_FO_LPF_Sf_SwigStatic_methods,
    swig_FO_LPF_Sf_SwigStatic_attributes,
    swig_FO_LPF_Sf_SwigStatic_constants,
    swig_FO_LPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FO_LPF_bases[] = {0,0};
static const char *swig_FO_LPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_FO_LPF = { "FO_LPF", "FO_LPF", &SWIGTYPE_p_FO_LPF,_proxy__wrap_new_FO_LPF, swig_delete_FO_LPF, swig_FO_LPF_methods, swig_FO_LPF_attributes, &swig_FO_LPF_Sf_SwigStatic, swig_FO_LPF_meta, swig_FO_LPF_bases, swig_FO_LPF_base_names };

static int _wrap_FO_HPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  FO_HPF *arg1 = (FO_HPF *) 0 ;
  int arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("FO_HPF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FO_HPF::calculate_coeffs",1,"FO_HPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FO_HPF::calculate_coeffs",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FO_HPF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FO_HPF,0))){
    SWIG_fail_ptr("FO_HPF_calculate_coeffs",1,SWIGTYPE_p_FO_HPF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FO_HPF(lua_State* L) {
  int SWIG_arg = 0;
  FO_HPF *result = 0 ;
  
  SWIG_check_num_args("FO_HPF::FO_HPF",0,0)
  result = (FO_HPF *)new FO_HPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FO_HPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FO_HPF(void *obj) {
FO_HPF *arg1 = (FO_HPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_FO_HPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FO_HPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FO_HPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FO_HPF_methods[]= {
    { "calculate_coeffs", _wrap_FO_HPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_FO_HPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FO_HPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FO_HPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FO_HPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FO_HPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FO_HPF_Sf_SwigStatic = {
    "FO_HPF",
    swig_FO_HPF_Sf_SwigStatic_methods,
    swig_FO_HPF_Sf_SwigStatic_attributes,
    swig_FO_HPF_Sf_SwigStatic_constants,
    swig_FO_HPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FO_HPF_bases[] = {0,0};
static const char *swig_FO_HPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_FO_HPF = { "FO_HPF", "FO_HPF", &SWIGTYPE_p_FO_HPF,_proxy__wrap_new_FO_HPF, swig_delete_FO_HPF, swig_FO_HPF_methods, swig_FO_HPF_attributes, &swig_FO_HPF_Sf_SwigStatic, swig_FO_HPF_meta, swig_FO_HPF_bases, swig_FO_HPF_base_names };

static int _wrap_FO_SHELVING_HIGH_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  FO_SHELVING_HIGH *arg1 = (FO_SHELVING_HIGH *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("FO_SHELVING_HIGH::calculate_coeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FO_SHELVING_HIGH::calculate_coeffs",1,"FO_SHELVING_HIGH *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FO_SHELVING_HIGH::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FO_SHELVING_HIGH::calculate_coeffs",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FO_SHELVING_HIGH::calculate_coeffs",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FO_SHELVING_HIGH,0))){
    SWIG_fail_ptr("FO_SHELVING_HIGH_calculate_coeffs",1,SWIGTYPE_p_FO_SHELVING_HIGH);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FO_SHELVING_HIGH(lua_State* L) {
  int SWIG_arg = 0;
  FO_SHELVING_HIGH *result = 0 ;
  
  SWIG_check_num_args("FO_SHELVING_HIGH::FO_SHELVING_HIGH",0,0)
  result = (FO_SHELVING_HIGH *)new FO_SHELVING_HIGH();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FO_SHELVING_HIGH,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FO_SHELVING_HIGH(void *obj) {
FO_SHELVING_HIGH *arg1 = (FO_SHELVING_HIGH *) obj;
delete arg1;
}
static int _proxy__wrap_new_FO_SHELVING_HIGH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FO_SHELVING_HIGH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FO_SHELVING_HIGH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FO_SHELVING_HIGH_methods[]= {
    { "calculate_coeffs", _wrap_FO_SHELVING_HIGH_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_FO_SHELVING_HIGH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FO_SHELVING_HIGH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FO_SHELVING_HIGH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FO_SHELVING_HIGH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FO_SHELVING_HIGH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FO_SHELVING_HIGH_Sf_SwigStatic = {
    "FO_SHELVING_HIGH",
    swig_FO_SHELVING_HIGH_Sf_SwigStatic_methods,
    swig_FO_SHELVING_HIGH_Sf_SwigStatic_attributes,
    swig_FO_SHELVING_HIGH_Sf_SwigStatic_constants,
    swig_FO_SHELVING_HIGH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FO_SHELVING_HIGH_bases[] = {0,0};
static const char *swig_FO_SHELVING_HIGH_base_names[] = {"BiquadModified *",0};
static swig_lua_class _wrap_class_FO_SHELVING_HIGH = { "FO_SHELVING_HIGH", "FO_SHELVING_HIGH", &SWIGTYPE_p_FO_SHELVING_HIGH,_proxy__wrap_new_FO_SHELVING_HIGH, swig_delete_FO_SHELVING_HIGH, swig_FO_SHELVING_HIGH_methods, swig_FO_SHELVING_HIGH_attributes, &swig_FO_SHELVING_HIGH_Sf_SwigStatic, swig_FO_SHELVING_HIGH_meta, swig_FO_SHELVING_HIGH_bases, swig_FO_SHELVING_HIGH_base_names };

static int _wrap_FO_SHELVING_LOW_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  FO_SHELVING_LOW *arg1 = (FO_SHELVING_LOW *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("FO_SHELVING_LOW::calculate_coeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FO_SHELVING_LOW::calculate_coeffs",1,"FO_SHELVING_LOW *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FO_SHELVING_LOW::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FO_SHELVING_LOW::calculate_coeffs",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FO_SHELVING_LOW::calculate_coeffs",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FO_SHELVING_LOW,0))){
    SWIG_fail_ptr("FO_SHELVING_LOW_calculate_coeffs",1,SWIGTYPE_p_FO_SHELVING_LOW);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FO_SHELVING_LOW(lua_State* L) {
  int SWIG_arg = 0;
  FO_SHELVING_LOW *result = 0 ;
  
  SWIG_check_num_args("FO_SHELVING_LOW::FO_SHELVING_LOW",0,0)
  result = (FO_SHELVING_LOW *)new FO_SHELVING_LOW();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FO_SHELVING_LOW,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FO_SHELVING_LOW(void *obj) {
FO_SHELVING_LOW *arg1 = (FO_SHELVING_LOW *) obj;
delete arg1;
}
static int _proxy__wrap_new_FO_SHELVING_LOW(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FO_SHELVING_LOW);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FO_SHELVING_LOW_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FO_SHELVING_LOW_methods[]= {
    { "calculate_coeffs", _wrap_FO_SHELVING_LOW_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_FO_SHELVING_LOW_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FO_SHELVING_LOW_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FO_SHELVING_LOW_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FO_SHELVING_LOW_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FO_SHELVING_LOW_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FO_SHELVING_LOW_Sf_SwigStatic = {
    "FO_SHELVING_LOW",
    swig_FO_SHELVING_LOW_Sf_SwigStatic_methods,
    swig_FO_SHELVING_LOW_Sf_SwigStatic_attributes,
    swig_FO_SHELVING_LOW_Sf_SwigStatic_constants,
    swig_FO_SHELVING_LOW_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FO_SHELVING_LOW_bases[] = {0,0};
static const char *swig_FO_SHELVING_LOW_base_names[] = {"BiquadModified *",0};
static swig_lua_class _wrap_class_FO_SHELVING_LOW = { "FO_SHELVING_LOW", "FO_SHELVING_LOW", &SWIGTYPE_p_FO_SHELVING_LOW,_proxy__wrap_new_FO_SHELVING_LOW, swig_delete_FO_SHELVING_LOW, swig_FO_SHELVING_LOW_methods, swig_FO_SHELVING_LOW_attributes, &swig_FO_SHELVING_LOW_Sf_SwigStatic, swig_FO_SHELVING_LOW_meta, swig_FO_SHELVING_LOW_bases, swig_FO_SHELVING_LOW_base_names };

static int _wrap_SO_APF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_APF *arg1 = (SO_APF *) 0 ;
  float arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_APF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_APF::calculate_coeffs",1,"SO_APF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_APF::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_APF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_APF,0))){
    SWIG_fail_ptr("SO_APF_calculate_coeffs",1,SWIGTYPE_p_SO_APF);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_APF(lua_State* L) {
  int SWIG_arg = 0;
  SO_APF *result = 0 ;
  
  SWIG_check_num_args("SO_APF::SO_APF",0,0)
  result = (SO_APF *)new SO_APF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_APF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_APF(void *obj) {
SO_APF *arg1 = (SO_APF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_APF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_APF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_APF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_APF_methods[]= {
    { "calculate_coeffs", _wrap_SO_APF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_APF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_APF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_APF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_APF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_APF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_APF_Sf_SwigStatic = {
    "SO_APF",
    swig_SO_APF_Sf_SwigStatic_methods,
    swig_SO_APF_Sf_SwigStatic_attributes,
    swig_SO_APF_Sf_SwigStatic_constants,
    swig_SO_APF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_APF_bases[] = {0,0};
static const char *swig_SO_APF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_APF = { "SO_APF", "SO_APF", &SWIGTYPE_p_SO_APF,_proxy__wrap_new_SO_APF, swig_delete_SO_APF, swig_SO_APF_methods, swig_SO_APF_attributes, &swig_SO_APF_Sf_SwigStatic, swig_SO_APF_meta, swig_SO_APF_bases, swig_SO_APF_base_names };

static int _wrap_SO_BPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_BPF *arg1 = (SO_BPF *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_BPF::calculate_coeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_BPF::calculate_coeffs",1,"SO_BPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_BPF::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_BPF::calculate_coeffs",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_BPF::calculate_coeffs",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_BPF,0))){
    SWIG_fail_ptr("SO_BPF_calculate_coeffs",1,SWIGTYPE_p_SO_BPF);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_BPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_BPF *result = 0 ;
  
  SWIG_check_num_args("SO_BPF::SO_BPF",0,0)
  result = (SO_BPF *)new SO_BPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_BPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_BPF(void *obj) {
SO_BPF *arg1 = (SO_BPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_BPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_BPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_BPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_BPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_BPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_BPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_BPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_BPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_BPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_BPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_BPF_Sf_SwigStatic = {
    "SO_BPF",
    swig_SO_BPF_Sf_SwigStatic_methods,
    swig_SO_BPF_Sf_SwigStatic_attributes,
    swig_SO_BPF_Sf_SwigStatic_constants,
    swig_SO_BPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_BPF_bases[] = {0,0};
static const char *swig_SO_BPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_BPF = { "SO_BPF", "SO_BPF", &SWIGTYPE_p_SO_BPF,_proxy__wrap_new_SO_BPF, swig_delete_SO_BPF, swig_SO_BPF_methods, swig_SO_BPF_attributes, &swig_SO_BPF_Sf_SwigStatic, swig_SO_BPF_meta, swig_SO_BPF_bases, swig_SO_BPF_base_names };

static int _wrap_SO_BSF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_BSF *arg1 = (SO_BSF *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_BSF::calculate_coeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_BSF::calculate_coeffs",1,"SO_BSF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_BSF::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_BSF::calculate_coeffs",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_BSF::calculate_coeffs",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_BSF,0))){
    SWIG_fail_ptr("SO_BSF_calculate_coeffs",1,SWIGTYPE_p_SO_BSF);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_BSF(lua_State* L) {
  int SWIG_arg = 0;
  SO_BSF *result = 0 ;
  
  SWIG_check_num_args("SO_BSF::SO_BSF",0,0)
  result = (SO_BSF *)new SO_BSF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_BSF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_BSF(void *obj) {
SO_BSF *arg1 = (SO_BSF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_BSF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_BSF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_BSF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_BSF_methods[]= {
    { "calculate_coeffs", _wrap_SO_BSF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_BSF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_BSF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_BSF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_BSF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_BSF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_BSF_Sf_SwigStatic = {
    "SO_BSF",
    swig_SO_BSF_Sf_SwigStatic_methods,
    swig_SO_BSF_Sf_SwigStatic_attributes,
    swig_SO_BSF_Sf_SwigStatic_constants,
    swig_SO_BSF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_BSF_bases[] = {0,0};
static const char *swig_SO_BSF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_BSF = { "SO_BSF", "SO_BSF", &SWIGTYPE_p_SO_BSF,_proxy__wrap_new_SO_BSF, swig_delete_SO_BSF, swig_SO_BSF_methods, swig_SO_BSF_attributes, &swig_SO_BSF_Sf_SwigStatic, swig_SO_BSF_meta, swig_SO_BSF_bases, swig_SO_BSF_base_names };

static int _wrap_SO_LPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_LPF *arg1 = (SO_LPF *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_LPF::calculate_coeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_LPF::calculate_coeffs",1,"SO_LPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_LPF::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_LPF::calculate_coeffs",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_LPF::calculate_coeffs",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_LPF,0))){
    SWIG_fail_ptr("SO_LPF_calculate_coeffs",1,SWIGTYPE_p_SO_LPF);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_LPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_LPF *result = 0 ;
  
  SWIG_check_num_args("SO_LPF::SO_LPF",0,0)
  result = (SO_LPF *)new SO_LPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_LPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_LPF(void *obj) {
SO_LPF *arg1 = (SO_LPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_LPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_LPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_LPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_LPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_LPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_LPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_LPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_LPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_LPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_LPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_LPF_Sf_SwigStatic = {
    "SO_LPF",
    swig_SO_LPF_Sf_SwigStatic_methods,
    swig_SO_LPF_Sf_SwigStatic_attributes,
    swig_SO_LPF_Sf_SwigStatic_constants,
    swig_SO_LPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_LPF_bases[] = {0,0};
static const char *swig_SO_LPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_LPF = { "SO_LPF", "SO_LPF", &SWIGTYPE_p_SO_LPF,_proxy__wrap_new_SO_LPF, swig_delete_SO_LPF, swig_SO_LPF_methods, swig_SO_LPF_attributes, &swig_SO_LPF_Sf_SwigStatic, swig_SO_LPF_meta, swig_SO_LPF_bases, swig_SO_LPF_base_names };

static int _wrap_SO_HPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_HPF *arg1 = (SO_HPF *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_HPF::calculate_coeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_HPF::calculate_coeffs",1,"SO_HPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_HPF::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_HPF::calculate_coeffs",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_HPF::calculate_coeffs",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_HPF,0))){
    SWIG_fail_ptr("SO_HPF_calculate_coeffs",1,SWIGTYPE_p_SO_HPF);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_HPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_HPF *result = 0 ;
  
  SWIG_check_num_args("SO_HPF::SO_HPF",0,0)
  result = (SO_HPF *)new SO_HPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_HPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_HPF(void *obj) {
SO_HPF *arg1 = (SO_HPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_HPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_HPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_HPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_HPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_HPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_HPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_HPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_HPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_HPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_HPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_HPF_Sf_SwigStatic = {
    "SO_HPF",
    swig_SO_HPF_Sf_SwigStatic_methods,
    swig_SO_HPF_Sf_SwigStatic_attributes,
    swig_SO_HPF_Sf_SwigStatic_constants,
    swig_SO_HPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_HPF_bases[] = {0,0};
static const char *swig_SO_HPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_HPF = { "SO_HPF", "SO_HPF", &SWIGTYPE_p_SO_HPF,_proxy__wrap_new_SO_HPF, swig_delete_SO_HPF, swig_SO_HPF_methods, swig_SO_HPF_attributes, &swig_SO_HPF_Sf_SwigStatic, swig_SO_HPF_meta, swig_SO_HPF_bases, swig_SO_HPF_base_names };

static int _wrap_SO_BUTTERWORTH_BPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_BUTTERWORTH_BPF *arg1 = (SO_BUTTERWORTH_BPF *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_BUTTERWORTH_BPF::calculate_coeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_BUTTERWORTH_BPF::calculate_coeffs",1,"SO_BUTTERWORTH_BPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_BUTTERWORTH_BPF::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_BUTTERWORTH_BPF::calculate_coeffs",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_BUTTERWORTH_BPF::calculate_coeffs",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_BUTTERWORTH_BPF,0))){
    SWIG_fail_ptr("SO_BUTTERWORTH_BPF_calculate_coeffs",1,SWIGTYPE_p_SO_BUTTERWORTH_BPF);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_BUTTERWORTH_BPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_BUTTERWORTH_BPF *result = 0 ;
  
  SWIG_check_num_args("SO_BUTTERWORTH_BPF::SO_BUTTERWORTH_BPF",0,0)
  result = (SO_BUTTERWORTH_BPF *)new SO_BUTTERWORTH_BPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_BUTTERWORTH_BPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_BUTTERWORTH_BPF(void *obj) {
SO_BUTTERWORTH_BPF *arg1 = (SO_BUTTERWORTH_BPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_BUTTERWORTH_BPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_BUTTERWORTH_BPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_BUTTERWORTH_BPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_BPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_BUTTERWORTH_BPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_BPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic = {
    "SO_BUTTERWORTH_BPF",
    swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_methods,
    swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_attributes,
    swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_constants,
    swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_BUTTERWORTH_BPF_bases[] = {0,0};
static const char *swig_SO_BUTTERWORTH_BPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_BUTTERWORTH_BPF = { "SO_BUTTERWORTH_BPF", "SO_BUTTERWORTH_BPF", &SWIGTYPE_p_SO_BUTTERWORTH_BPF,_proxy__wrap_new_SO_BUTTERWORTH_BPF, swig_delete_SO_BUTTERWORTH_BPF, swig_SO_BUTTERWORTH_BPF_methods, swig_SO_BUTTERWORTH_BPF_attributes, &swig_SO_BUTTERWORTH_BPF_Sf_SwigStatic, swig_SO_BUTTERWORTH_BPF_meta, swig_SO_BUTTERWORTH_BPF_bases, swig_SO_BUTTERWORTH_BPF_base_names };

static int _wrap_SO_BUTTERWORTH_HPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_BUTTERWORTH_HPF *arg1 = (SO_BUTTERWORTH_HPF *) 0 ;
  int arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_BUTTERWORTH_HPF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_BUTTERWORTH_HPF::calculate_coeffs",1,"SO_BUTTERWORTH_HPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_BUTTERWORTH_HPF::calculate_coeffs",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_BUTTERWORTH_HPF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_BUTTERWORTH_HPF,0))){
    SWIG_fail_ptr("SO_BUTTERWORTH_HPF_calculate_coeffs",1,SWIGTYPE_p_SO_BUTTERWORTH_HPF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_BUTTERWORTH_HPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_BUTTERWORTH_HPF *result = 0 ;
  
  SWIG_check_num_args("SO_BUTTERWORTH_HPF::SO_BUTTERWORTH_HPF",0,0)
  result = (SO_BUTTERWORTH_HPF *)new SO_BUTTERWORTH_HPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_BUTTERWORTH_HPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_BUTTERWORTH_HPF(void *obj) {
SO_BUTTERWORTH_HPF *arg1 = (SO_BUTTERWORTH_HPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_BUTTERWORTH_HPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_BUTTERWORTH_HPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_BUTTERWORTH_HPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_HPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_BUTTERWORTH_HPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_HPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic = {
    "SO_BUTTERWORTH_HPF",
    swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_methods,
    swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_attributes,
    swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_constants,
    swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_BUTTERWORTH_HPF_bases[] = {0,0};
static const char *swig_SO_BUTTERWORTH_HPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_BUTTERWORTH_HPF = { "SO_BUTTERWORTH_HPF", "SO_BUTTERWORTH_HPF", &SWIGTYPE_p_SO_BUTTERWORTH_HPF,_proxy__wrap_new_SO_BUTTERWORTH_HPF, swig_delete_SO_BUTTERWORTH_HPF, swig_SO_BUTTERWORTH_HPF_methods, swig_SO_BUTTERWORTH_HPF_attributes, &swig_SO_BUTTERWORTH_HPF_Sf_SwigStatic, swig_SO_BUTTERWORTH_HPF_meta, swig_SO_BUTTERWORTH_HPF_bases, swig_SO_BUTTERWORTH_HPF_base_names };

static int _wrap_SO_BUTTERWORTH_LPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_BUTTERWORTH_LPF *arg1 = (SO_BUTTERWORTH_LPF *) 0 ;
  int arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_BUTTERWORTH_LPF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_BUTTERWORTH_LPF::calculate_coeffs",1,"SO_BUTTERWORTH_LPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_BUTTERWORTH_LPF::calculate_coeffs",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_BUTTERWORTH_LPF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_BUTTERWORTH_LPF,0))){
    SWIG_fail_ptr("SO_BUTTERWORTH_LPF_calculate_coeffs",1,SWIGTYPE_p_SO_BUTTERWORTH_LPF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_BUTTERWORTH_LPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_BUTTERWORTH_LPF *result = 0 ;
  
  SWIG_check_num_args("SO_BUTTERWORTH_LPF::SO_BUTTERWORTH_LPF",0,0)
  result = (SO_BUTTERWORTH_LPF *)new SO_BUTTERWORTH_LPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_BUTTERWORTH_LPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_BUTTERWORTH_LPF(void *obj) {
SO_BUTTERWORTH_LPF *arg1 = (SO_BUTTERWORTH_LPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_BUTTERWORTH_LPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_BUTTERWORTH_LPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_BUTTERWORTH_LPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_LPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_BUTTERWORTH_LPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_LPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic = {
    "SO_BUTTERWORTH_LPF",
    swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_methods,
    swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_attributes,
    swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_constants,
    swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_BUTTERWORTH_LPF_bases[] = {0,0};
static const char *swig_SO_BUTTERWORTH_LPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_BUTTERWORTH_LPF = { "SO_BUTTERWORTH_LPF", "SO_BUTTERWORTH_LPF", &SWIGTYPE_p_SO_BUTTERWORTH_LPF,_proxy__wrap_new_SO_BUTTERWORTH_LPF, swig_delete_SO_BUTTERWORTH_LPF, swig_SO_BUTTERWORTH_LPF_methods, swig_SO_BUTTERWORTH_LPF_attributes, &swig_SO_BUTTERWORTH_LPF_Sf_SwigStatic, swig_SO_BUTTERWORTH_LPF_meta, swig_SO_BUTTERWORTH_LPF_bases, swig_SO_BUTTERWORTH_LPF_base_names };

static int _wrap_SO_LINKWITZ_RILEY_HPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_LINKWITZ_RILEY_HPF *arg1 = (SO_LINKWITZ_RILEY_HPF *) 0 ;
  int arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_LINKWITZ_RILEY_HPF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_LINKWITZ_RILEY_HPF::calculate_coeffs",1,"SO_LINKWITZ_RILEY_HPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_LINKWITZ_RILEY_HPF::calculate_coeffs",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_LINKWITZ_RILEY_HPF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_LINKWITZ_RILEY_HPF,0))){
    SWIG_fail_ptr("SO_LINKWITZ_RILEY_HPF_calculate_coeffs",1,SWIGTYPE_p_SO_LINKWITZ_RILEY_HPF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_LINKWITZ_RILEY_HPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_LINKWITZ_RILEY_HPF *result = 0 ;
  
  SWIG_check_num_args("SO_LINKWITZ_RILEY_HPF::SO_LINKWITZ_RILEY_HPF",0,0)
  result = (SO_LINKWITZ_RILEY_HPF *)new SO_LINKWITZ_RILEY_HPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_LINKWITZ_RILEY_HPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_LINKWITZ_RILEY_HPF(void *obj) {
SO_LINKWITZ_RILEY_HPF *arg1 = (SO_LINKWITZ_RILEY_HPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_LINKWITZ_RILEY_HPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_LINKWITZ_RILEY_HPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_LINKWITZ_RILEY_HPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_LINKWITZ_RILEY_HPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_LINKWITZ_RILEY_HPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_LINKWITZ_RILEY_HPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic = {
    "SO_LINKWITZ_RILEY_HPF",
    swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_methods,
    swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_attributes,
    swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_constants,
    swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_LINKWITZ_RILEY_HPF_bases[] = {0,0};
static const char *swig_SO_LINKWITZ_RILEY_HPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_LINKWITZ_RILEY_HPF = { "SO_LINKWITZ_RILEY_HPF", "SO_LINKWITZ_RILEY_HPF", &SWIGTYPE_p_SO_LINKWITZ_RILEY_HPF,_proxy__wrap_new_SO_LINKWITZ_RILEY_HPF, swig_delete_SO_LINKWITZ_RILEY_HPF, swig_SO_LINKWITZ_RILEY_HPF_methods, swig_SO_LINKWITZ_RILEY_HPF_attributes, &swig_SO_LINKWITZ_RILEY_HPF_Sf_SwigStatic, swig_SO_LINKWITZ_RILEY_HPF_meta, swig_SO_LINKWITZ_RILEY_HPF_bases, swig_SO_LINKWITZ_RILEY_HPF_base_names };

static int _wrap_SO_LINKWITZ_RILEY_LPF_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_LINKWITZ_RILEY_LPF *arg1 = (SO_LINKWITZ_RILEY_LPF *) 0 ;
  int arg2 ;
  int arg3 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_LINKWITZ_RILEY_LPF::calculate_coeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_LINKWITZ_RILEY_LPF::calculate_coeffs",1,"SO_LINKWITZ_RILEY_LPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_LINKWITZ_RILEY_LPF::calculate_coeffs",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_LINKWITZ_RILEY_LPF::calculate_coeffs",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_LINKWITZ_RILEY_LPF,0))){
    SWIG_fail_ptr("SO_LINKWITZ_RILEY_LPF_calculate_coeffs",1,SWIGTYPE_p_SO_LINKWITZ_RILEY_LPF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_LINKWITZ_RILEY_LPF(lua_State* L) {
  int SWIG_arg = 0;
  SO_LINKWITZ_RILEY_LPF *result = 0 ;
  
  SWIG_check_num_args("SO_LINKWITZ_RILEY_LPF::SO_LINKWITZ_RILEY_LPF",0,0)
  result = (SO_LINKWITZ_RILEY_LPF *)new SO_LINKWITZ_RILEY_LPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_LINKWITZ_RILEY_LPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_LINKWITZ_RILEY_LPF(void *obj) {
SO_LINKWITZ_RILEY_LPF *arg1 = (SO_LINKWITZ_RILEY_LPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_LINKWITZ_RILEY_LPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_LINKWITZ_RILEY_LPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_LINKWITZ_RILEY_LPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_LINKWITZ_RILEY_LPF_methods[]= {
    { "calculate_coeffs", _wrap_SO_LINKWITZ_RILEY_LPF_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_LINKWITZ_RILEY_LPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic = {
    "SO_LINKWITZ_RILEY_LPF",
    swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_methods,
    swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_attributes,
    swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_constants,
    swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_LINKWITZ_RILEY_LPF_bases[] = {0,0};
static const char *swig_SO_LINKWITZ_RILEY_LPF_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_LINKWITZ_RILEY_LPF = { "SO_LINKWITZ_RILEY_LPF", "SO_LINKWITZ_RILEY_LPF", &SWIGTYPE_p_SO_LINKWITZ_RILEY_LPF,_proxy__wrap_new_SO_LINKWITZ_RILEY_LPF, swig_delete_SO_LINKWITZ_RILEY_LPF, swig_SO_LINKWITZ_RILEY_LPF_methods, swig_SO_LINKWITZ_RILEY_LPF_attributes, &swig_SO_LINKWITZ_RILEY_LPF_Sf_SwigStatic, swig_SO_LINKWITZ_RILEY_LPF_meta, swig_SO_LINKWITZ_RILEY_LPF_bases, swig_SO_LINKWITZ_RILEY_LPF_base_names };

static int _wrap_SO_PARAMETRIC_CQ_BOOST_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_PARAMETRIC_CQ_BOOST *arg1 = (SO_PARAMETRIC_CQ_BOOST *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_PARAMETRIC_CQ_BOOST::calculate_coeffs",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_PARAMETRIC_CQ_BOOST::calculate_coeffs",1,"SO_PARAMETRIC_CQ_BOOST *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_PARAMETRIC_CQ_BOOST::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_PARAMETRIC_CQ_BOOST::calculate_coeffs",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_PARAMETRIC_CQ_BOOST::calculate_coeffs",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SO_PARAMETRIC_CQ_BOOST::calculate_coeffs",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_PARAMETRIC_CQ_BOOST,0))){
    SWIG_fail_ptr("SO_PARAMETRIC_CQ_BOOST_calculate_coeffs",1,SWIGTYPE_p_SO_PARAMETRIC_CQ_BOOST);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_PARAMETRIC_CQ_BOOST(lua_State* L) {
  int SWIG_arg = 0;
  SO_PARAMETRIC_CQ_BOOST *result = 0 ;
  
  SWIG_check_num_args("SO_PARAMETRIC_CQ_BOOST::SO_PARAMETRIC_CQ_BOOST",0,0)
  result = (SO_PARAMETRIC_CQ_BOOST *)new SO_PARAMETRIC_CQ_BOOST();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_PARAMETRIC_CQ_BOOST,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_PARAMETRIC_CQ_BOOST(void *obj) {
SO_PARAMETRIC_CQ_BOOST *arg1 = (SO_PARAMETRIC_CQ_BOOST *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_PARAMETRIC_CQ_BOOST(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_PARAMETRIC_CQ_BOOST);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_PARAMETRIC_CQ_BOOST_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_CQ_BOOST_methods[]= {
    { "calculate_coeffs", _wrap_SO_PARAMETRIC_CQ_BOOST_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_CQ_BOOST_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic = {
    "SO_PARAMETRIC_CQ_BOOST",
    swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_methods,
    swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_attributes,
    swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_constants,
    swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_PARAMETRIC_CQ_BOOST_bases[] = {0,0};
static const char *swig_SO_PARAMETRIC_CQ_BOOST_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_PARAMETRIC_CQ_BOOST = { "SO_PARAMETRIC_CQ_BOOST", "SO_PARAMETRIC_CQ_BOOST", &SWIGTYPE_p_SO_PARAMETRIC_CQ_BOOST,_proxy__wrap_new_SO_PARAMETRIC_CQ_BOOST, swig_delete_SO_PARAMETRIC_CQ_BOOST, swig_SO_PARAMETRIC_CQ_BOOST_methods, swig_SO_PARAMETRIC_CQ_BOOST_attributes, &swig_SO_PARAMETRIC_CQ_BOOST_Sf_SwigStatic, swig_SO_PARAMETRIC_CQ_BOOST_meta, swig_SO_PARAMETRIC_CQ_BOOST_bases, swig_SO_PARAMETRIC_CQ_BOOST_base_names };

static int _wrap_SO_PARAMETRIC_CQ_CUT_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_PARAMETRIC_CQ_CUT *arg1 = (SO_PARAMETRIC_CQ_CUT *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  tp_coeffs result;
  
  SWIG_check_num_args("SO_PARAMETRIC_CQ_CUT::calculate_coeffs",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_PARAMETRIC_CQ_CUT::calculate_coeffs",1,"SO_PARAMETRIC_CQ_CUT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_PARAMETRIC_CQ_CUT::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_PARAMETRIC_CQ_CUT::calculate_coeffs",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_PARAMETRIC_CQ_CUT::calculate_coeffs",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SO_PARAMETRIC_CQ_CUT::calculate_coeffs",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_PARAMETRIC_CQ_CUT,0))){
    SWIG_fail_ptr("SO_PARAMETRIC_CQ_CUT_calculate_coeffs",1,SWIGTYPE_p_SO_PARAMETRIC_CQ_CUT);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->calculate_coeffs(arg2,arg3,arg4,arg5);
  {
    tp_coeffs * resultptr = new tp_coeffs((const tp_coeffs &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_tp_coeffs,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_PARAMETRIC_CQ_CUT(lua_State* L) {
  int SWIG_arg = 0;
  SO_PARAMETRIC_CQ_CUT *result = 0 ;
  
  SWIG_check_num_args("SO_PARAMETRIC_CQ_CUT::SO_PARAMETRIC_CQ_CUT",0,0)
  result = (SO_PARAMETRIC_CQ_CUT *)new SO_PARAMETRIC_CQ_CUT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_PARAMETRIC_CQ_CUT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_PARAMETRIC_CQ_CUT(void *obj) {
SO_PARAMETRIC_CQ_CUT *arg1 = (SO_PARAMETRIC_CQ_CUT *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_PARAMETRIC_CQ_CUT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_PARAMETRIC_CQ_CUT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_PARAMETRIC_CQ_CUT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_CQ_CUT_methods[]= {
    { "calculate_coeffs", _wrap_SO_PARAMETRIC_CQ_CUT_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_CQ_CUT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic = {
    "SO_PARAMETRIC_CQ_CUT",
    swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_methods,
    swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_attributes,
    swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_constants,
    swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_PARAMETRIC_CQ_CUT_bases[] = {0,0};
static const char *swig_SO_PARAMETRIC_CQ_CUT_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_PARAMETRIC_CQ_CUT = { "SO_PARAMETRIC_CQ_CUT", "SO_PARAMETRIC_CQ_CUT", &SWIGTYPE_p_SO_PARAMETRIC_CQ_CUT,_proxy__wrap_new_SO_PARAMETRIC_CQ_CUT, swig_delete_SO_PARAMETRIC_CQ_CUT, swig_SO_PARAMETRIC_CQ_CUT_methods, swig_SO_PARAMETRIC_CQ_CUT_attributes, &swig_SO_PARAMETRIC_CQ_CUT_Sf_SwigStatic, swig_SO_PARAMETRIC_CQ_CUT_meta, swig_SO_PARAMETRIC_CQ_CUT_bases, swig_SO_PARAMETRIC_CQ_CUT_base_names };

static int _wrap_SO_PARAMETRIC_NCQ_calculate_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SO_PARAMETRIC_NCQ *arg1 = (SO_PARAMETRIC_NCQ *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  tp_coeffs *result = 0 ;
  
  SWIG_check_num_args("SO_PARAMETRIC_NCQ::calculate_coeffs",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SO_PARAMETRIC_NCQ::calculate_coeffs",1,"SO_PARAMETRIC_NCQ *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SO_PARAMETRIC_NCQ::calculate_coeffs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SO_PARAMETRIC_NCQ::calculate_coeffs",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SO_PARAMETRIC_NCQ::calculate_coeffs",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SO_PARAMETRIC_NCQ::calculate_coeffs",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SO_PARAMETRIC_NCQ,0))){
    SWIG_fail_ptr("SO_PARAMETRIC_NCQ_calculate_coeffs",1,SWIGTYPE_p_SO_PARAMETRIC_NCQ);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (tp_coeffs *) &(arg1)->calculate_coeffs(arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_tp_coeffs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SO_PARAMETRIC_NCQ(lua_State* L) {
  int SWIG_arg = 0;
  SO_PARAMETRIC_NCQ *result = 0 ;
  
  SWIG_check_num_args("SO_PARAMETRIC_NCQ::SO_PARAMETRIC_NCQ",0,0)
  result = (SO_PARAMETRIC_NCQ *)new SO_PARAMETRIC_NCQ();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SO_PARAMETRIC_NCQ,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SO_PARAMETRIC_NCQ(void *obj) {
SO_PARAMETRIC_NCQ *arg1 = (SO_PARAMETRIC_NCQ *) obj;
delete arg1;
}
static int _proxy__wrap_new_SO_PARAMETRIC_NCQ(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SO_PARAMETRIC_NCQ);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SO_PARAMETRIC_NCQ_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_NCQ_methods[]= {
    { "calculate_coeffs", _wrap_SO_PARAMETRIC_NCQ_calculate_coeffs},
    {0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_NCQ_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic = {
    "SO_PARAMETRIC_NCQ",
    swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_methods,
    swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_attributes,
    swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_constants,
    swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SO_PARAMETRIC_NCQ_bases[] = {0,0};
static const char *swig_SO_PARAMETRIC_NCQ_base_names[] = {"Biquad *",0};
static swig_lua_class _wrap_class_SO_PARAMETRIC_NCQ = { "SO_PARAMETRIC_NCQ", "SO_PARAMETRIC_NCQ", &SWIGTYPE_p_SO_PARAMETRIC_NCQ,_proxy__wrap_new_SO_PARAMETRIC_NCQ, swig_delete_SO_PARAMETRIC_NCQ, swig_SO_PARAMETRIC_NCQ_methods, swig_SO_PARAMETRIC_NCQ_attributes, &swig_SO_PARAMETRIC_NCQ_Sf_SwigStatic, swig_SO_PARAMETRIC_NCQ_meta, swig_SO_PARAMETRIC_NCQ_bases, swig_SO_PARAMETRIC_NCQ_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",0,0)
  result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::ibegin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_ibegin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::iend",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_iend",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "ibegin", _wrap_float_vector_ibegin},
    { "iend", _wrap_float_vector_iend},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "numWaveTableSlots", _wrap_numWaveTableSlots_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_env_idle", SoundWave::ADSR::env_idle)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_env_attack", SoundWave::ADSR::env_attack)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_env_decay", SoundWave::ADSR::env_decay)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_env_sustain", SoundWave::ADSR::env_sustain)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_env_release", SoundWave::ADSR::env_release)},
    {SWIG_LUA_CONSTTAB_INT("idle", SoundWave::idle)},
    {SWIG_LUA_CONSTTAB_INT("attack", SoundWave::attack)},
    {SWIG_LUA_CONSTTAB_INT("decay", SoundWave::decay)},
    {SWIG_LUA_CONSTTAB_INT("sustain", SoundWave::sustain)},
    {SWIG_LUA_CONSTTAB_INT("release", SoundWave::release)},
    {SWIG_LUA_CONSTTAB_FLOAT("M_PI", 3.14159265358979324)},
    {SWIG_LUA_CONSTTAB_FLOAT("M_2PI", 6.28318530717958648)},
    {SWIG_LUA_CONSTTAB_INT("NoiseGenerator_WHITE", NoiseGenerator::WHITE)},
    {SWIG_LUA_CONSTTAB_INT("NoiseGenerator_PINK", NoiseGenerator::PINK)},
    {SWIG_LUA_CONSTTAB_INT("NoiseGenerator_BROWN", NoiseGenerator::BROWN)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_SINE", SoundWave::BandlimitedOscillator::SINE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_COSINE", SoundWave::BandlimitedOscillator::COSINE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_TRIANGLE", SoundWave::BandlimitedOscillator::TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_SQUARE", SoundWave::BandlimitedOscillator::SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_RECTANGLE", SoundWave::BandlimitedOscillator::RECTANGLE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_SAWTOOTH", SoundWave::BandlimitedOscillator::SAWTOOTH)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_RAMP", SoundWave::BandlimitedOscillator::RAMP)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_MODIFIED_TRIANGLE", SoundWave::BandlimitedOscillator::MODIFIED_TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_MODIFIED_SQUARE", SoundWave::BandlimitedOscillator::MODIFIED_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_HALF_WAVE_RECTIFIED_SINE", SoundWave::BandlimitedOscillator::HALF_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_FULL_WAVE_RECTIFIED_SINE", SoundWave::BandlimitedOscillator::FULL_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_TRIANGULAR_PULSE", SoundWave::BandlimitedOscillator::TRIANGULAR_PULSE)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_TRAPEZOID_FIXED", SoundWave::BandlimitedOscillator::TRAPEZOID_FIXED)},
    {SWIG_LUA_CONSTTAB_INT("BandlimitedOscillator_TRAPEZOID_VARIABLE", SoundWave::BandlimitedOscillator::TRAPEZOID_VARIABLE)},
    {SWIG_LUA_CONSTTAB_INT("doLinearInterp", 1)},
    {SWIG_LUA_CONSTTAB_INT("LOWPASS", SoundWave::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("HIGHPASS", SoundWave::HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("BANDPASS", SoundWave::BANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("ALLPASS", SoundWave::ALLPASS)},
    {SWIG_LUA_CONSTTAB_INT("NOTCH", SoundWave::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("PEAK", SoundWave::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("LOW_SHELF", SoundWave::LOW_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("HIGH_SHELF", SoundWave::HIGH_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("WHITE", SoundWave::WHITE)},
    {SWIG_LUA_CONSTTAB_INT("PINK", SoundWave::PINK)},
    {SWIG_LUA_CONSTTAB_INT("BROWN", SoundWave::BROWN)},
    {SWIG_LUA_CONSTTAB_INT("FINN_MOOG", SoundWave::FINN_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("IMPROVED_MOOG", SoundWave::IMPROVED_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("POLISH_MOOG", SoundWave::POLISH_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("MICROTRACKER_MOOG", SoundWave::MICROTRACKER_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("MUSICDSP_MOOG", SoundWave::MUSICDSP_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("OBERHEIM_MOOG", SoundWave::OBERHEIM_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("RK_MOOG", SoundWave::RK_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("SIMPLIFIED_MOOG", SoundWave::SIMPLIFIED_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("STILSON_MOOG", SoundWave::STILSON_MOOG)},
    {SWIG_LUA_CONSTTAB_FLOAT("pi", 3.1415926535897932384626433832795)},
    {SWIG_LUA_CONSTTAB_FLOAT("sqrt2", (2.0*0.707106781186547524401))},
    {SWIG_LUA_CONSTTAB_FLOAT("sqrt2over2", 0.707106781186547524401)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "AudioFFT_ComplexSize", _wrap_AudioFFT_ComplexSize},
    { "MakeSine", _wrap_MakeSine},
    { "MakeSaw", _wrap_MakeSaw},
    { "MakeReverseSaw", _wrap_MakeReverseSaw},
    { "MakeSquare", _wrap_MakeSquare},
    { "MakeTriangle", _wrap_MakeTriangle},
    { "clamp", _wrap_clamp},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_AudioFFT,
&_wrap_class_FFTConvolver,
&_wrap_class_ADSR,
&_wrap_class_parameter_struct,
&_wrap_class_ParametricEnvelope,
&_wrap_class_GammaEnv,
&_wrap_class_SndFileReaderFloat,
&_wrap_class_SndFileReaderDouble,
&_wrap_class_SndFileReaderInt,
&_wrap_class_SndFileReaderShort,
&_wrap_class_SndFileWriterFloat,
&_wrap_class_SndFileWriterDouble,
&_wrap_class_SndFileWriterShort,
&_wrap_class_SndFileWriterInt,
&_wrap_class_WhiteNoiseSource,
&_wrap_class_WhiteNoise,
&_wrap_class_PinkNoise,
&_wrap_class_BrownNoise,
&_wrap_class_NoiseGenerator,
&_wrap_class_GaussianWhiteNoise,
&_wrap_class_ModifiedVelvetNoise,
&_wrap_class_PinkNoiseGenerator,
&_wrap_class_BrownNoiseGenerator,
&_wrap_class_NoiseFilter,
&_wrap_class_BandlimitedOscillator,
&_wrap_class_waveTable,
&_wrap_class_WaveTableOsc,
&_wrap_class_Filter,
&_wrap_class_RBJLowPassFilter,
&_wrap_class_RBJHighPassFilter,
&_wrap_class_RBJBandPassFilter,
&_wrap_class_RBJAllPassFilter,
&_wrap_class_RBJNotchFilter,
&_wrap_class_RBJPeakFilter,
&_wrap_class_RBJLowShelfFilter,
&_wrap_class_RBJHighShelfFilter,
&_wrap_class_CRingBuffer,
&_wrap_class_NoiseSamples,
&_wrap_class_MoogLadderFilter,
&_wrap_class_tp_coeffs,
&_wrap_class_Biquad,
&_wrap_class_BiquadModified,
&_wrap_class_FO_APF,
&_wrap_class_FO_LPF,
&_wrap_class_FO_HPF,
&_wrap_class_FO_SHELVING_HIGH,
&_wrap_class_FO_SHELVING_LOW,
&_wrap_class_SO_APF,
&_wrap_class_SO_BPF,
&_wrap_class_SO_BSF,
&_wrap_class_SO_LPF,
&_wrap_class_SO_HPF,
&_wrap_class_SO_BUTTERWORTH_BPF,
&_wrap_class_SO_BUTTERWORTH_HPF,
&_wrap_class_SO_BUTTERWORTH_LPF,
&_wrap_class_SO_LINKWITZ_RILEY_HPF,
&_wrap_class_SO_LINKWITZ_RILEY_LPF,
&_wrap_class_SO_PARAMETRIC_CQ_BOOST,
&_wrap_class_SO_PARAMETRIC_CQ_CUT,
&_wrap_class_SO_PARAMETRIC_NCQ,
&_wrap_class_float_vector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "soundwave",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SO_BUTTERWORTH_LPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_BUTTERWORTH_LPF *) x));
}
static void *_p_FO_HPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((FO_HPF *) x));
}
static void *_p_BiquadModifiedTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((BiquadModified *) x));
}
static void *_p_SO_BUTTERWORTH_HPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_BUTTERWORTH_HPF *) x));
}
static void *_p_SO_BPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_BPF *) x));
}
static void *_p_FO_SHELVING_LOWTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *) (BiquadModified *) ((FO_SHELVING_LOW *) x));
}
static void *_p_SO_LINKWITZ_RILEY_LPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_LINKWITZ_RILEY_LPF *) x));
}
static void *_p_SO_LINKWITZ_RILEY_HPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_LINKWITZ_RILEY_HPF *) x));
}
static void *_p_FO_APFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((FO_APF *) x));
}
static void *_p_SO_PARAMETRIC_CQ_CUTTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_PARAMETRIC_CQ_CUT *) x));
}
static void *_p_FO_SHELVING_HIGHTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *) (BiquadModified *) ((FO_SHELVING_HIGH *) x));
}
static void *_p_SO_LPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_LPF *) x));
}
static void *_p_SO_HPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_HPF *) x));
}
static void *_p_SO_PARAMETRIC_CQ_BOOSTTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_PARAMETRIC_CQ_BOOST *) x));
}
static void *_p_SO_BUTTERWORTH_BPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_BUTTERWORTH_BPF *) x));
}
static void *_p_SO_PARAMETRIC_NCQTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_PARAMETRIC_NCQ *) x));
}
static void *_p_SO_BSFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_BSF *) x));
}
static void *_p_SO_APFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((SO_APF *) x));
}
static void *_p_FO_LPFTo_p_Biquad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Biquad *)  ((FO_LPF *) x));
}
static void *_p_WhiteNoiseTo_p_WhiteNoiseSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((WhiteNoiseSource *)  ((WhiteNoise *) x));
}
static void *_p_BrownNoiseTo_p_WhiteNoiseSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((WhiteNoiseSource *)  ((BrownNoise *) x));
}
static void *_p_PinkNoiseTo_p_WhiteNoiseSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((WhiteNoiseSource *)  ((PinkNoise *) x));
}
static void *_p_SoundWave__RBJNotchFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJNotchFilter *) x));
}
static void *_p_SoundWave__RBJLowShelfFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJLowShelfFilter *) x));
}
static void *_p_SoundWave__RBJHighShelfFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJHighShelfFilter *) x));
}
static void *_p_SoundWave__RBJLowPassFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJLowPassFilter *) x));
}
static void *_p_SoundWave__RBJHighPassFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJHighPassFilter *) x));
}
static void *_p_SoundWave__RBJBandPassFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJBandPassFilter *) x));
}
static void *_p_SoundWave__RBJAllPassFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJAllPassFilter *) x));
}
static void *_p_SoundWave__RBJPeakFilterTo_p_SoundWave__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundWave::Filter *)  ((SoundWave::RBJPeakFilter *) x));
}
static void *_p_FO_SHELVING_HIGHTo_p_BiquadModified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BiquadModified *)  ((FO_SHELVING_HIGH *) x));
}
static void *_p_FO_SHELVING_LOWTo_p_BiquadModified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BiquadModified *)  ((FO_SHELVING_LOW *) x));
}
static swig_type_info _swigt__p_Biquad = {"_p_Biquad", "Biquad *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_BiquadModified = {"_p_BiquadModified", "BiquadModified *", 0, 0, (void*)&_wrap_class_BiquadModified, 0};
static swig_type_info _swigt__p_BrownNoise = {"_p_BrownNoise", "BrownNoise *", 0, 0, (void*)&_wrap_class_BrownNoise, 0};
static swig_type_info _swigt__p_BrowningFilter = {"_p_BrowningFilter", "BrowningFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FO_APF = {"_p_FO_APF", "FO_APF *", 0, 0, (void*)&_wrap_class_FO_APF, 0};
static swig_type_info _swigt__p_FO_HPF = {"_p_FO_HPF", "FO_HPF *", 0, 0, (void*)&_wrap_class_FO_HPF, 0};
static swig_type_info _swigt__p_FO_LPF = {"_p_FO_LPF", "FO_LPF *", 0, 0, (void*)&_wrap_class_FO_LPF, 0};
static swig_type_info _swigt__p_FO_SHELVING_HIGH = {"_p_FO_SHELVING_HIGH", "FO_SHELVING_HIGH *", 0, 0, (void*)&_wrap_class_FO_SHELVING_HIGH, 0};
static swig_type_info _swigt__p_FO_SHELVING_LOW = {"_p_FO_SHELVING_LOW", "FO_SHELVING_LOW *", 0, 0, (void*)&_wrap_class_FO_SHELVING_LOW, 0};
static swig_type_info _swigt__p_LadderFilterBase = {"_p_LadderFilterBase", "LadderFilterBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NoiseGenerator = {"_p_NoiseGenerator", "NoiseGenerator *|::NoiseGenerator *", 0, 0, (void*)&_wrap_class_NoiseGenerator, 0};
static swig_type_info _swigt__p_PinkNoise = {"_p_PinkNoise", "PinkNoise *", 0, 0, (void*)&_wrap_class_PinkNoise, 0};
static swig_type_info _swigt__p_PinkingFilter = {"_p_PinkingFilter", "PinkingFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolyBLEP = {"_p_PolyBLEP", "PolyBLEP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RBJFilter = {"_p_RBJFilter", "::RBJFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RingBuffer = {"_p_RingBuffer", "RingBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SO_APF = {"_p_SO_APF", "SO_APF *", 0, 0, (void*)&_wrap_class_SO_APF, 0};
static swig_type_info _swigt__p_SO_BPF = {"_p_SO_BPF", "SO_BPF *", 0, 0, (void*)&_wrap_class_SO_BPF, 0};
static swig_type_info _swigt__p_SO_BSF = {"_p_SO_BSF", "SO_BSF *", 0, 0, (void*)&_wrap_class_SO_BSF, 0};
static swig_type_info _swigt__p_SO_BUTTERWORTH_BPF = {"_p_SO_BUTTERWORTH_BPF", "SO_BUTTERWORTH_BPF *", 0, 0, (void*)&_wrap_class_SO_BUTTERWORTH_BPF, 0};
static swig_type_info _swigt__p_SO_BUTTERWORTH_HPF = {"_p_SO_BUTTERWORTH_HPF", "SO_BUTTERWORTH_HPF *", 0, 0, (void*)&_wrap_class_SO_BUTTERWORTH_HPF, 0};
static swig_type_info _swigt__p_SO_BUTTERWORTH_LPF = {"_p_SO_BUTTERWORTH_LPF", "SO_BUTTERWORTH_LPF *", 0, 0, (void*)&_wrap_class_SO_BUTTERWORTH_LPF, 0};
static swig_type_info _swigt__p_SO_HPF = {"_p_SO_HPF", "SO_HPF *", 0, 0, (void*)&_wrap_class_SO_HPF, 0};
static swig_type_info _swigt__p_SO_LINKWITZ_RILEY_HPF = {"_p_SO_LINKWITZ_RILEY_HPF", "SO_LINKWITZ_RILEY_HPF *", 0, 0, (void*)&_wrap_class_SO_LINKWITZ_RILEY_HPF, 0};
static swig_type_info _swigt__p_SO_LINKWITZ_RILEY_LPF = {"_p_SO_LINKWITZ_RILEY_LPF", "SO_LINKWITZ_RILEY_LPF *", 0, 0, (void*)&_wrap_class_SO_LINKWITZ_RILEY_LPF, 0};
static swig_type_info _swigt__p_SO_LPF = {"_p_SO_LPF", "SO_LPF *", 0, 0, (void*)&_wrap_class_SO_LPF, 0};
static swig_type_info _swigt__p_SO_PARAMETRIC_CQ_BOOST = {"_p_SO_PARAMETRIC_CQ_BOOST", "SO_PARAMETRIC_CQ_BOOST *", 0, 0, (void*)&_wrap_class_SO_PARAMETRIC_CQ_BOOST, 0};
static swig_type_info _swigt__p_SO_PARAMETRIC_CQ_CUT = {"_p_SO_PARAMETRIC_CQ_CUT", "SO_PARAMETRIC_CQ_CUT *", 0, 0, (void*)&_wrap_class_SO_PARAMETRIC_CQ_CUT, 0};
static swig_type_info _swigt__p_SO_PARAMETRIC_NCQ = {"_p_SO_PARAMETRIC_NCQ", "SO_PARAMETRIC_NCQ *", 0, 0, (void*)&_wrap_class_SO_PARAMETRIC_NCQ, 0};
static swig_type_info _swigt__p_Sample = {"_p_Sample", "Sample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SndFileReaderDouble = {"_p_SndFileReaderDouble", "SndFileReaderDouble *", 0, 0, (void*)&_wrap_class_SndFileReaderDouble, 0};
static swig_type_info _swigt__p_SndFileReaderFloat = {"_p_SndFileReaderFloat", "SndFileReaderFloat *", 0, 0, (void*)&_wrap_class_SndFileReaderFloat, 0};
static swig_type_info _swigt__p_SndFileReaderInt = {"_p_SndFileReaderInt", "SndFileReaderInt *", 0, 0, (void*)&_wrap_class_SndFileReaderInt, 0};
static swig_type_info _swigt__p_SndFileReaderShort = {"_p_SndFileReaderShort", "SndFileReaderShort *", 0, 0, (void*)&_wrap_class_SndFileReaderShort, 0};
static swig_type_info _swigt__p_SndFileWriterDouble = {"_p_SndFileWriterDouble", "SndFileWriterDouble *", 0, 0, (void*)&_wrap_class_SndFileWriterDouble, 0};
static swig_type_info _swigt__p_SndFileWriterFloat = {"_p_SndFileWriterFloat", "SndFileWriterFloat *", 0, 0, (void*)&_wrap_class_SndFileWriterFloat, 0};
static swig_type_info _swigt__p_SndFileWriterInt = {"_p_SndFileWriterInt", "SndFileWriterInt *", 0, 0, (void*)&_wrap_class_SndFileWriterInt, 0};
static swig_type_info _swigt__p_SndFileWriterShort = {"_p_SndFileWriterShort", "SndFileWriterShort *", 0, 0, (void*)&_wrap_class_SndFileWriterShort, 0};
static swig_type_info _swigt__p_SoundWave__ADSR = {"_p_SoundWave__ADSR", "SoundWave::ADSR *", 0, 0, (void*)&_wrap_class_ADSR, 0};
static swig_type_info _swigt__p_SoundWave__BandlimitedOscillator = {"_p_SoundWave__BandlimitedOscillator", "SoundWave::BandlimitedOscillator *", 0, 0, (void*)&_wrap_class_BandlimitedOscillator, 0};
static swig_type_info _swigt__p_SoundWave__BrownNoiseGenerator = {"_p_SoundWave__BrownNoiseGenerator", "SoundWave::BrownNoiseGenerator *", 0, 0, (void*)&_wrap_class_BrownNoiseGenerator, 0};
static swig_type_info _swigt__p_SoundWave__CRingBuffer = {"_p_SoundWave__CRingBuffer", "SoundWave::CRingBuffer *", 0, 0, (void*)&_wrap_class_CRingBuffer, 0};
static swig_type_info _swigt__p_SoundWave__Filter = {"_p_SoundWave__Filter", "SoundWave::Filter *", 0, 0, (void*)&_wrap_class_Filter, 0};
static swig_type_info _swigt__p_SoundWave__GammaEnv = {"_p_SoundWave__GammaEnv", "SoundWave::GammaEnv *", 0, 0, (void*)&_wrap_class_GammaEnv, 0};
static swig_type_info _swigt__p_SoundWave__GaussianWhiteNoise = {"_p_SoundWave__GaussianWhiteNoise", "SoundWave::GaussianWhiteNoise *", 0, 0, (void*)&_wrap_class_GaussianWhiteNoise, 0};
static swig_type_info _swigt__p_SoundWave__ModifiedVelvetNoise = {"_p_SoundWave__ModifiedVelvetNoise", "SoundWave::ModifiedVelvetNoise *", 0, 0, (void*)&_wrap_class_ModifiedVelvetNoise, 0};
static swig_type_info _swigt__p_SoundWave__MoogLadderFilter = {"_p_SoundWave__MoogLadderFilter", "SoundWave::MoogLadderFilter *", 0, 0, (void*)&_wrap_class_MoogLadderFilter, 0};
static swig_type_info _swigt__p_SoundWave__NoiseFilter = {"_p_SoundWave__NoiseFilter", "SoundWave::NoiseFilter *", 0, 0, (void*)&_wrap_class_NoiseFilter, 0};
static swig_type_info _swigt__p_SoundWave__NoiseSamples = {"_p_SoundWave__NoiseSamples", "SoundWave::NoiseSamples *", 0, 0, (void*)&_wrap_class_NoiseSamples, 0};
static swig_type_info _swigt__p_SoundWave__ParametricEnvelope = {"_p_SoundWave__ParametricEnvelope", "SoundWave::ParametricEnvelope *", 0, 0, (void*)&_wrap_class_ParametricEnvelope, 0};
static swig_type_info _swigt__p_SoundWave__PinkNoiseGenerator = {"_p_SoundWave__PinkNoiseGenerator", "SoundWave::PinkNoiseGenerator *", 0, 0, (void*)&_wrap_class_PinkNoiseGenerator, 0};
static swig_type_info _swigt__p_SoundWave__RBJAllPassFilter = {"_p_SoundWave__RBJAllPassFilter", "SoundWave::RBJAllPassFilter *", 0, 0, (void*)&_wrap_class_RBJAllPassFilter, 0};
static swig_type_info _swigt__p_SoundWave__RBJBandPassFilter = {"_p_SoundWave__RBJBandPassFilter", "SoundWave::RBJBandPassFilter *", 0, 0, (void*)&_wrap_class_RBJBandPassFilter, 0};
static swig_type_info _swigt__p_SoundWave__RBJHighPassFilter = {"_p_SoundWave__RBJHighPassFilter", "SoundWave::RBJHighPassFilter *", 0, 0, (void*)&_wrap_class_RBJHighPassFilter, 0};
static swig_type_info _swigt__p_SoundWave__RBJHighShelfFilter = {"_p_SoundWave__RBJHighShelfFilter", "SoundWave::RBJHighShelfFilter *", 0, 0, (void*)&_wrap_class_RBJHighShelfFilter, 0};
static swig_type_info _swigt__p_SoundWave__RBJLowPassFilter = {"_p_SoundWave__RBJLowPassFilter", "SoundWave::RBJLowPassFilter *", 0, 0, (void*)&_wrap_class_RBJLowPassFilter, 0};
static swig_type_info _swigt__p_SoundWave__RBJLowShelfFilter = {"_p_SoundWave__RBJLowShelfFilter", "SoundWave::RBJLowShelfFilter *", 0, 0, (void*)&_wrap_class_RBJLowShelfFilter, 0};
static swig_type_info _swigt__p_SoundWave__RBJNotchFilter = {"_p_SoundWave__RBJNotchFilter", "SoundWave::RBJNotchFilter *", 0, 0, (void*)&_wrap_class_RBJNotchFilter, 0};
static swig_type_info _swigt__p_SoundWave__RBJPeakFilter = {"_p_SoundWave__RBJPeakFilter", "SoundWave::RBJPeakFilter *", 0, 0, (void*)&_wrap_class_RBJPeakFilter, 0};
static swig_type_info _swigt__p_SoundWave__WaveTableOsc = {"_p_SoundWave__WaveTableOsc", "SoundWave::WaveTableOsc *", 0, 0, (void*)&_wrap_class_WaveTableOsc, 0};
static swig_type_info _swigt__p_SoundWave__parameter_struct = {"_p_SoundWave__parameter_struct", "SoundWave::parameter_struct *", 0, 0, (void*)&_wrap_class_parameter_struct, 0};
static swig_type_info _swigt__p_SoundWave__waveTable = {"_p_SoundWave__waveTable", "SoundWave::waveTable *", 0, 0, (void*)&_wrap_class_waveTable, 0};
static swig_type_info _swigt__p_Std__StdVectorT_float_t = {"_p_Std__StdVectorT_float_t", "Std::StdVector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WhiteNoise = {"_p_WhiteNoise", "WhiteNoise *", 0, 0, (void*)&_wrap_class_WhiteNoise, 0};
static swig_type_info _swigt__p_WhiteNoiseSource = {"_p_WhiteNoiseSource", "WhiteNoiseSource *", 0, 0, (void*)&_wrap_class_WhiteNoiseSource, 0};
static swig_type_info _swigt__p_audiofft__AudioFFT = {"_p_audiofft__AudioFFT", "audiofft::AudioFFT *|audiofft::AudioFFTBase *", 0, 0, (void*)&_wrap_class_AudioFFT, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|coef_size_t *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fftconvolver__FFTConvolver = {"_p_fftconvolver__FFTConvolver", "fftconvolver::FFTConvolver *", 0, 0, (void*)&_wrap_class_FFTConvolver, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__mt19937 = {"_p_std__mt19937", "std::mt19937 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__uniform_real_distributionT_float_t = {"_p_std__uniform_real_distributionT_float_t", "std::uniform_real_distribution< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tp_coeffs = {"_p_tp_coeffs", "tp_coeffs *", 0, 0, (void*)&_wrap_class_tp_coeffs, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|u32 *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|u64 *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Biquad,
  &_swigt__p_BiquadModified,
  &_swigt__p_BrownNoise,
  &_swigt__p_BrowningFilter,
  &_swigt__p_FO_APF,
  &_swigt__p_FO_HPF,
  &_swigt__p_FO_LPF,
  &_swigt__p_FO_SHELVING_HIGH,
  &_swigt__p_FO_SHELVING_LOW,
  &_swigt__p_LadderFilterBase,
  &_swigt__p_NoiseGenerator,
  &_swigt__p_PinkNoise,
  &_swigt__p_PinkingFilter,
  &_swigt__p_PolyBLEP,
  &_swigt__p_RBJFilter,
  &_swigt__p_RingBuffer,
  &_swigt__p_SO_APF,
  &_swigt__p_SO_BPF,
  &_swigt__p_SO_BSF,
  &_swigt__p_SO_BUTTERWORTH_BPF,
  &_swigt__p_SO_BUTTERWORTH_HPF,
  &_swigt__p_SO_BUTTERWORTH_LPF,
  &_swigt__p_SO_HPF,
  &_swigt__p_SO_LINKWITZ_RILEY_HPF,
  &_swigt__p_SO_LINKWITZ_RILEY_LPF,
  &_swigt__p_SO_LPF,
  &_swigt__p_SO_PARAMETRIC_CQ_BOOST,
  &_swigt__p_SO_PARAMETRIC_CQ_CUT,
  &_swigt__p_SO_PARAMETRIC_NCQ,
  &_swigt__p_Sample,
  &_swigt__p_SndFileReaderDouble,
  &_swigt__p_SndFileReaderFloat,
  &_swigt__p_SndFileReaderInt,
  &_swigt__p_SndFileReaderShort,
  &_swigt__p_SndFileWriterDouble,
  &_swigt__p_SndFileWriterFloat,
  &_swigt__p_SndFileWriterInt,
  &_swigt__p_SndFileWriterShort,
  &_swigt__p_SoundWave__ADSR,
  &_swigt__p_SoundWave__BandlimitedOscillator,
  &_swigt__p_SoundWave__BrownNoiseGenerator,
  &_swigt__p_SoundWave__CRingBuffer,
  &_swigt__p_SoundWave__Filter,
  &_swigt__p_SoundWave__GammaEnv,
  &_swigt__p_SoundWave__GaussianWhiteNoise,
  &_swigt__p_SoundWave__ModifiedVelvetNoise,
  &_swigt__p_SoundWave__MoogLadderFilter,
  &_swigt__p_SoundWave__NoiseFilter,
  &_swigt__p_SoundWave__NoiseSamples,
  &_swigt__p_SoundWave__ParametricEnvelope,
  &_swigt__p_SoundWave__PinkNoiseGenerator,
  &_swigt__p_SoundWave__RBJAllPassFilter,
  &_swigt__p_SoundWave__RBJBandPassFilter,
  &_swigt__p_SoundWave__RBJHighPassFilter,
  &_swigt__p_SoundWave__RBJHighShelfFilter,
  &_swigt__p_SoundWave__RBJLowPassFilter,
  &_swigt__p_SoundWave__RBJLowShelfFilter,
  &_swigt__p_SoundWave__RBJNotchFilter,
  &_swigt__p_SoundWave__RBJPeakFilter,
  &_swigt__p_SoundWave__WaveTableOsc,
  &_swigt__p_SoundWave__parameter_struct,
  &_swigt__p_SoundWave__waveTable,
  &_swigt__p_Std__StdVectorT_float_t,
  &_swigt__p_WhiteNoise,
  &_swigt__p_WhiteNoiseSource,
  &_swigt__p_audiofft__AudioFFT,
  &_swigt__p_double,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_fftconvolver__FFTConvolver,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__mt19937,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__string,
  &_swigt__p_std__uniform_real_distributionT_float_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_tp_coeffs,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_Biquad[] = {  {&_swigt__p_SO_BUTTERWORTH_LPF, _p_SO_BUTTERWORTH_LPFTo_p_Biquad, 0, 0},  {&_swigt__p_BiquadModified, _p_BiquadModifiedTo_p_Biquad, 0, 0},  {&_swigt__p_SO_BUTTERWORTH_HPF, _p_SO_BUTTERWORTH_HPFTo_p_Biquad, 0, 0},  {&_swigt__p_FO_APF, _p_FO_APFTo_p_Biquad, 0, 0},  {&_swigt__p_SO_LPF, _p_SO_LPFTo_p_Biquad, 0, 0},  {&_swigt__p_FO_SHELVING_LOW, _p_FO_SHELVING_LOWTo_p_Biquad, 0, 0},  {&_swigt__p_SO_LINKWITZ_RILEY_LPF, _p_SO_LINKWITZ_RILEY_LPFTo_p_Biquad, 0, 0},  {&_swigt__p_SO_HPF, _p_SO_HPFTo_p_Biquad, 0, 0},  {&_swigt__p_SO_LINKWITZ_RILEY_HPF, _p_SO_LINKWITZ_RILEY_HPFTo_p_Biquad, 0, 0},  {&_swigt__p_SO_PARAMETRIC_CQ_CUT, _p_SO_PARAMETRIC_CQ_CUTTo_p_Biquad, 0, 0},  {&_swigt__p_FO_SHELVING_HIGH, _p_FO_SHELVING_HIGHTo_p_Biquad, 0, 0},  {&_swigt__p_SO_BSF, _p_SO_BSFTo_p_Biquad, 0, 0},  {&_swigt__p_SO_PARAMETRIC_CQ_BOOST, _p_SO_PARAMETRIC_CQ_BOOSTTo_p_Biquad, 0, 0},  {&_swigt__p_Biquad, 0, 0, 0},  {&_swigt__p_SO_BUTTERWORTH_BPF, _p_SO_BUTTERWORTH_BPFTo_p_Biquad, 0, 0},  {&_swigt__p_SO_PARAMETRIC_NCQ, _p_SO_PARAMETRIC_NCQTo_p_Biquad, 0, 0},  {&_swigt__p_SO_APF, _p_SO_APFTo_p_Biquad, 0, 0},  {&_swigt__p_FO_LPF, _p_FO_LPFTo_p_Biquad, 0, 0},  {&_swigt__p_FO_HPF, _p_FO_HPFTo_p_Biquad, 0, 0},  {&_swigt__p_SO_BPF, _p_SO_BPFTo_p_Biquad, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BiquadModified[] = {  {&_swigt__p_FO_SHELVING_HIGH, _p_FO_SHELVING_HIGHTo_p_BiquadModified, 0, 0},  {&_swigt__p_FO_SHELVING_LOW, _p_FO_SHELVING_LOWTo_p_BiquadModified, 0, 0},  {&_swigt__p_BiquadModified, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BrownNoise[] = {  {&_swigt__p_BrownNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BrowningFilter[] = {  {&_swigt__p_BrowningFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FO_APF[] = {  {&_swigt__p_FO_APF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FO_HPF[] = {  {&_swigt__p_FO_HPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FO_LPF[] = {  {&_swigt__p_FO_LPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FO_SHELVING_HIGH[] = {  {&_swigt__p_FO_SHELVING_HIGH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FO_SHELVING_LOW[] = {  {&_swigt__p_FO_SHELVING_LOW, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LadderFilterBase[] = {  {&_swigt__p_LadderFilterBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoiseGenerator[] = {  {&_swigt__p_NoiseGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PinkNoise[] = {  {&_swigt__p_PinkNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PinkingFilter[] = {  {&_swigt__p_PinkingFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolyBLEP[] = {  {&_swigt__p_PolyBLEP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RBJFilter[] = {  {&_swigt__p_RBJFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RingBuffer[] = {  {&_swigt__p_RingBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_APF[] = {  {&_swigt__p_SO_APF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_BPF[] = {  {&_swigt__p_SO_BPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_BSF[] = {  {&_swigt__p_SO_BSF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_BUTTERWORTH_BPF[] = {  {&_swigt__p_SO_BUTTERWORTH_BPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_BUTTERWORTH_HPF[] = {  {&_swigt__p_SO_BUTTERWORTH_HPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_BUTTERWORTH_LPF[] = {  {&_swigt__p_SO_BUTTERWORTH_LPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_HPF[] = {  {&_swigt__p_SO_HPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_LINKWITZ_RILEY_HPF[] = {  {&_swigt__p_SO_LINKWITZ_RILEY_HPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_LINKWITZ_RILEY_LPF[] = {  {&_swigt__p_SO_LINKWITZ_RILEY_LPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_LPF[] = {  {&_swigt__p_SO_LPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_PARAMETRIC_CQ_BOOST[] = {  {&_swigt__p_SO_PARAMETRIC_CQ_BOOST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_PARAMETRIC_CQ_CUT[] = {  {&_swigt__p_SO_PARAMETRIC_CQ_CUT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SO_PARAMETRIC_NCQ[] = {  {&_swigt__p_SO_PARAMETRIC_NCQ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Sample[] = {  {&_swigt__p_Sample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderDouble[] = {  {&_swigt__p_SndFileReaderDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderFloat[] = {  {&_swigt__p_SndFileReaderFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderInt[] = {  {&_swigt__p_SndFileReaderInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderShort[] = {  {&_swigt__p_SndFileReaderShort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterDouble[] = {  {&_swigt__p_SndFileWriterDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterFloat[] = {  {&_swigt__p_SndFileWriterFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterInt[] = {  {&_swigt__p_SndFileWriterInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterShort[] = {  {&_swigt__p_SndFileWriterShort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__ADSR[] = {  {&_swigt__p_SoundWave__ADSR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__BandlimitedOscillator[] = {  {&_swigt__p_SoundWave__BandlimitedOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__BrownNoiseGenerator[] = {  {&_swigt__p_SoundWave__BrownNoiseGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__CRingBuffer[] = {  {&_swigt__p_SoundWave__CRingBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__Filter[] = {  {&_swigt__p_SoundWave__RBJNotchFilter, _p_SoundWave__RBJNotchFilterTo_p_SoundWave__Filter, 0, 0},  {&_swigt__p_SoundWave__RBJLowShelfFilter, _p_SoundWave__RBJLowShelfFilterTo_p_SoundWave__Filter, 0, 0},  {&_swigt__p_SoundWave__RBJHighShelfFilter, _p_SoundWave__RBJHighShelfFilterTo_p_SoundWave__Filter, 0, 0},  {&_swigt__p_SoundWave__Filter, 0, 0, 0},  {&_swigt__p_SoundWave__RBJLowPassFilter, _p_SoundWave__RBJLowPassFilterTo_p_SoundWave__Filter, 0, 0},  {&_swigt__p_SoundWave__RBJHighPassFilter, _p_SoundWave__RBJHighPassFilterTo_p_SoundWave__Filter, 0, 0},  {&_swigt__p_SoundWave__RBJBandPassFilter, _p_SoundWave__RBJBandPassFilterTo_p_SoundWave__Filter, 0, 0},  {&_swigt__p_SoundWave__RBJAllPassFilter, _p_SoundWave__RBJAllPassFilterTo_p_SoundWave__Filter, 0, 0},  {&_swigt__p_SoundWave__RBJPeakFilter, _p_SoundWave__RBJPeakFilterTo_p_SoundWave__Filter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__GammaEnv[] = {  {&_swigt__p_SoundWave__GammaEnv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__GaussianWhiteNoise[] = {  {&_swigt__p_SoundWave__GaussianWhiteNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__ModifiedVelvetNoise[] = {  {&_swigt__p_SoundWave__ModifiedVelvetNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__MoogLadderFilter[] = {  {&_swigt__p_SoundWave__MoogLadderFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__NoiseFilter[] = {  {&_swigt__p_SoundWave__NoiseFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__NoiseSamples[] = {  {&_swigt__p_SoundWave__NoiseSamples, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__ParametricEnvelope[] = {  {&_swigt__p_SoundWave__ParametricEnvelope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__PinkNoiseGenerator[] = {  {&_swigt__p_SoundWave__PinkNoiseGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJAllPassFilter[] = {  {&_swigt__p_SoundWave__RBJAllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJBandPassFilter[] = {  {&_swigt__p_SoundWave__RBJBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJHighPassFilter[] = {  {&_swigt__p_SoundWave__RBJHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJHighShelfFilter[] = {  {&_swigt__p_SoundWave__RBJHighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJLowPassFilter[] = {  {&_swigt__p_SoundWave__RBJLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJLowShelfFilter[] = {  {&_swigt__p_SoundWave__RBJLowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJNotchFilter[] = {  {&_swigt__p_SoundWave__RBJNotchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__RBJPeakFilter[] = {  {&_swigt__p_SoundWave__RBJPeakFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__WaveTableOsc[] = {  {&_swigt__p_SoundWave__WaveTableOsc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__parameter_struct[] = {  {&_swigt__p_SoundWave__parameter_struct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__waveTable[] = {  {&_swigt__p_SoundWave__waveTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_float_t[] = {  {&_swigt__p_Std__StdVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WhiteNoise[] = {  {&_swigt__p_WhiteNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WhiteNoiseSource[] = {  {&_swigt__p_WhiteNoise, _p_WhiteNoiseTo_p_WhiteNoiseSource, 0, 0},  {&_swigt__p_WhiteNoiseSource, 0, 0, 0},  {&_swigt__p_BrownNoise, _p_BrownNoiseTo_p_WhiteNoiseSource, 0, 0},  {&_swigt__p_PinkNoise, _p_PinkNoiseTo_p_WhiteNoiseSource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_audiofft__AudioFFT[] = {  {&_swigt__p_audiofft__AudioFFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fftconvolver__FFTConvolver[] = {  {&_swigt__p_fftconvolver__FFTConvolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mt19937[] = {  {&_swigt__p_std__mt19937, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__uniform_real_distributionT_float_t[] = {  {&_swigt__p_std__uniform_real_distributionT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tp_coeffs[] = {  {&_swigt__p_tp_coeffs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Biquad,
  _swigc__p_BiquadModified,
  _swigc__p_BrownNoise,
  _swigc__p_BrowningFilter,
  _swigc__p_FO_APF,
  _swigc__p_FO_HPF,
  _swigc__p_FO_LPF,
  _swigc__p_FO_SHELVING_HIGH,
  _swigc__p_FO_SHELVING_LOW,
  _swigc__p_LadderFilterBase,
  _swigc__p_NoiseGenerator,
  _swigc__p_PinkNoise,
  _swigc__p_PinkingFilter,
  _swigc__p_PolyBLEP,
  _swigc__p_RBJFilter,
  _swigc__p_RingBuffer,
  _swigc__p_SO_APF,
  _swigc__p_SO_BPF,
  _swigc__p_SO_BSF,
  _swigc__p_SO_BUTTERWORTH_BPF,
  _swigc__p_SO_BUTTERWORTH_HPF,
  _swigc__p_SO_BUTTERWORTH_LPF,
  _swigc__p_SO_HPF,
  _swigc__p_SO_LINKWITZ_RILEY_HPF,
  _swigc__p_SO_LINKWITZ_RILEY_LPF,
  _swigc__p_SO_LPF,
  _swigc__p_SO_PARAMETRIC_CQ_BOOST,
  _swigc__p_SO_PARAMETRIC_CQ_CUT,
  _swigc__p_SO_PARAMETRIC_NCQ,
  _swigc__p_Sample,
  _swigc__p_SndFileReaderDouble,
  _swigc__p_SndFileReaderFloat,
  _swigc__p_SndFileReaderInt,
  _swigc__p_SndFileReaderShort,
  _swigc__p_SndFileWriterDouble,
  _swigc__p_SndFileWriterFloat,
  _swigc__p_SndFileWriterInt,
  _swigc__p_SndFileWriterShort,
  _swigc__p_SoundWave__ADSR,
  _swigc__p_SoundWave__BandlimitedOscillator,
  _swigc__p_SoundWave__BrownNoiseGenerator,
  _swigc__p_SoundWave__CRingBuffer,
  _swigc__p_SoundWave__Filter,
  _swigc__p_SoundWave__GammaEnv,
  _swigc__p_SoundWave__GaussianWhiteNoise,
  _swigc__p_SoundWave__ModifiedVelvetNoise,
  _swigc__p_SoundWave__MoogLadderFilter,
  _swigc__p_SoundWave__NoiseFilter,
  _swigc__p_SoundWave__NoiseSamples,
  _swigc__p_SoundWave__ParametricEnvelope,
  _swigc__p_SoundWave__PinkNoiseGenerator,
  _swigc__p_SoundWave__RBJAllPassFilter,
  _swigc__p_SoundWave__RBJBandPassFilter,
  _swigc__p_SoundWave__RBJHighPassFilter,
  _swigc__p_SoundWave__RBJHighShelfFilter,
  _swigc__p_SoundWave__RBJLowPassFilter,
  _swigc__p_SoundWave__RBJLowShelfFilter,
  _swigc__p_SoundWave__RBJNotchFilter,
  _swigc__p_SoundWave__RBJPeakFilter,
  _swigc__p_SoundWave__WaveTableOsc,
  _swigc__p_SoundWave__parameter_struct,
  _swigc__p_SoundWave__waveTable,
  _swigc__p_Std__StdVectorT_float_t,
  _swigc__p_WhiteNoise,
  _swigc__p_WhiteNoiseSource,
  _swigc__p_audiofft__AudioFFT,
  _swigc__p_double,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_fftconvolver__FFTConvolver,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__mt19937,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__string,
  _swigc__p_std__uniform_real_distributionT_float_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_tp_coeffs,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

