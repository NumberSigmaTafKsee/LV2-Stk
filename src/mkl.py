# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mkl
else:
    import _mkl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def real(*args):
    return _mkl.real(*args)

def imag(*args):
    return _mkl.imag(*args)

def abs(*args):
    return _mkl.abs(*args)

def arg(*args):
    return _mkl.arg(*args)

def norm(*args):
    return _mkl.norm(*args)

def proj(*args):
    return _mkl.proj(*args)

def polar(*args):
    return _mkl.polar(*args)

def exp(*args):
    return _mkl.exp(*args)

def log(*args):
    return _mkl.log(*args)

def log10(*args):
    return _mkl.log10(*args)

def pow(*args):
    return _mkl.pow(*args)

def sqrt(*args):
    return _mkl.sqrt(*args)

def sin(*args):
    return _mkl.sin(*args)

def cos(*args):
    return _mkl.cos(*args)

def tan(*args):
    return _mkl.tan(*args)

def asin(*args):
    return _mkl.asin(*args)

def acos(*args):
    return _mkl.acos(*args)

def atan(*args):
    return _mkl.atan(*args)

def sinh(*args):
    return _mkl.sinh(*args)

def cosh(*args):
    return _mkl.cosh(*args)

def tanh(*args):
    return _mkl.tanh(*args)

def asinh(*args):
    return _mkl.asinh(*args)

def acosh(*args):
    return _mkl.acosh(*args)

def atanh(*args):
    return _mkl.atanh(*args)
class stdvector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mkl.stdvector_swiginit(self, _mkl.new_stdvector(*args))

    def __getitem(self, i):
        return _mkl.stdvector___getitem(self, i)

    def __setitem(self, i, val):
        return _mkl.stdvector___setitem(self, i, val)

    def begin(self):
        return _mkl.stdvector_begin(self)

    def end(self):
        return _mkl.stdvector_end(self)

    def erase(self, *args):
        return _mkl.stdvector_erase(self, *args)

    def front(self):
        return _mkl.stdvector_front(self)

    def back(self):
        return _mkl.stdvector_back(self)

    def push_back(self, q):
        return _mkl.stdvector_push_back(self, q)

    def pop_back(self):
        return _mkl.stdvector_pop_back(self)

    def at(self, i):
        return _mkl.stdvector_at(self, i)

    def assign(self, n, val):
        return _mkl.stdvector_assign(self, n, val)

    def data(self):
        return _mkl.stdvector_data(self)

    def size(self):
        return _mkl.stdvector_size(self)

    def empty(self):
        return _mkl.stdvector_empty(self)

    def resize(self, n):
        return _mkl.stdvector_resize(self, n)

    def clear(self):
        return _mkl.stdvector_clear(self)

    def swap(self, x):
        return _mkl.stdvector_swap(self, x)

    def shrink_to_fit(self):
        return _mkl.stdvector_shrink_to_fit(self)

    def reserve(self, n):
        return _mkl.stdvector_reserve(self, n)

    def max_size(self):
        return _mkl.stdvector_max_size(self)

    def capacity(self):
        return _mkl.stdvector_capacity(self)
    __swig_destroy__ = _mkl.delete_stdvector

# Register stdvector in _mkl:
_mkl.stdvector_swigregister(stdvector)

class stringmap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mkl.stringmap_swiginit(self, _mkl.new_stringmap(*args))

    def __getitem(self, key):
        return _mkl.stringmap___getitem(self, key)

    def __setitem(self, key, value):
        return _mkl.stringmap___setitem(self, key, value)

    def get_begin(self):
        return _mkl.stringmap_get_begin(self)

    def get_end(self):
        return _mkl.stringmap_get_end(self)

    def at(self, key):
        return _mkl.stringmap_at(self, key)

    def empty(self):
        return _mkl.stringmap_empty(self)

    def size(self):
        return _mkl.stringmap_size(self)

    def clear(self):
        return _mkl.stringmap_clear(self)

    def erase(self, key):
        return _mkl.stringmap_erase(self, key)

    def count(self, key):
        return _mkl.stringmap_count(self, key)
    __swig_destroy__ = _mkl.delete_stringmap

# Register stringmap in _mkl:
_mkl.stringmap_swigregister(stringmap)

class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vector = property(_mkl.Vector_vector_get, _mkl.Vector_vector_set)

    def __init__(self, *args):
        _mkl.Vector_swiginit(self, _mkl.new_Vector(*args))

    def min(self):
        return _mkl.Vector_min(self)

    def max(self):
        return _mkl.Vector_max(self)

    def min_index(self):
        return _mkl.Vector_min_index(self)

    def max_index(self):
        return _mkl.Vector_max_index(self)

    def size(self):
        return _mkl.Vector_size(self)

    def data(self):
        return _mkl.Vector_data(self)

    def resize(self, i):
        return _mkl.Vector_resize(self, i)

    def front(self):
        return _mkl.Vector_front(self)

    def back(self):
        return _mkl.Vector_back(self)

    def push_back(self, x):
        return _mkl.Vector_push_back(self, x)

    def pop_back(self):
        return _mkl.Vector_pop_back(self)

    def __iadd__(self, v):
        return _mkl.Vector___iadd__(self, v)

    def __isub__(self, v):
        return _mkl.Vector___isub__(self, v)

    def __imul__(self, v):
        return _mkl.Vector___imul__(self, v)

    def __itruediv__(self, *args):
        return _mkl.Vector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _mkl.Vector___add__(self, v)

    def __sub__(self, v):
        return _mkl.Vector___sub__(self, v)

    def __mul__(self, v):
        return _mkl.Vector___mul__(self, v)

    def __truediv__(self, *args):
        return _mkl.Vector___truediv__(self, *args)
    __div__ = __truediv__



    def zero(self):
        return _mkl.Vector_zero(self)

    def fill(self, x):
        return _mkl.Vector_fill(self, x)

    def ones(self):
        return _mkl.Vector_ones(self)

    def random(self, *args):
        return _mkl.Vector_random(self, *args)

    def slice(self, start, len):
        return _mkl.Vector_slice(self, start, len)

    def __getitem__(self, i):
        return _mkl.Vector___getitem__(self, i)

    def __setitem__(self, i, x):
        return _mkl.Vector___setitem__(self, i, x)

    def println(self):
        return _mkl.Vector_println(self)
    __swig_destroy__ = _mkl.delete_Vector

# Register Vector in _mkl:
_mkl.Vector_swigregister(Vector)

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    matrix = property(_mkl.Matrix_matrix_get, _mkl.Matrix_matrix_set)
    M = property(_mkl.Matrix_M_get, _mkl.Matrix_M_set)
    N = property(_mkl.Matrix_N_get, _mkl.Matrix_N_set)

    def __init__(self, *args):
        _mkl.Matrix_swiginit(self, _mkl.new_Matrix(*args))

    def size(self):
        return _mkl.Matrix_size(self)

    def rows(self):
        return _mkl.Matrix_rows(self)

    def cols(self):
        return _mkl.Matrix_cols(self)

    def resize(self, r, c):
        return _mkl.Matrix_resize(self, r, c)

    def __call__(self, i, j):
        return _mkl.Matrix___call__(self, i, j)

    def __add__(self, m):
        return _mkl.Matrix___add__(self, m)

    def __sub__(self, m):
        return _mkl.Matrix___sub__(self, m)

    def __mul__(self, b):
        return _mkl.Matrix___mul__(self, b)

    def hadamard(self, m):
        return _mkl.Matrix_hadamard(self, m)

    def transpose(self):
        return _mkl.Matrix_transpose(self)

    def zero(self):
        return _mkl.Matrix_zero(self)

    def fill(self, x):
        return _mkl.Matrix_fill(self, x)

    def ones(self):
        return _mkl.Matrix_ones(self)

    def random(self, *args):
        return _mkl.Matrix_random(self, *args)

    def identity(self):
        return _mkl.Matrix_identity(self)

    def get_matrix(self):
        return _mkl.Matrix_get_matrix(self)

    def __getitem__(self, row):
        return _mkl.Matrix___getitem__(self, row)

    def println(self):
        return _mkl.Matrix_println(self)
    __swig_destroy__ = _mkl.delete_Matrix

# Register Matrix in _mkl:
_mkl.Matrix_swigregister(Matrix)

class MatrixView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    matrix = property(_mkl.MatrixView_matrix_get, _mkl.MatrixView_matrix_set)
    row = property(_mkl.MatrixView_row_get, _mkl.MatrixView_row_set)

    def __init__(self, m, r):
        _mkl.MatrixView_swiginit(self, _mkl.new_MatrixView(m, r))

    def __getitem(self, i):
        return _mkl.MatrixView___getitem(self, i)

    def __setitem(self, i, x):
        return _mkl.MatrixView___setitem(self, i, x)
    __swig_destroy__ = _mkl.delete_MatrixView

# Register MatrixView in _mkl:
_mkl.MatrixView_swigregister(MatrixView)

class flt_complex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mkl.flt_complex_swiginit(self, _mkl.new_flt_complex(*args))

    def real(self, *args):
        return _mkl.flt_complex_real(self, *args)

    def imag(self, *args):
        return _mkl.flt_complex_imag(self, *args)

    def __add__(self, b):
        return _mkl.flt_complex___add__(self, b)

    def __sub__(self, b):
        return _mkl.flt_complex___sub__(self, b)

    def __div__(self, b):
        return _mkl.flt_complex___div__(self, b)

    def __mul__(self, b):
        return _mkl.flt_complex___mul__(self, b)

    def __pow__(self, *args):
        return _mkl.flt_complex___pow__(self, *args)

    def __eq__(self, b):
        return _mkl.flt_complex___eq__(self, b)
    __swig_destroy__ = _mkl.delete_flt_complex

# Register flt_complex in _mkl:
_mkl.flt_complex_swigregister(flt_complex)

class dbl_omplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mkl.dbl_omplex_swiginit(self, _mkl.new_dbl_omplex(*args))

    def real(self, *args):
        return _mkl.dbl_omplex_real(self, *args)

    def imag(self, *args):
        return _mkl.dbl_omplex_imag(self, *args)

    def __add__(self, b):
        return _mkl.dbl_omplex___add__(self, b)

    def __sub__(self, b):
        return _mkl.dbl_omplex___sub__(self, b)

    def __div__(self, b):
        return _mkl.dbl_omplex___div__(self, b)

    def __mul__(self, b):
        return _mkl.dbl_omplex___mul__(self, b)

    def __pow__(self, *args):
        return _mkl.dbl_omplex___pow__(self, *args)

    def __eq__(self, b):
        return _mkl.dbl_omplex___eq__(self, b)
    __swig_destroy__ = _mkl.delete_dbl_omplex

# Register dbl_omplex in _mkl:
_mkl.dbl_omplex_swigregister(dbl_omplex)


def matmul(a, b):
    return _mkl.matmul(a, b)

def sqr(*args):
    return _mkl.sqr(*args)

def abs(*args):
    return _mkl.abs(*args)

def inc(*args):
    return _mkl.inc(*args)

def sqrt(*args):
    return _mkl.sqrt(*args)

def rsqrt(*args):
    return _mkl.rsqrt(*args)

def cbrt(*args):
    return _mkl.cbrt(*args)

def rcbrt(*args):
    return _mkl.rcbrt(*args)

def pow(*args):
    return _mkl.pow(*args)

def pow2o3(*args):
    return _mkl.pow2o3(*args)

def pow3o2(*args):
    return _mkl.pow3o2(*args)

def hypot(*args):
    return _mkl.hypot(*args)

def exp(*args):
    return _mkl.exp(*args)

def exp2(*args):
    return _mkl.exp2(*args)

def exp10(*args):
    return _mkl.exp10(*args)

def expm1(*args):
    return _mkl.expm1(*args)

def ln(*args):
    return _mkl.ln(*args)

def log10(*args):
    return _mkl.log10(*args)

def log2(*args):
    return _mkl.log2(*args)

def logb(*args):
    return _mkl.logb(*args)

def log1p(*args):
    return _mkl.log1p(*args)

def cos(*args):
    return _mkl.cos(*args)

def sin(*args):
    return _mkl.sin(*args)

def tan(*args):
    return _mkl.tan(*args)

def acos(*args):
    return _mkl.acos(*args)

def asin(*args):
    return _mkl.asin(*args)

def atan(*args):
    return _mkl.atan(*args)

def atan2(*args):
    return _mkl.atan2(*args)

def cosh(*args):
    return _mkl.cosh(*args)

def sinh(*args):
    return _mkl.sinh(*args)

def tanh(*args):
    return _mkl.tanh(*args)

def acosh(*args):
    return _mkl.acosh(*args)

def asinh(*args):
    return _mkl.asinh(*args)

def atanh(*args):
    return _mkl.atanh(*args)

def sincos(*args):
    return _mkl.sincos(*args)

def erf(*args):
    return _mkl.erf(*args)

def erfinv(*args):
    return _mkl.erfinv(*args)

def erfc(*args):
    return _mkl.erfc(*args)

def cdfnorm(*args):
    return _mkl.cdfnorm(*args)

def cdfnorminv(*args):
    return _mkl.cdfnorminv(*args)

def floor(*args):
    return _mkl.floor(*args)

def ceil(*args):
    return _mkl.ceil(*args)

def trunc(*args):
    return _mkl.trunc(*args)

def round(*args):
    return _mkl.round(*args)

def nearbyint(*args):
    return _mkl.nearbyint(*args)

def rint(*args):
    return _mkl.rint(*args)

def fmod(*args):
    return _mkl.fmod(*args)

def sinpi(*args):
    return _mkl.sinpi(*args)

def cospi(*args):
    return _mkl.cospi(*args)

def tanpi(*args):
    return _mkl.tanpi(*args)

def asinpi(*args):
    return _mkl.asinpi(*args)

def acospi(*args):
    return _mkl.acospi(*args)

def atanpi(*args):
    return _mkl.atanpi(*args)

def atan2pi(*args):
    return _mkl.atan2pi(*args)

def cosd(*args):
    return _mkl.cosd(*args)

def sind(*args):
    return _mkl.sind(*args)

def tand(*args):
    return _mkl.tand(*args)

def lgamma(*args):
    return _mkl.lgamma(*args)

def tgamma(*args):
    return _mkl.tgamma(*args)

def expint1(*args):
    return _mkl.expint1(*args)

def copy(a):
    return _mkl.copy(a)

def add(a, b):
    return _mkl.add(a, b)

def sub(a, b):
    return _mkl.sub(a, b)

def dot(a, b):
    return _mkl.dot(a, b)

def nrm2(a):
    return _mkl.nrm2(a)

def scale(x, alpha):
    return _mkl.scale(x, alpha)

def min_index(*args):
    return _mkl.min_index(*args)

def max_index(*args):
    return _mkl.max_index(*args)

def linspace(*args):
    return _mkl.linspace(*args)

def interleave(*args):
    return _mkl.interleave(*args)

def dinterleave(*args):
    return _mkl.dinterleave(*args)


